// Generated from grammars/CqlParser.g4 by ANTLR 4.9.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CqlParserListener = require('./CqlParserListener').CqlParserListener;
var CqlParserVisitor = require('./CqlParserVisitor').CqlParserVisitor;

const serializedATN = [
  "\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
  "\u5964\u0003\u00e3\u0c79\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
  "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
  "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
  "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
  "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
  "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
  "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
  "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
  '\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004"\t"\u0004#',
  "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004",
  "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
  "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
  "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
  "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
  "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
  "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
  "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
  "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
  "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
  "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
  "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
  "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
  "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
  "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
  "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
  "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
  "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
  "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
  "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
  "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
  "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
  "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
  "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
  "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
  "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
  "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
  "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
  "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
  "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
  "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
  "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
  "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
  "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
  "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
  "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
  "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
  "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
  "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
  "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
  "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
  "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
  "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
  "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
  "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
  "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004",
  "\u00f2\t\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t",
  "\u00f5\u0004\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004",
  "\u00f9\t\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t",
  "\u00fc\u0004\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004",
  "\u0100\t\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t",
  "\u0103\u0004\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004",
  "\u0107\t\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t",
  "\u010a\u0004\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004",
  "\u010e\t\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t",
  "\u0111\u0004\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004",
  "\u0115\t\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t",
  "\u0118\u0004\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004",
  "\u011c\t\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t",
  "\u011f\u0004\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004",
  "\u0123\t\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t",
  "\u0126\u0004\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004",
  "\u012a\t\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t",
  "\u012d\u0004\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004",
  "\u0131\t\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t",
  "\u0134\u0004\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004",
  "\u0138\t\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t",
  "\u013b\u0004\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004",
  "\u013f\t\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t",
  "\u0142\u0004\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004",
  "\u0146\t\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t",
  "\u0149\u0004\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004",
  "\u014d\t\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t",
  "\u0150\u0004\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004",
  "\u0154\t\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t",
  "\u0157\u0004\u0158\t\u0158\u0003\u0002\u0005\u0002\u02b2\n\u0002\u0003",
  "\u0002\u0005\u0002\u02b5\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
  "\u0003\u0003\u0005\u0003\u02bb\n\u0003\u0003\u0003\u0003\u0003\u0003",
  "\u0003\u0007\u0003\u02c0\n\u0003\f\u0003\u000e\u0003\u02c3\u000b\u0003",
  "\u0003\u0003\u0003\u0003\u0005\u0003\u02c7\n\u0003\u0003\u0003\u0005",
  "\u0003\u02ca\n\u0003\u0003\u0003\u0005\u0003\u02cd\n\u0003\u0003\u0004",
  "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006",
  "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
  "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
  "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
  "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
  "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
  "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006",
  "\u02f9\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
  "\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\t\u0003",
  "\t\u0003\t\u0003\t\u0003\t\u0005\t\u030a\n\t\u0003\t\u0005\t\u030d\n",
  "\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0314\n\n\u0003\n",
  "\u0003\n\u0003\n\u0005\n\u0319\n\n\u0003\u000b\u0003\u000b\u0003\u000b",
  "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0005",
  "\f\u0324\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
  "\u0003\f\u0005\f\u032e\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
  "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u033d",
  "\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
  "\u0003\r\u0005\r\u0348\n\r\u0003\r\u0003\r\u0003\r\u0005\r\u034d\n\r",
  "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
  "\r\u0005\r\u0358\n\r\u0003\r\u0003\r\u0005\r\u035c\n\r\u0003\u000e\u0003",
  "\u000e\u0003\u000e\u0005\u000e\u0361\n\u000e\u0003\u000e\u0003\u000e",
  "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0369\n",
  "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u036e\n\u000f",
  "\u0003\u000f\u0003\u000f\u0005\u000f\u0372\n\u000f\u0003\u0010\u0003",
  "\u0010\u0003\u0010\u0005\u0010\u0377\n\u0010\u0003\u0010\u0003\u0010",
  "\u0003\u0010\u0005\u0010\u037c\n\u0010\u0003\u0010\u0003\u0010\u0003",
  "\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
  "\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0389\n\u0011\f\u0011\u000e",
  "\u0011\u038c\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012",
  "\u0391\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0396",
  "\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013",
  "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u03a0\n\u0013\u0003",
  "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u03a5\n\u0013\u0003\u0013",
  "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
  "\u0003\u0013\u0005\u0013\u03af\n\u0013\u0003\u0013\u0003\u0013\u0003",
  "\u0013\u0005\u0013\u03b4\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
  "\u0005\u0013\u03b9\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
  "\u0014\u0003\u0014\u0005\u0014\u03c0\n\u0014\u0003\u0015\u0003\u0015",
  "\u0003\u0015\u0003\u0015\u0007\u0015\u03c6\n\u0015\f\u0015\u000e\u0015",
  "\u03c9\u000b\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
  "\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005",
  "\u0018\u03d5\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
  "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
  "\u0005\u0018\u03e1\n\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u03e5",
  "\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u03e9\n\u0019\u0003\u0019",
  "\u0003\u0019\u0003\u0019\u0005\u0019\u03ee\n\u0019\u0003\u0019\u0003",
  "\u0019\u0003\u0019\u0005\u0019\u03f3\n\u0019\u0003\u0019\u0003\u0019",
  "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
  "\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
  "\u0003\u001b\u0007\u001b\u0404\n\u001b\f\u001b\u000e\u001b\u0407\u000b",
  "\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u040d",
  "\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d",
  "\u0003\u001d\u0005\u001d\u0415\n\u001d\u0003\u001d\u0003\u001d\u0005",
  "\u001d\u0419\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d",
  "\u041e\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
  "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
  "\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
  "\u001e\u0005\u001e\u0431\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
  "\u0003\u001f\u0003\u001f\u0007\u001f\u0438\n\u001f\f\u001f\u000e\u001f",
  "\u043b\u000b\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003",
  " \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0007!\u0449\n!\f!\u000e",
  '!\u044c\u000b!\u0003!\u0003!\u0003"\u0003"\u0003"\u0003"\u0003"',
  '\u0007"\u0455\n"\f"\u000e"\u0458\u000b"\u0003"\u0003"\u0003#',
  "\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u0465",
  "\n$\u0003%\u0003%\u0003%\u0003&\u0003&\u0005&\u046c\n&\u0003'\u0003",
  "'\u0003'\u0003'\u0003'\u0005'\u0473\n'\u0003'\u0003'\u0003'",
  "\u0003(\u0003(\u0003(\u0005(\u047b\n(\u0003)\u0003)\u0003)\u0003*\u0003",
  "*\u0003*\u0003*\u0007*\u0484\n*\f*\u000e*\u0487\u000b*\u0003+\u0003",
  "+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003",
  "-\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u049a\n.\u0003.\u0003.\u0003",
  ".\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u04a5\n/\u00030\u0003",
  "0\u00030\u00031\u00031\u00031\u00031\u00031\u00032\u00032\u00032\u0003",
  "2\u00033\u00033\u00033\u00034\u00034\u00034\u00034\u00074\u04ba\n4\f",
  "4\u000e4\u04bd\u000b4\u00035\u00035\u00035\u00036\u00036\u00036\u0003",
  "6\u00036\u00036\u00076\u04c8\n6\f6\u000e6\u04cb\u000b6\u00037\u0003",
  "7\u00037\u00037\u00057\u04d1\n7\u00038\u00038\u00038\u00038\u00038\u0007",
  "8\u04d8\n8\f8\u000e8\u04db\u000b8\u00039\u00039\u00039\u00039\u0003",
  "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
  "9\u00039\u00059\u04ed\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0005",
  ":\u04f5\n:\u0003:\u0003:\u0003:\u0003:\u0005:\u04fb\n:\u0003;\u0003",
  ";\u0003;\u0005;\u0500\n;\u0003;\u0003;\u0003<\u0003<\u0003<\u0005<\u0507",
  "\n<\u0003<\u0003<\u0003<\u0005<\u050c\n<\u0003<\u0003<\u0003=\u0003",
  "=\u0003=\u0003=\u0005=\u0514\n=\u0003=\u0003=\u0003=\u0005=\u0519\n",
  "=\u0003=\u0003=\u0003>\u0003>\u0003>\u0005>\u0520\n>\u0003>\u0003>\u0003",
  ">\u0005>\u0525\n>\u0003>\u0003>\u0003?\u0003?\u0003?\u0005?\u052c\n",
  "?\u0003?\u0003?\u0003?\u0005?\u0531\n?\u0003?\u0003?\u0003@\u0003@\u0003",
  "@\u0005@\u0538\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u053f\n",
  "@\u0003@\u0003@\u0003A\u0003A\u0003A\u0005A\u0546\nA\u0003A\u0003A\u0003",
  "B\u0003B\u0003B\u0005B\u054d\nB\u0003B\u0003B\u0003B\u0005B\u0552\n",
  "B\u0003B\u0003B\u0003C\u0003C\u0003C\u0005C\u0559\nC\u0003C\u0003C\u0003",
  "D\u0003D\u0003D\u0005D\u0560\nD\u0003D\u0003D\u0003D\u0005D\u0565\n",
  "D\u0003D\u0003D\u0003E\u0003E\u0003E\u0005E\u056c\nE\u0003E\u0003E\u0003",
  "E\u0005E\u0571\nE\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u0578\n",
  "E\u0003F\u0003F\u0005F\u057c\nF\u0003G\u0003G\u0005G\u0580\nG\u0003",
  "G\u0003G\u0003G\u0005G\u0585\nG\u0007G\u0587\nG\fG\u000eG\u058a\u000b",
  "G\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003",
  "I\u0003I\u0007I\u0597\nI\fI\u000eI\u059a\u000bI\u0003J\u0003J\u0003",
  "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u05a5\nJ\u0003K\u0003",
  "K\u0003L\u0003L\u0003L\u0005L\u05ac\nL\u0003M\u0003M\u0003M\u0003M\u0003",
  "M\u0007M\u05b3\nM\fM\u000eM\u05b6\u000bM\u0003M\u0003M\u0003N\u0003",
  "N\u0003N\u0003N\u0003O\u0003O\u0003P\u0003P\u0003P\u0005P\u05c3\nP\u0003",
  "Q\u0003Q\u0003Q\u0003Q\u0007Q\u05c9\nQ\fQ\u000eQ\u05cc\u000bQ\u0003",
  "Q\u0003Q\u0003Q\u0005Q\u05d1\nQ\u0003R\u0003R\u0003R\u0005R\u05d6\n",
  "R\u0003S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003",
  "U\u0003U\u0003U\u0005U\u05e4\nU\u0003V\u0003V\u0003W\u0003W\u0003W\u0003",
  "W\u0005W\u05ec\nW\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0005X\u05f4",
  "\nX\u0003Y\u0003Y\u0003Y\u0003Y\u0007Y\u05fa\nY\fY\u000eY\u05fd\u000b",
  "Y\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u0603\nZ\fZ\u000eZ\u0606\u000b",
  "Z\u0003[\u0003[\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003^\u0003^\u0005",
  "^\u0611\n^\u0003^\u0003^\u0005^\u0615\n^\u0003_\u0003_\u0005_\u0619",
  "\n_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
  "`\u0003`\u0003`\u0005`\u0627\n`\u0003a\u0003a\u0003a\u0003a\u0007a\u062d",
  "\na\fa\u000ea\u0630\u000ba\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
  "b\u0005b\u0638\nb\u0003c\u0003c\u0003c\u0003c\u0003d\u0003d\u0003d\u0003",
  "e\u0003e\u0005e\u0643\ne\u0003e\u0003e\u0003e\u0005e\u0648\ne\u0003",
  "e\u0003e\u0003f\u0003f\u0003f\u0005f\u064f\nf\u0003f\u0005f\u0652\n",
  "f\u0003f\u0003f\u0003f\u0003f\u0005f\u0658\nf\u0003f\u0003f\u0003f\u0003",
  "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0005f\u0663\nf\u0003f\u0005f\u0666",
  "\nf\u0003f\u0003f\u0003f\u0003f\u0005f\u066c\nf\u0003f\u0003f\u0003",
  "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0005f\u0676\nf\u0003f\u0003f\u0003",
  "f\u0003f\u0003f\u0006f\u067d\nf\rf\u000ef\u067e\u0003f\u0003f\u0005",
  "f\u0683\nf\u0005f\u0685\nf\u0003g\u0003g\u0003g\u0003g\u0005g\u068b",
  "\ng\u0003g\u0003g\u0003g\u0003g\u0005g\u0691\ng\u0003g\u0003g\u0003",
  "g\u0003g\u0005g\u0697\ng\u0003g\u0003g\u0003g\u0003g\u0005g\u069d\n",
  "g\u0003g\u0003g\u0003g\u0003g\u0005g\u06a3\ng\u0003g\u0003g\u0003g\u0003",
  "g\u0005g\u06a9\ng\u0003g\u0003g\u0003g\u0003g\u0005g\u06af\ng\u0003",
  "g\u0003g\u0003g\u0003g\u0005g\u06b5\ng\u0003g\u0003g\u0003g\u0003g\u0005",
  "g\u06bb\ng\u0003g\u0003g\u0003g\u0003g\u0005g\u06c1\ng\u0003g\u0003",
  "g\u0003g\u0003g\u0005g\u06c7\ng\u0003g\u0003g\u0003g\u0003g\u0005g\u06cd",
  "\ng\u0003g\u0003g\u0003g\u0003g\u0005g\u06d3\ng\u0003g\u0003g\u0003",
  "g\u0003g\u0005g\u06d9\ng\u0003g\u0003g\u0003g\u0003g\u0005g\u06df\n",
  "g\u0005g\u06e1\ng\u0003h\u0003h\u0003h\u0003h\u0005h\u06e7\nh\u0003",
  "h\u0003h\u0003h\u0003h\u0005h\u06ed\nh\u0003h\u0003h\u0003h\u0003h\u0003",
  "h\u0005h\u06f4\nh\u0003h\u0005h\u06f7\nh\u0003h\u0003h\u0003h\u0005",
  "h\u06fc\nh\u0003h\u0005h\u06ff\nh\u0003h\u0005h\u0702\nh\u0003h\u0005",
  "h\u0705\nh\u0003h\u0005h\u0708\nh\u0005h\u070a\nh\u0003i\u0003i\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u0712\ni\u0003i\u0005i\u0715\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u071b\ni\u0003i\u0005i\u071e\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u0724\ni\u0003i\u0005i\u0727\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u072d\ni\u0003i\u0005i\u0730\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u0736\ni\u0003i\u0005i\u0739\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u073f\ni\u0003i\u0005i\u0742\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u0748\ni\u0003i\u0005i\u074b\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u0751\ni\u0003i\u0005i\u0754\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u075a\ni\u0003i\u0005i\u075d\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u0763\ni\u0003i\u0003i\u0003j\u0003j\u0005",
  "j\u0769\nj\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0005k\u0771\n",
  "k\u0003k\u0005k\u0774\nk\u0003k\u0003k\u0003k\u0003k\u0005k\u077a\n",
  "k\u0003k\u0005k\u077d\nk\u0003k\u0003k\u0003k\u0003k\u0005k\u0783\n",
  "k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003l\u0005l\u078b\nl\u0003m\u0003",
  "m\u0003m\u0003m\u0007m\u0791\nm\fm\u000em\u0794\u000bm\u0003n\u0003",
  "n\u0003n\u0003n\u0007n\u079a\nn\fn\u000en\u079d\u000bn\u0003o\u0003",
  "o\u0003o\u0003o\u0003o\u0003o\u0005o\u07a5\no\u0003o\u0005o\u07a8\n",
  "o\u0003o\u0003o\u0003o\u0003o\u0005o\u07ae\no\u0003o\u0005o\u07b1\n",
  "o\u0003o\u0003o\u0003o\u0003o\u0005o\u07b7\no\u0003o\u0005o\u07ba\n",
  "o\u0003o\u0003o\u0003o\u0003o\u0005o\u07c0\no\u0003o\u0005o\u07c3\n",
  "o\u0003o\u0003o\u0003o\u0003o\u0005o\u07c9\no\u0003o\u0005o\u07cc\n",
  "o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0005o\u07d4\no\u0003o\u0005",
  "o\u07d7\no\u0003o\u0003o\u0003o\u0003o\u0005o\u07dd\no\u0003o\u0005",
  "o\u07e0\no\u0003o\u0003o\u0003o\u0003o\u0005o\u07e6\no\u0003o\u0005",
  "o\u07e9\no\u0003o\u0003o\u0003o\u0003o\u0005o\u07ef\no\u0003o\u0005",
  "o\u07f2\no\u0003o\u0003o\u0003o\u0003o\u0005o\u07f8\no\u0003o\u0005",
  "o\u07fb\no\u0005o\u07fd\no\u0003p\u0003p\u0005p\u0801\np\u0003q\u0003",
  "q\u0003q\u0003q\u0003q\u0005q\u0808\nq\u0003r\u0003r\u0003r\u0003r\u0003",
  "r\u0003s\u0003s\u0003s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003t\u0003",
  "t\u0003u\u0003u\u0003u\u0003u\u0003u\u0003v\u0005v\u081f\nv\u0003v\u0003",
  "v\u0005v\u0823\nv\u0003v\u0003v\u0005v\u0827\nv\u0003v\u0003v\u0003",
  "v\u0005v\u082c\nv\u0003w\u0003w\u0003w\u0003w\u0007w\u0832\nw\fw\u000e",
  "w\u0835\u000bw\u0003x\u0003x\u0003x\u0003x\u0003x\u0005x\u083c\nx\u0003",
  "x\u0003x\u0005x\u0840\nx\u0003y\u0005y\u0843\ny\u0003y\u0003y\u0003",
  "y\u0003y\u0005y\u0849\ny\u0003y\u0003y\u0005y\u084d\ny\u0003y\u0003",
  "y\u0003y\u0003y\u0003y\u0005y\u0854\ny\u0003z\u0003z\u0003z\u0003{\u0003",
  "{\u0003{\u0003{\u0007{\u085d\n{\f{\u000e{\u0860\u000b{\u0003|\u0003",
  "|\u0003|\u0003|\u0003}\u0003}\u0003}\u0003}\u0007}\u086a\n}\f}\u000e",
  "}\u086d\u000b}\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0005~\u0875",
  "\n~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003",
  "~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003",
  "~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003",
  "~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003",
  "~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0005",
  "~\u08a8\n~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f",
  "\u0007\u007f\u08af\n\u007f\f\u007f\u000e\u007f\u08b2\u000b\u007f\u0005",
  "\u007f\u08b4\n\u007f\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080",
  "\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080",
  "\u0003\u0080\u0003\u0080\u0007\u0080\u08c2\n\u0080\f\u0080\u000e\u0080",
  "\u08c5\u000b\u0080\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003",
  "\u0081\u0003\u0081\u0003\u0081\u0007\u0081\u08ce\n\u0081\f\u0081\u000e",
  "\u0081\u08d1\u000b\u0081\u0003\u0081\u0003\u0081\u0003\u0082\u0003\u0082",
  "\u0003\u0082\u0003\u0082\u0003\u0082\u0007\u0082\u08da\n\u0082\f\u0082",
  "\u000e\u0082\u08dd\u000b\u0082\u0003\u0082\u0003\u0082\u0003\u0083\u0003",
  "\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0007\u0083\u08e6\n\u0083",
  "\f\u0083\u000e\u0083\u08e9\u000b\u0083\u0003\u0083\u0003\u0083\u0003",
  "\u0083\u0007\u0083\u08ee\n\u0083\f\u0083\u000e\u0083\u08f1\u000b\u0083",
  "\u0005\u0083\u08f3\n\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003",
  "\u0083\u0007\u0083\u08f9\n\u0083\f\u0083\u000e\u0083\u08fc\u000b\u0083",
  "\u0005\u0083\u08fe\n\u0083\u0003\u0083\u0003\u0083\u0003\u0084\u0005",
  "\u0084\u0903\n\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084",
  "\u0003\u0084\u0005\u0084\u090a\n\u0084\u0003\u0084\u0003\u0084\u0005",
  "\u0084\u090e\n\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u0912\n\u0084",
  "\u0003\u0084\u0005\u0084\u0915\n\u0084\u0003\u0085\u0003\u0085\u0003",
  "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
  "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
  "\u0085\u0003\u0085\u0005\u0085\u0927\n\u0085\u0003\u0086\u0003\u0086",
  "\u0003\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0088\u0003\u0088",
  "\u0003\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u008a",
  "\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b",
  "\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u0941\n",
  "\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0003",
  "\u008d\u0003\u008d\u0003\u008d\u0007\u008d\u094b\n\u008d\f\u008d\u000e",
  "\u008d\u094e\u000b\u008d\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e",
  "\u0007\u008e\u0954\n\u008e\f\u008e\u000e\u008e\u0957\u000b\u008e\u0003",
  "\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005",
  "\u008f\u095f\n\u008f\u0003\u0090\u0003\u0090\u0005\u0090\u0963\n\u0090",
  "\u0003\u0090\u0005\u0090\u0966\n\u0090\u0003\u0090\u0003\u0090\u0003",
  "\u0090\u0005\u0090\u096b\n\u0090\u0003\u0090\u0005\u0090\u096e\n\u0090",
  "\u0003\u0090\u0005\u0090\u0971\n\u0090\u0003\u0090\u0005\u0090\u0974",
  "\n\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0092\u0003\u0092",
  "\u0003\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0094\u0003\u0094",
  "\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0984\n\u0094\u0003",
  "\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0096\u0003\u0096\u0003",
  "\u0096\u0005\u0096\u098d\n\u0096\u0003\u0097\u0003\u0097\u0003\u0097",
  "\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0005\u0099\u0996\n",
  "\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0007\u0099\u099b\n\u0099",
  "\f\u0099\u000e\u0099\u099e\u000b\u0099\u0003\u009a\u0003\u009a\u0003",
  "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005",
  "\u009a\u09a8\n\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
  "\u0005\u009a\u09ae\n\u009a\u0005\u009a\u09b0\n\u009a\u0003\u009b\u0003",
  "\u009b\u0003\u009b\u0003\u009b\u0007\u009b\u09b6\n\u009b\f\u009b\u000e",
  "\u009b\u09b9\u000b\u009b\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c",
  "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c",
  "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c",
  "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c",
  "\u0005\u009c\u09d1\n\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003",
  "\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0007\u009c\u09da\n\u009c",
  "\f\u009c\u000e\u009c\u09dd\u000b\u009c\u0003\u009c\u0003\u009c\u0003",
  "\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0007\u009c\u09e6",
  "\n\u009c\f\u009c\u000e\u009c\u09e9\u000b\u009c\u0003\u009c\u0003\u009c",
  "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0007\u009c",
  "\u09f2\n\u009c\f\u009c\u000e\u009c\u09f5\u000b\u009c\u0003\u009c\u0003",
  "\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0007\u009c\u09fd",
  "\n\u009c\f\u009c\u000e\u009c\u0a00\u000b\u009c\u0003\u009c\u0003\u009c",
  "\u0005\u009c\u0a04\n\u009c\u0003\u009d\u0003\u009d\u0003\u009d\u0003",
  "\u009d\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003",
  "\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
  "\u009f\u0003\u009f\u0003\u009f\u0005\u009f\u0a18\n\u009f\u0003\u009f",
  "\u0003\u009f\u0005\u009f\u0a1c\n\u009f\u0003\u00a0\u0003\u00a0\u0003",
  "\u00a0\u0005\u00a0\u0a21\n\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0",
  "\u0003\u00a0\u0005\u00a0\u0a27\n\u00a0\u0007\u00a0\u0a29\n\u00a0\f\u00a0",
  "\u000e\u00a0\u0a2c\u000b\u00a0\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
  "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005",
  "\u00a1\u0a37\n\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3",
  "\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a6\u0003\u00a6",
  "\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0005\u00a7",
  "\u0a48\n\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003",
  "\u00a8\u0005\u00a8\u0a4f\n\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9",
  "\u0003\u00a9\u0003\u00a9\u0005\u00a9\u0a56\n\u00a9\u0003\u00aa\u0003",
  "\u00aa\u0005\u00aa\u0a5a\n\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab",
  "\u0005\u00ab\u0a5f\n\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003",
  "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003",
  "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003",
  "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003",
  "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003",
  "\u00ab\u0003\u00ab\u0005\u00ab\u0a7e\n\u00ab\u0003\u00ac\u0003\u00ac",
  "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0a85\n\u00ac\u0007",
  "\u00ac\u0a87\n\u00ac\f\u00ac\u000e\u00ac\u0a8a\u000b\u00ac\u0003\u00ac",
  "\u0003\u00ac\u0003\u00ad\u0003\u00ad\u0005\u00ad\u0a90\n\u00ad\u0003",
  "\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0\u0003",
  "\u00b1\u0003\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0003",
  "\u00b4\u0003\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b6\u0003\u00b6\u0003",
  "\u00b7\u0003\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003",
  "\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0003",
  "\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003",
  "\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c1\u0003\u00c1\u0003",
  "\u00c2\u0003\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0003\u00c4\u0003",
  "\u00c5\u0003\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c7\u0003\u00c7\u0003",
  "\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00ca\u0003\u00ca\u0003",
  "\u00cb\u0003\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cd\u0003\u00cd\u0003",
  "\u00ce\u0003\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00d0\u0003\u00d0\u0003",
  "\u00d1\u0003\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d3\u0003\u00d3\u0003",
  "\u00d4\u0003\u00d4\u0003\u00d5\u0003\u00d5\u0003\u00d6\u0003\u00d6\u0003",
  "\u00d7\u0003\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d9\u0003\u00d9\u0003",
  "\u00da\u0003\u00da\u0003\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc\u0003",
  "\u00dd\u0003\u00dd\u0003\u00de\u0003\u00de\u0003\u00df\u0003\u00df\u0003",
  "\u00e0\u0003\u00e0\u0003\u00e1\u0003\u00e1\u0003\u00e2\u0003\u00e2\u0003",
  "\u00e3\u0003\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e5\u0003\u00e5\u0003",
  "\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e8\u0003\u00e8\u0003",
  "\u00e9\u0003\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00eb\u0003\u00eb\u0003",
  "\u00ec\u0003\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ee\u0003\u00ee\u0003",
  "\u00ef\u0003\u00ef\u0003\u00f0\u0003\u00f0\u0003\u00f1\u0003\u00f1\u0003",
  "\u00f2\u0003\u00f2\u0003\u00f3\u0003\u00f3\u0003\u00f4\u0003\u00f4\u0003",
  "\u00f5\u0003\u00f5\u0003\u00f6\u0003\u00f6\u0003\u00f7\u0003\u00f7\u0003",
  "\u00f8\u0003\u00f8\u0003\u00f9\u0003\u00f9\u0003\u00fa\u0003\u00fa\u0003",
  "\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc\u0003\u00fd\u0003\u00fd\u0003",
  "\u00fe\u0003\u00fe\u0003\u00ff\u0003\u00ff\u0003\u0100\u0003\u0100\u0003",
  "\u0101\u0003\u0101\u0003\u0102\u0003\u0102\u0003\u0103\u0003\u0103\u0003",
  "\u0104\u0003\u0104\u0003\u0105\u0003\u0105\u0003\u0106\u0003\u0106\u0003",
  "\u0107\u0003\u0107\u0003\u0108\u0003\u0108\u0003\u0109\u0003\u0109\u0003",
  "\u010a\u0003\u010a\u0003\u010b\u0003\u010b\u0003\u010c\u0003\u010c\u0003",
  "\u010d\u0003\u010d\u0003\u010e\u0003\u010e\u0003\u010f\u0003\u010f\u0003",
  "\u0110\u0003\u0110\u0003\u0111\u0003\u0111\u0003\u0112\u0003\u0112\u0003",
  "\u0113\u0003\u0113\u0003\u0114\u0003\u0114\u0003\u0115\u0003\u0115\u0003",
  "\u0116\u0003\u0116\u0003\u0117\u0003\u0117\u0003\u0118\u0003\u0118\u0003",
  "\u0119\u0003\u0119\u0003\u011a\u0003\u011a\u0003\u011b\u0003\u011b\u0003",
  "\u011c\u0003\u011c\u0003\u011d\u0003\u011d\u0003\u011e\u0003\u011e\u0003",
  "\u011f\u0003\u011f\u0003\u0120\u0003\u0120\u0003\u0121\u0003\u0121\u0003",
  "\u0122\u0003\u0122\u0003\u0123\u0003\u0123\u0003\u0124\u0003\u0124\u0003",
  "\u0125\u0003\u0125\u0003\u0126\u0003\u0126\u0003\u0127\u0003\u0127\u0003",
  "\u0128\u0003\u0128\u0003\u0129\u0003\u0129\u0003\u012a\u0003\u012a\u0003",
  "\u012b\u0003\u012b\u0003\u012c\u0003\u012c\u0003\u012d\u0003\u012d\u0003",
  "\u012e\u0003\u012e\u0003\u012f\u0003\u012f\u0003\u0130\u0003\u0130\u0003",
  "\u0131\u0003\u0131\u0003\u0132\u0003\u0132\u0003\u0133\u0003\u0133\u0003",
  "\u0134\u0003\u0134\u0003\u0135\u0003\u0135\u0003\u0136\u0003\u0136\u0003",
  "\u0137\u0003\u0137\u0003\u0138\u0003\u0138\u0003\u0139\u0003\u0139\u0003",
  "\u013a\u0003\u013a\u0003\u013b\u0003\u013b\u0003\u013c\u0003\u013c\u0003",
  "\u013d\u0003\u013d\u0003\u013e\u0003\u013e\u0003\u013f\u0003\u013f\u0003",
  "\u0140\u0003\u0140\u0003\u0141\u0003\u0141\u0003\u0142\u0003\u0142\u0003",
  "\u0143\u0003\u0143\u0003\u0144\u0003\u0144\u0003\u0145\u0003\u0145\u0003",
  "\u0146\u0003\u0146\u0003\u0147\u0003\u0147\u0003\u0148\u0003\u0148\u0003",
  "\u0149\u0003\u0149\u0003\u014a\u0003\u014a\u0003\u014b\u0003\u014b\u0003",
  "\u014c\u0003\u014c\u0003\u014d\u0003\u014d\u0003\u014e\u0003\u014e\u0003",
  "\u014f\u0003\u014f\u0003\u0150\u0003\u0150\u0003\u0151\u0003\u0151\u0003",
  "\u0152\u0003\u0152\u0003\u0153\u0003\u0153\u0003\u0154\u0003\u0154\u0003",
  "\u0155\u0003\u0155\u0003\u0156\u0003\u0156\u0003\u0157\u0003\u0157\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0005\u0158\u0c77",
  "\n\u0158\u0003\u0158\u0002\u0002\u0159\u0002\u0004\u0006\b\n\f\u000e",
  '\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e "$&(*,.02468:<>@B',
  "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
  "\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2",
  "\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba",
  "\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2",
  "\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea",
  "\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102",
  "\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a",
  "\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132",
  "\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a",
  "\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162",
  "\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a",
  "\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192",
  "\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa",
  "\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2",
  "\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da",
  "\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2",
  "\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a",
  "\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222",
  "\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a",
  "\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252",
  "\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a",
  "\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282",
  "\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a",
  "\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u0002\u0007",
  "\u0003\u0002\u00d5\u00d6\u0004\u0002\u0014\u0014\u0016\u0016\u0003\u0002",
  "\u00dd\u00e1\u0003\u0002\u00d7\u00d8\u0004\u0002::\u0083\u0083\u0002",
  "\u0d4b\u0002\u02b1\u0003\u0002\u0002\u0002\u0004\u02c1\u0003\u0002\u0002",
  "\u0002\u0006\u02ce\u0003\u0002\u0002\u0002\b\u02d0\u0003\u0002\u0002",
  "\u0002\n\u02f8\u0003\u0002\u0002\u0002\f\u02fa\u0003\u0002\u0002\u0002",
  "\u000e\u0301\u0003\u0002\u0002\u0002\u0010\u0304\u0003\u0002\u0002\u0002",
  "\u0012\u030e\u0003\u0002\u0002\u0002\u0014\u031a\u0003\u0002\u0002\u0002",
  "\u0016\u032d\u0003\u0002\u0002\u0002\u0018\u035b\u0003\u0002\u0002\u0002",
  "\u001a\u035d\u0003\u0002\u0002\u0002\u001c\u036a\u0003\u0002\u0002\u0002",
  "\u001e\u0373\u0003\u0002\u0002\u0002 \u0382\u0003\u0002\u0002\u0002",
  '"\u038d\u0003\u0002\u0002\u0002$\u039b\u0003\u0002\u0002\u0002&\u03ba',
  "\u0003\u0002\u0002\u0002(\u03c1\u0003\u0002\u0002\u0002*\u03ca\u0003",
  "\u0002\u0002\u0002,\u03cf\u0003\u0002\u0002\u0002.\u03d1\u0003\u0002",
  "\u0002\u00020\u03e2\u0003\u0002\u0002\u00022\u03fd\u0003\u0002\u0002",
  "\u00024\u03ff\u0003\u0002\u0002\u00026\u040c\u0003\u0002\u0002\u0002",
  "8\u0412\u0003\u0002\u0002\u0002:\u0430\u0003\u0002\u0002\u0002<\u0432",
  "\u0003\u0002\u0002\u0002>\u043e\u0003\u0002\u0002\u0002@\u0442\u0003",
  "\u0002\u0002\u0002B\u044f\u0003\u0002\u0002\u0002D\u045b\u0003\u0002",
  "\u0002\u0002F\u045e\u0003\u0002\u0002\u0002H\u0466\u0003\u0002\u0002",
  "\u0002J\u046b\u0003\u0002\u0002\u0002L\u046d\u0003\u0002\u0002\u0002",
  "N\u047a\u0003\u0002\u0002\u0002P\u047c\u0003\u0002\u0002\u0002R\u047f",
  "\u0003\u0002\u0002\u0002T\u0488\u0003\u0002\u0002\u0002V\u048c\u0003",
  "\u0002\u0002\u0002X\u048f\u0003\u0002\u0002\u0002Z\u0494\u0003\u0002",
  "\u0002\u0002\\\u04a4\u0003\u0002\u0002\u0002^\u04a6\u0003\u0002\u0002",
  "\u0002`\u04a9\u0003\u0002\u0002\u0002b\u04ae\u0003\u0002\u0002\u0002",
  "d\u04b2\u0003\u0002\u0002\u0002f\u04b5\u0003\u0002\u0002\u0002h\u04be",
  "\u0003\u0002\u0002\u0002j\u04c1\u0003\u0002\u0002\u0002l\u04cc\u0003",
  "\u0002\u0002\u0002n\u04d2\u0003\u0002\u0002\u0002p\u04ec\u0003\u0002",
  "\u0002\u0002r\u04ee\u0003\u0002\u0002\u0002t\u04fc\u0003\u0002\u0002",
  "\u0002v\u0503\u0003\u0002\u0002\u0002x\u050f\u0003\u0002\u0002\u0002",
  "z\u051c\u0003\u0002\u0002\u0002|\u0528\u0003\u0002\u0002\u0002~\u0534",
  "\u0003\u0002\u0002\u0002\u0080\u0542\u0003\u0002\u0002\u0002\u0082\u0549",
  "\u0003\u0002\u0002\u0002\u0084\u0555\u0003\u0002\u0002\u0002\u0086\u055c",
  "\u0003\u0002\u0002\u0002\u0088\u0568\u0003\u0002\u0002\u0002\u008a\u0579",
  "\u0003\u0002\u0002\u0002\u008c\u057d\u0003\u0002\u0002\u0002\u008e\u058b",
  "\u0003\u0002\u0002\u0002\u0090\u0592\u0003\u0002\u0002\u0002\u0092\u05a4",
  "\u0003\u0002\u0002\u0002\u0094\u05a6\u0003\u0002\u0002\u0002\u0096\u05ab",
  "\u0003\u0002\u0002\u0002\u0098\u05ad\u0003\u0002\u0002\u0002\u009a\u05b9",
  "\u0003\u0002\u0002\u0002\u009c\u05bd\u0003\u0002\u0002\u0002\u009e\u05c2",
  "\u0003\u0002\u0002\u0002\u00a0\u05c4\u0003\u0002\u0002\u0002\u00a2\u05d2",
  "\u0003\u0002\u0002\u0002\u00a4\u05d7\u0003\u0002\u0002\u0002\u00a6\u05da",
  "\u0003\u0002\u0002\u0002\u00a8\u05e3\u0003\u0002\u0002\u0002\u00aa\u05e5",
  "\u0003\u0002\u0002\u0002\u00ac\u05e7\u0003\u0002\u0002\u0002\u00ae\u05ed",
  "\u0003\u0002\u0002\u0002\u00b0\u05f5\u0003\u0002\u0002\u0002\u00b2\u05fe",
  "\u0003\u0002\u0002\u0002\u00b4\u0607\u0003\u0002\u0002\u0002\u00b6\u0609",
  "\u0003\u0002\u0002\u0002\u00b8\u060b\u0003\u0002\u0002\u0002\u00ba\u060e",
  "\u0003\u0002\u0002\u0002\u00bc\u0618\u0003\u0002\u0002\u0002\u00be\u061a",
  "\u0003\u0002\u0002\u0002\u00c0\u0628\u0003\u0002\u0002\u0002\u00c2\u0637",
  "\u0003\u0002\u0002\u0002\u00c4\u0639\u0003\u0002\u0002\u0002\u00c6\u063d",
  "\u0003\u0002\u0002\u0002\u00c8\u0640\u0003\u0002\u0002\u0002\u00ca\u0684",
  "\u0003\u0002\u0002\u0002\u00cc\u06e0\u0003\u0002\u0002\u0002\u00ce\u06e2",
  "\u0003\u0002\u0002\u0002\u00d0\u070b\u0003\u0002\u0002\u0002\u00d2\u0768",
  "\u0003\u0002\u0002\u0002\u00d4\u076a\u0003\u0002\u0002\u0002\u00d6\u078a",
  "\u0003\u0002\u0002\u0002\u00d8\u078c\u0003\u0002\u0002\u0002\u00da\u0795",
  "\u0003\u0002\u0002\u0002\u00dc\u07fc\u0003\u0002\u0002\u0002\u00de\u0800",
  "\u0003\u0002\u0002\u0002\u00e0\u0807\u0003\u0002\u0002\u0002\u00e2\u0809",
  "\u0003\u0002\u0002\u0002\u00e4\u080e\u0003\u0002\u0002\u0002\u00e6\u0813",
  "\u0003\u0002\u0002\u0002\u00e8\u0818\u0003\u0002\u0002\u0002\u00ea\u081e",
  "\u0003\u0002\u0002\u0002\u00ec\u082d\u0003\u0002\u0002\u0002\u00ee\u083f",
  "\u0003\u0002\u0002\u0002\u00f0\u0842\u0003\u0002\u0002\u0002\u00f2\u0855",
  "\u0003\u0002\u0002\u0002\u00f4\u0858\u0003\u0002\u0002\u0002\u00f6\u0861",
  "\u0003\u0002\u0002\u0002\u00f8\u0865\u0003\u0002\u0002\u0002\u00fa\u08a7",
  "\u0003\u0002\u0002\u0002\u00fc\u08a9\u0003\u0002\u0002\u0002\u00fe\u08b7",
  "\u0003\u0002\u0002\u0002\u0100\u08c8\u0003\u0002\u0002\u0002\u0102\u08d4",
  "\u0003\u0002\u0002\u0002\u0104\u08e0\u0003\u0002\u0002\u0002\u0106\u0902",
  "\u0003\u0002\u0002\u0002\u0108\u0926\u0003\u0002\u0002\u0002\u010a\u0928",
  "\u0003\u0002\u0002\u0002\u010c\u092b\u0003\u0002\u0002\u0002\u010e\u092e",
  "\u0003\u0002\u0002\u0002\u0110\u0931\u0003\u0002\u0002\u0002\u0112\u0935",
  "\u0003\u0002\u0002\u0002\u0114\u0940\u0003\u0002\u0002\u0002\u0116\u0942",
  "\u0003\u0002\u0002\u0002\u0118\u0946\u0003\u0002\u0002\u0002\u011a\u094f",
  "\u0003\u0002\u0002\u0002\u011c\u095e\u0003\u0002\u0002\u0002\u011e\u0960",
  "\u0003\u0002\u0002\u0002\u0120\u0975\u0003\u0002\u0002\u0002\u0122\u0978",
  "\u0003\u0002\u0002\u0002\u0124\u097b\u0003\u0002\u0002\u0002\u0126\u0983",
  "\u0003\u0002\u0002\u0002\u0128\u0985\u0003\u0002\u0002\u0002\u012a\u0989",
  "\u0003\u0002\u0002\u0002\u012c\u098e\u0003\u0002\u0002\u0002\u012e\u0991",
  "\u0003\u0002\u0002\u0002\u0130\u0995\u0003\u0002\u0002\u0002\u0132\u09af",
  "\u0003\u0002\u0002\u0002\u0134\u09b1\u0003\u0002\u0002\u0002\u0136\u0a03",
  "\u0003\u0002\u0002\u0002\u0138\u0a05\u0003\u0002\u0002\u0002\u013a\u0a09",
  "\u0003\u0002\u0002\u0002\u013c\u0a1b\u0003\u0002\u0002\u0002\u013e\u0a20",
  "\u0003\u0002\u0002\u0002\u0140\u0a36\u0003\u0002\u0002\u0002\u0142\u0a38",
  "\u0003\u0002\u0002\u0002\u0144\u0a3a\u0003\u0002\u0002\u0002\u0146\u0a3c",
  "\u0003\u0002\u0002\u0002\u0148\u0a3e\u0003\u0002\u0002\u0002\u014a\u0a40",
  "\u0003\u0002\u0002\u0002\u014c\u0a47\u0003\u0002\u0002\u0002\u014e\u0a4e",
  "\u0003\u0002\u0002\u0002\u0150\u0a55\u0003\u0002\u0002\u0002\u0152\u0a57",
  "\u0003\u0002\u0002\u0002\u0154\u0a7d\u0003\u0002\u0002\u0002\u0156\u0a7f",
  "\u0003\u0002\u0002\u0002\u0158\u0a8f\u0003\u0002\u0002\u0002\u015a\u0a91",
  "\u0003\u0002\u0002\u0002\u015c\u0a93\u0003\u0002\u0002\u0002\u015e\u0a95",
  "\u0003\u0002\u0002\u0002\u0160\u0a97\u0003\u0002\u0002\u0002\u0162\u0a99",
  "\u0003\u0002\u0002\u0002\u0164\u0a9b\u0003\u0002\u0002\u0002\u0166\u0a9d",
  "\u0003\u0002\u0002\u0002\u0168\u0a9f\u0003\u0002\u0002\u0002\u016a\u0aa1",
  "\u0003\u0002\u0002\u0002\u016c\u0aa3\u0003\u0002\u0002\u0002\u016e\u0aa5",
  "\u0003\u0002\u0002\u0002\u0170\u0aa7\u0003\u0002\u0002\u0002\u0172\u0aaa",
  "\u0003\u0002\u0002\u0002\u0174\u0aac\u0003\u0002\u0002\u0002\u0176\u0aae",
  "\u0003\u0002\u0002\u0002\u0178\u0ab0\u0003\u0002\u0002\u0002\u017a\u0ab2",
  "\u0003\u0002\u0002\u0002\u017c\u0ab5\u0003\u0002\u0002\u0002\u017e\u0ab7",
  "\u0003\u0002\u0002\u0002\u0180\u0ab9\u0003\u0002\u0002\u0002\u0182\u0abb",
  "\u0003\u0002\u0002\u0002\u0184\u0abd\u0003\u0002\u0002\u0002\u0186\u0abf",
  "\u0003\u0002\u0002\u0002\u0188\u0ac1\u0003\u0002\u0002\u0002\u018a\u0ac3",
  "\u0003\u0002\u0002\u0002\u018c\u0ac5\u0003\u0002\u0002\u0002\u018e\u0ac7",
  "\u0003\u0002\u0002\u0002\u0190\u0ac9\u0003\u0002\u0002\u0002\u0192\u0acb",
  "\u0003\u0002\u0002\u0002\u0194\u0acd\u0003\u0002\u0002\u0002\u0196\u0acf",
  "\u0003\u0002\u0002\u0002\u0198\u0ad1\u0003\u0002\u0002\u0002\u019a\u0ad3",
  "\u0003\u0002\u0002\u0002\u019c\u0ad5\u0003\u0002\u0002\u0002\u019e\u0ad7",
  "\u0003\u0002\u0002\u0002\u01a0\u0ad9\u0003\u0002\u0002\u0002\u01a2\u0adb",
  "\u0003\u0002\u0002\u0002\u01a4\u0add\u0003\u0002\u0002\u0002\u01a6\u0adf",
  "\u0003\u0002\u0002\u0002\u01a8\u0ae1\u0003\u0002\u0002\u0002\u01aa\u0ae3",
  "\u0003\u0002\u0002\u0002\u01ac\u0ae5\u0003\u0002\u0002\u0002\u01ae\u0ae7",
  "\u0003\u0002\u0002\u0002\u01b0\u0ae9\u0003\u0002\u0002\u0002\u01b2\u0aeb",
  "\u0003\u0002\u0002\u0002\u01b4\u0aed\u0003\u0002\u0002\u0002\u01b6\u0aef",
  "\u0003\u0002\u0002\u0002\u01b8\u0af1\u0003\u0002\u0002\u0002\u01ba\u0af3",
  "\u0003\u0002\u0002\u0002\u01bc\u0af5\u0003\u0002\u0002\u0002\u01be\u0af7",
  "\u0003\u0002\u0002\u0002\u01c0\u0af9\u0003\u0002\u0002\u0002\u01c2\u0afb",
  "\u0003\u0002\u0002\u0002\u01c4\u0afd\u0003\u0002\u0002\u0002\u01c6\u0aff",
  "\u0003\u0002\u0002\u0002\u01c8\u0b01\u0003\u0002\u0002\u0002\u01ca\u0b03",
  "\u0003\u0002\u0002\u0002\u01cc\u0b05\u0003\u0002\u0002\u0002\u01ce\u0b07",
  "\u0003\u0002\u0002\u0002\u01d0\u0b09\u0003\u0002\u0002\u0002\u01d2\u0b0b",
  "\u0003\u0002\u0002\u0002\u01d4\u0b0d\u0003\u0002\u0002\u0002\u01d6\u0b0f",
  "\u0003\u0002\u0002\u0002\u01d8\u0b11\u0003\u0002\u0002\u0002\u01da\u0b13",
  "\u0003\u0002\u0002\u0002\u01dc\u0b15\u0003\u0002\u0002\u0002\u01de\u0b17",
  "\u0003\u0002\u0002\u0002\u01e0\u0b19\u0003\u0002\u0002\u0002\u01e2\u0b1b",
  "\u0003\u0002\u0002\u0002\u01e4\u0b1d\u0003\u0002\u0002\u0002\u01e6\u0b1f",
  "\u0003\u0002\u0002\u0002\u01e8\u0b21\u0003\u0002\u0002\u0002\u01ea\u0b23",
  "\u0003\u0002\u0002\u0002\u01ec\u0b25\u0003\u0002\u0002\u0002\u01ee\u0b27",
  "\u0003\u0002\u0002\u0002\u01f0\u0b29\u0003\u0002\u0002\u0002\u01f2\u0b2b",
  "\u0003\u0002\u0002\u0002\u01f4\u0b2d\u0003\u0002\u0002\u0002\u01f6\u0b2f",
  "\u0003\u0002\u0002\u0002\u01f8\u0b31\u0003\u0002\u0002\u0002\u01fa\u0b33",
  "\u0003\u0002\u0002\u0002\u01fc\u0b35\u0003\u0002\u0002\u0002\u01fe\u0b37",
  "\u0003\u0002\u0002\u0002\u0200\u0b39\u0003\u0002\u0002\u0002\u0202\u0b3b",
  "\u0003\u0002\u0002\u0002\u0204\u0b3d\u0003\u0002\u0002\u0002\u0206\u0b3f",
  "\u0003\u0002\u0002\u0002\u0208\u0b41\u0003\u0002\u0002\u0002\u020a\u0b43",
  "\u0003\u0002\u0002\u0002\u020c\u0b45\u0003\u0002\u0002\u0002\u020e\u0b47",
  "\u0003\u0002\u0002\u0002\u0210\u0b49\u0003\u0002\u0002\u0002\u0212\u0b4b",
  "\u0003\u0002\u0002\u0002\u0214\u0b4d\u0003\u0002\u0002\u0002\u0216\u0b4f",
  "\u0003\u0002\u0002\u0002\u0218\u0b51\u0003\u0002\u0002\u0002\u021a\u0b53",
  "\u0003\u0002\u0002\u0002\u021c\u0b55\u0003\u0002\u0002\u0002\u021e\u0b57",
  "\u0003\u0002\u0002\u0002\u0220\u0b59\u0003\u0002\u0002\u0002\u0222\u0b5b",
  "\u0003\u0002\u0002\u0002\u0224\u0b5d\u0003\u0002\u0002\u0002\u0226\u0b5f",
  "\u0003\u0002\u0002\u0002\u0228\u0b61\u0003\u0002\u0002\u0002\u022a\u0b63",
  "\u0003\u0002\u0002\u0002\u022c\u0b65\u0003\u0002\u0002\u0002\u022e\u0b67",
  "\u0003\u0002\u0002\u0002\u0230\u0b69\u0003\u0002\u0002\u0002\u0232\u0b6b",
  "\u0003\u0002\u0002\u0002\u0234\u0b6d\u0003\u0002\u0002\u0002\u0236\u0b6f",
  "\u0003\u0002\u0002\u0002\u0238\u0b71\u0003\u0002\u0002\u0002\u023a\u0b73",
  "\u0003\u0002\u0002\u0002\u023c\u0b75\u0003\u0002\u0002\u0002\u023e\u0b77",
  "\u0003\u0002\u0002\u0002\u0240\u0b79\u0003\u0002\u0002\u0002\u0242\u0b7b",
  "\u0003\u0002\u0002\u0002\u0244\u0b7d\u0003\u0002\u0002\u0002\u0246\u0b7f",
  "\u0003\u0002\u0002\u0002\u0248\u0b81\u0003\u0002\u0002\u0002\u024a\u0b83",
  "\u0003\u0002\u0002\u0002\u024c\u0b85\u0003\u0002\u0002\u0002\u024e\u0b87",
  "\u0003\u0002\u0002\u0002\u0250\u0b89\u0003\u0002\u0002\u0002\u0252\u0b8b",
  "\u0003\u0002\u0002\u0002\u0254\u0b8d\u0003\u0002\u0002\u0002\u0256\u0b8f",
  "\u0003\u0002\u0002\u0002\u0258\u0b91\u0003\u0002\u0002\u0002\u025a\u0b93",
  "\u0003\u0002\u0002\u0002\u025c\u0b95\u0003\u0002\u0002\u0002\u025e\u0b97",
  "\u0003\u0002\u0002\u0002\u0260\u0b99\u0003\u0002\u0002\u0002\u0262\u0b9b",
  "\u0003\u0002\u0002\u0002\u0264\u0b9d\u0003\u0002\u0002\u0002\u0266\u0b9f",
  "\u0003\u0002\u0002\u0002\u0268\u0ba1\u0003\u0002\u0002\u0002\u026a\u0ba3",
  "\u0003\u0002\u0002\u0002\u026c\u0ba5\u0003\u0002\u0002\u0002\u026e\u0ba7",
  "\u0003\u0002\u0002\u0002\u0270\u0ba9\u0003\u0002\u0002\u0002\u0272\u0bab",
  "\u0003\u0002\u0002\u0002\u0274\u0bad\u0003\u0002\u0002\u0002\u0276\u0baf",
  "\u0003\u0002\u0002\u0002\u0278\u0bb1\u0003\u0002\u0002\u0002\u027a\u0bb3",
  "\u0003\u0002\u0002\u0002\u027c\u0bb5\u0003\u0002\u0002\u0002\u027e\u0bb7",
  "\u0003\u0002\u0002\u0002\u0280\u0bb9\u0003\u0002\u0002\u0002\u0282\u0bbb",
  "\u0003\u0002\u0002\u0002\u0284\u0bbd\u0003\u0002\u0002\u0002\u0286\u0bbf",
  "\u0003\u0002\u0002\u0002\u0288\u0bc1\u0003\u0002\u0002\u0002\u028a\u0bc3",
  "\u0003\u0002\u0002\u0002\u028c\u0bc5\u0003\u0002\u0002\u0002\u028e\u0bc7",
  "\u0003\u0002\u0002\u0002\u0290\u0bc9\u0003\u0002\u0002\u0002\u0292\u0bcb",
  "\u0003\u0002\u0002\u0002\u0294\u0bcd\u0003\u0002\u0002\u0002\u0296\u0bcf",
  "\u0003\u0002\u0002\u0002\u0298\u0bd1\u0003\u0002\u0002\u0002\u029a\u0bd3",
  "\u0003\u0002\u0002\u0002\u029c\u0bd5\u0003\u0002\u0002\u0002\u029e\u0bd7",
  "\u0003\u0002\u0002\u0002\u02a0\u0bd9\u0003\u0002\u0002\u0002\u02a2\u0bdb",
  "\u0003\u0002\u0002\u0002\u02a4\u0bdd\u0003\u0002\u0002\u0002\u02a6\u0bdf",
  "\u0003\u0002\u0002\u0002\u02a8\u0be1\u0003\u0002\u0002\u0002\u02aa\u0be3",
  "\u0003\u0002\u0002\u0002\u02ac\u0be5\u0003\u0002\u0002\u0002\u02ae\u0c76",
  "\u0003\u0002\u0002\u0002\u02b0\u02b2\u0005\u0004\u0003\u0002\u02b1\u02b0",
  "\u0003\u0002\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2\u02b4",
  "\u0003\u0002\u0002\u0002\u02b3\u02b5\u0007\u0015\u0002\u0002\u02b4\u02b3",
  "\u0003\u0002\u0002\u0002\u02b4\u02b5\u0003\u0002\u0002\u0002\u02b5\u02b6",
  "\u0003\u0002\u0002\u0002\u02b6\u02b7\u0005\u0298\u014d\u0002\u02b7\u0003",
  "\u0003\u0002\u0002\u0002\u02b8\u02ba\u0005\n\u0006\u0002\u02b9\u02bb",
  "\u0007\u0015\u0002\u0002\u02ba\u02b9\u0003\u0002\u0002\u0002\u02ba\u02bb",
  "\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02bd",
  "\u0005\u0006\u0004\u0002\u02bd\u02c0\u0003\u0002\u0002\u0002\u02be\u02c0",
  "\u0005\b\u0005\u0002\u02bf\u02b8\u0003\u0002\u0002\u0002\u02bf\u02be",
  "\u0003\u0002\u0002\u0002\u02c0\u02c3\u0003\u0002\u0002\u0002\u02c1\u02bf",
  "\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02cc",
  "\u0003\u0002\u0002\u0002\u02c3\u02c1\u0003\u0002\u0002\u0002\u02c4\u02c9",
  "\u0005\n\u0006\u0002\u02c5\u02c7\u0007\u0015\u0002\u0002\u02c6\u02c5",
  "\u0003\u0002\u0002\u0002\u02c6\u02c7\u0003\u0002\u0002\u0002\u02c7\u02c8",
  "\u0003\u0002\u0002\u0002\u02c8\u02ca\u0005\u0006\u0004\u0002\u02c9\u02c6",
  "\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca\u02cd",
  "\u0003\u0002\u0002\u0002\u02cb\u02cd\u0005\b\u0005\u0002\u02cc\u02c4",
  "\u0003\u0002\u0002\u0002\u02cc\u02cb\u0003\u0002\u0002\u0002\u02cd\u0005",
  "\u0003\u0002\u0002\u0002\u02ce\u02cf\u0007\n\u0002\u0002\u02cf\u0007",
  "\u0003\u0002\u0002\u0002\u02d0\u02d1\u0005\u0006\u0004\u0002\u02d1\t",
  "\u0003\u0002\u0002\u0002\u02d2\u02f9\u0005\u00be`\u0002\u02d3\u02f9",
  "\u0005r:\u0002\u02d4\u02f9\u0005l7\u0002\u02d5\u02f9\u0005Z.\u0002\u02d6",
  "\u02f9\u0005L'\u0002\u02d7\u02f9\u0005F$\u0002\u02d8\u02f9\u0005\u00b8",
  "]\u0002\u02d9\u02f9\u00058\u001d\u0002\u02da\u02f9\u00050\u0019\u0002",
  "\u02db\u02f9\u0005\u00caf\u0002\u02dc\u02f9\u0005\u00ceh\u0002\u02dd",
  "\u02f9\u0005.\u0018\u0002\u02de\u02f9\u0005$\u0013\u0002\u02df\u02f9",
  "\u0005\u001c\u000f\u0002\u02e0\u02f9\u0005\u0088E\u0002\u02e1\u02f9",
  '\u0005"\u0012\u0002\u02e2\u02f9\u0005\u001e\u0010\u0002\u02e3\u02f9',
  "\u0005\u001a\u000e\u0002\u02e4\u02f9\u0005\u00eav\u0002\u02e5\u02f9",
  "\u0005z>\u0002\u02e6\u02f9\u0005|?\u0002\u02e7\u02f9\u0005\u0086D\u0002",
  "\u02e8\u02f9\u0005\u0084C\u0002\u02e9\u02f9\u0005x=\u0002\u02ea\u02f9",
  "\u0005\u0080A\u0002\u02eb\u02f9\u0005\u0082B\u0002\u02ec\u02f9\u0005",
  "~@\u0002\u02ed\u02f9\u0005v<\u0002\u02ee\u02f9\u0005t;\u0002\u02ef\u02f9",
  "\u0005\u0014\u000b\u0002\u02f0\u02f9\u0005\u0106\u0084\u0002\u02f1\u02f9",
  "\u0005\u0012\n\u0002\u02f2\u02f9\u0005\u0010\t\u0002\u02f3\u02f9\u0005",
  "\f\u0007\u0002\u02f4\u02f9\u0005\u011e\u0090\u0002\u02f5\u02f9\u0005",
  "\u00c8e\u0002\u02f6\u02f9\u0005\u00f0y\u0002\u02f7\u02f9\u0005\u00c6",
  "d\u0002\u02f8\u02d2\u0003\u0002\u0002\u0002\u02f8\u02d3\u0003\u0002",
  "\u0002\u0002\u02f8\u02d4\u0003\u0002\u0002\u0002\u02f8\u02d5\u0003\u0002",
  "\u0002\u0002\u02f8\u02d6\u0003\u0002\u0002\u0002\u02f8\u02d7\u0003\u0002",
  "\u0002\u0002\u02f8\u02d8\u0003\u0002\u0002\u0002\u02f8\u02d9\u0003\u0002",
  "\u0002\u0002\u02f8\u02da\u0003\u0002\u0002\u0002\u02f8\u02db\u0003\u0002",
  "\u0002\u0002\u02f8\u02dc\u0003\u0002\u0002\u0002\u02f8\u02dd\u0003\u0002",
  "\u0002\u0002\u02f8\u02de\u0003\u0002\u0002\u0002\u02f8\u02df\u0003\u0002",
  "\u0002\u0002\u02f8\u02e0\u0003\u0002\u0002\u0002\u02f8\u02e1\u0003\u0002",
  "\u0002\u0002\u02f8\u02e2\u0003\u0002\u0002\u0002\u02f8\u02e3\u0003\u0002",
  "\u0002\u0002\u02f8\u02e4\u0003\u0002\u0002\u0002\u02f8\u02e5\u0003\u0002",
  "\u0002\u0002\u02f8\u02e6\u0003\u0002\u0002\u0002\u02f8\u02e7\u0003\u0002",
  "\u0002\u0002\u02f8\u02e8\u0003\u0002\u0002\u0002\u02f8\u02e9\u0003\u0002",
  "\u0002\u0002\u02f8\u02ea\u0003\u0002\u0002\u0002\u02f8\u02eb\u0003\u0002",
  "\u0002\u0002\u02f8\u02ec\u0003\u0002\u0002\u0002\u02f8\u02ed\u0003\u0002",
  "\u0002\u0002\u02f8\u02ee\u0003\u0002\u0002\u0002\u02f8\u02ef\u0003\u0002",
  "\u0002\u0002\u02f8\u02f0\u0003\u0002\u0002\u0002\u02f8\u02f1\u0003\u0002",
  "\u0002\u0002\u02f8\u02f2\u0003\u0002\u0002\u0002\u02f8\u02f3\u0003\u0002",
  "\u0002\u0002\u02f8\u02f4\u0003\u0002\u0002\u0002\u02f8\u02f5\u0003\u0002",
  "\u0002\u0002\u02f8\u02f6\u0003\u0002\u0002\u0002\u02f8\u02f7\u0003\u0002",
  "\u0002\u0002\u02f9\u000b\u0003\u0002\u0002\u0002\u02fa\u02fb\u0005\u0296",
  "\u014c\u0002\u02fb\u02fc\u0005\u0016\f\u0002\u02fc\u02fd\u0005\u024a",
  "\u0126\u0002\u02fd\u02fe\u0005\u0018\r\u0002\u02fe\u02ff\u0005\u01b0",
  "\u00d9\u0002\u02ff\u0300\u0005\u015a\u00ae\u0002\u0300\r\u0003\u0002",
  "\u0002\u0002\u0301\u0302\u0005\u0236\u011c\u0002\u0302\u0303\u0005\u028a",
  "\u0146\u0002\u0303\u000f\u0003\u0002\u0002\u0002\u0304\u0305\u0005\u0236",
  "\u011c\u0002\u0305\u0309\u0005\u0266\u0134\u0002\u0306\u0307\u0005\u0248",
  "\u0125\u0002\u0307\u0308\u0005\u015a\u00ae\u0002\u0308\u030a\u0003\u0002",
  "\u0002\u0002\u0309\u0306\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002",
  "\u0002\u0002\u030a\u030c\u0003\u0002\u0002\u0002\u030b\u030d\u0005\u0242",
  "\u0122\u0002\u030c\u030b\u0003\u0002\u0002\u0002\u030c\u030d\u0003\u0002",
  "\u0002\u0002\u030d\u0011\u0003\u0002\u0002\u0002\u030e\u030f\u0005\u0236",
  "\u011c\u0002\u030f\u0313\u0005\u0016\f\u0002\u0310\u0311\u0005\u024a",
  "\u0126\u0002\u0311\u0312\u0005\u0018\r\u0002\u0312\u0314\u0003\u0002",
  "\u0002\u0002\u0313\u0310\u0003\u0002\u0002\u0002\u0313\u0314\u0003\u0002",
  "\u0002\u0002\u0314\u0318\u0003\u0002\u0002\u0002\u0315\u0316\u0005\u0248",
  "\u0125\u0002\u0316\u0317\u0005\u015a\u00ae\u0002\u0317\u0319\u0003\u0002",
  "\u0002\u0002\u0318\u0315\u0003\u0002\u0002\u0002\u0318\u0319\u0003\u0002",
  "\u0002\u0002\u0319\u0013\u0003\u0002\u0002\u0002\u031a\u031b\u0005\u01b8",
  "\u00dd\u0002\u031b\u031c\u0005\u0016\f\u0002\u031c\u031d\u0005\u024a",
  "\u0126\u0002\u031d\u031e\u0005\u0018\r\u0002\u031e\u031f\u0005\u0278",
  "\u013d\u0002\u031f\u0320\u0005\u015a\u00ae\u0002\u0320\u0015\u0003\u0002",
  "\u0002\u0002\u0321\u0324\u0005\u0178\u00bd\u0002\u0322\u0324\u0005\u017a",
  "\u00be\u0002\u0323\u0321\u0003\u0002\u0002\u0002\u0323\u0322\u0003\u0002",
  "\u0002\u0002\u0324\u032e\u0003\u0002\u0002\u0002\u0325\u032e\u0005\u017e",
  "\u00c0\u0002\u0326\u032e\u0005\u0188\u00c5\u0002\u0327\u032e\u0005\u019e",
  "\u00d0\u0002\u0328\u032e\u0005\u01a8\u00d5\u0002\u0329\u032e\u0005\u0198",
  "\u00cd\u0002\u032a\u032e\u0005\u01a2\u00d2\u0002\u032b\u032e\u0005\u023e",
  "\u0120\u0002\u032c\u032e\u0005\u0268\u0135\u0002\u032d\u0323\u0003\u0002",
  "\u0002\u0002\u032d\u0325\u0003\u0002\u0002\u0002\u032d\u0326\u0003\u0002",
  "\u0002\u0002\u032d\u0327\u0003\u0002\u0002\u0002\u032d\u0328\u0003\u0002",
  "\u0002\u0002\u032d\u0329\u0003\u0002\u0002\u0002\u032d\u032a\u0003\u0002",
  "\u0002\u0002\u032d\u032b\u0003\u0002\u0002\u0002\u032d\u032c\u0003\u0002",
  "\u0002\u0002\u032e\u0017\u0003\u0002\u0002\u0002\u032f\u0330\u0005\u0178",
  "\u00bd\u0002\u0330\u0331\u0005\u01b6\u00dc\u0002\u0331\u035c\u0003\u0002",
  "\u0002\u0002\u0332\u0333\u0005\u0178\u00bd\u0002\u0333\u0334\u0005\u01b6",
  "\u00dc\u0002\u0334\u0335\u0005\u01bc\u00df\u0002\u0335\u0336\u0005\u022e",
  "\u0118\u0002\u0336\u0337\u0005\u014c\u00a7\u0002\u0337\u035c\u0003\u0002",
  "\u0002\u0002\u0338\u033c\u0005\u01b4\u00db\u0002\u0339\u033a\u0005\u014c",
  "\u00a7\u0002\u033a\u033b\u0007\u0010\u0002\u0002\u033b\u033d\u0003\u0002",
  "\u0002\u0002\u033c\u0339\u0003\u0002\u0002\u0002\u033c\u033d\u0003\u0002",
  "\u0002\u0002\u033d\u033e\u0003\u0002\u0002\u0002\u033e\u033f\u0005\u0166",
  "\u00b4\u0002\u033f\u035c\u0003\u0002\u0002\u0002\u0340\u0341\u0005\u0178",
  "\u00bd\u0002\u0341\u0342\u0005\u0230\u0119\u0002\u0342\u035c\u0003\u0002",
  "\u0002\u0002\u0343\u0344\u0005\u022e\u0118\u0002\u0344\u0345\u0005\u014c",
  "\u00a7\u0002\u0345\u035c\u0003\u0002\u0002\u0002\u0346\u0348\u0005\u0274",
  "\u013b\u0002\u0347\u0346\u0003\u0002\u0002\u0002\u0347\u0348\u0003\u0002",
  "\u0002\u0002\u0348\u034c\u0003\u0002\u0002\u0002\u0349\u034a\u0005\u014c",
  "\u00a7\u0002\u034a\u034b\u0007\u0010\u0002\u0002\u034b\u034d\u0003\u0002",
  "\u0002\u0002\u034c\u0349\u0003\u0002\u0002\u0002\u034c\u034d\u0003\u0002",
  "\u0002\u0002\u034d\u034e\u0003\u0002\u0002\u0002\u034e\u035c\u0005\u014e",
  "\u00a8\u0002\u034f\u0350\u0005\u0178\u00bd\u0002\u0350\u0351\u0005\u0266",
  "\u0134\u0002\u0351\u035c\u0003\u0002\u0002\u0002\u0352\u0353\u0005\u025e",
  "\u0130\u0002\u0353\u0354\u0005\u015a\u00ae\u0002\u0354\u035c\u0003\u0002",
  "\u0002\u0002\u0355\u0358\u0005\u0260\u0131\u0002\u0356\u0358\u0005\u0262",
  "\u0132\u0002\u0357\u0355\u0003\u0002\u0002\u0002\u0357\u0356\u0003\u0002",
  "\u0002\u0002\u0358\u0359\u0003\u0002\u0002\u0002\u0359\u035a\u0005\u0264",
  "\u0133\u0002\u035a\u035c\u0003\u0002\u0002\u0002\u035b\u032f\u0003\u0002",
  "\u0002\u0002\u035b\u0332\u0003\u0002\u0002\u0002\u035b\u0338\u0003\u0002",
  "\u0002\u0002\u035b\u0340\u0003\u0002\u0002\u0002\u035b\u0343\u0003\u0002",
  "\u0002\u0002\u035b\u0347\u0003\u0002\u0002\u0002\u035b\u034f\u0003\u0002",
  "\u0002\u0002\u035b\u0352\u0003\u0002\u0002\u0002\u035b\u0357\u0003\u0002",
  "\u0002\u0002\u035c\u0019\u0003\u0002\u0002\u0002\u035d\u035e\u0005\u0198",
  "\u00cd\u0002\u035e\u0360\u0005\u0288\u0145\u0002\u035f\u0361\u0005\u0110",
  "\u0089\u0002\u0360\u035f\u0003\u0002\u0002\u0002\u0360\u0361\u0003\u0002",
  "\u0002\u0002\u0361\u0362\u0003\u0002\u0002\u0002\u0362\u0363\u0005\u016a",
  "\u00b6\u0002\u0363\u0364\u0005\u0294\u014b\u0002\u0364\u0365\u0005\u0252",
  "\u012a\u0002\u0365\u0368\u0005\u0146\u00a4\u0002\u0366\u0369\u0005\u0272",
  "\u013a\u0002\u0367\u0369\u0005\u0240\u0121\u0002\u0368\u0366\u0003\u0002",
  "\u0002\u0002\u0368\u0367\u0003\u0002\u0002\u0002\u0368\u0369\u0003\u0002",
  "\u0002\u0002\u0369\u001b\u0003\u0002\u0002\u0002\u036a\u036b\u0005\u0198",
  "\u00cd\u0002\u036b\u036d\u0005\u025e\u0130\u0002\u036c\u036e\u0005\u0110",
  "\u0089\u0002\u036d\u036c\u0003\u0002\u0002\u0002\u036d\u036e\u0003\u0002",
  "\u0002\u0002\u036e\u036f\u0003\u0002\u0002\u0002\u036f\u0371\u0005\u015a",
  "\u00ae\u0002\u0370\u0372\u0005n8\u0002\u0371\u0370\u0003\u0002\u0002",
  "\u0002\u0371\u0372\u0003\u0002\u0002\u0002\u0372\u001d\u0003\u0002\u0002",
  "\u0002\u0373\u0374\u0005\u0198\u00cd\u0002\u0374\u0376\u0005\u0280\u0141",
  "\u0002\u0375\u0377\u0005\u0110\u0089\u0002\u0376\u0375\u0003\u0002\u0002",
  "\u0002\u0376\u0377\u0003\u0002\u0002\u0002\u0377\u037b\u0003\u0002\u0002",
  "\u0002\u0378\u0379\u0005\u014c\u00a7\u0002\u0379\u037a\u0007\u0010\u0002",
  "\u0002\u037a\u037c\u0003\u0002\u0002\u0002\u037b\u0378\u0003\u0002\u0002",
  "\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002",
  "\u0002\u037d\u037e\u0005\u0162\u00b2\u0002\u037e\u037f\u0005\u029a\u014e",
  "\u0002\u037f\u0380\u0005 \u0011\u0002\u0380\u0381\u0005\u029c\u014f",
  "\u0002\u0381\u001f\u0003\u0002\u0002\u0002\u0382\u0383\u0005\u0150\u00a9",
  "\u0002\u0383\u038a\u0005\u0152\u00aa\u0002\u0384\u0385\u0005\u02aa\u0156",
  "\u0002\u0385\u0386\u0005\u0150\u00a9\u0002\u0386\u0387\u0005\u0152\u00aa",
  "\u0002\u0387\u0389\u0003\u0002\u0002\u0002\u0388\u0384\u0003\u0002\u0002",
  "\u0002\u0389\u038c\u0003\u0002\u0002\u0002\u038a\u0388\u0003\u0002\u0002",
  "\u0002\u038a\u038b\u0003\u0002\u0002\u0002\u038b!\u0003\u0002\u0002",
  "\u0002\u038c\u038a\u0003\u0002\u0002\u0002\u038d\u038e\u0005\u0198\u00cd",
  "\u0002\u038e\u0390\u0005\u027a\u013e\u0002\u038f\u0391\u0005\u0110\u0089",
  "\u0002\u0390\u038f\u0003\u0002\u0002\u0002\u0390\u0391\u0003\u0002\u0002",
  "\u0002\u0391\u0395\u0003\u0002\u0002\u0002\u0392\u0393\u0005\u014c\u00a7",
  "\u0002\u0393\u0394\u0007\u0010\u0002\u0002\u0394\u0396\u0003\u0002\u0002",
  "\u0002\u0395\u0392\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002",
  "\u0002\u0396\u0397\u0003\u0002\u0002\u0002\u0397\u0398\u0005\u015c\u00af",
  "\u0002\u0398\u0399\u0005\u028c\u0147\u0002\u0399\u039a\u0005\u015e\u00b0",
  "\u0002\u039a#\u0003\u0002\u0002\u0002\u039b\u039c\u0005\u0198\u00cd",
  "\u0002\u039c\u039d\u0005\u023c\u011f\u0002\u039d\u039f\u0005\u0290\u0149",
  "\u0002\u039e\u03a0\u0005\u0110\u0089\u0002\u039f\u039e\u0003\u0002\u0002",
  "\u0002\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a4\u0003\u0002\u0002",
  "\u0002\u03a1\u03a2\u0005\u014c\u00a7\u0002\u03a2\u03a3\u0007\u0010\u0002",
  "\u0002\u03a3\u03a5\u0003\u0002\u0002\u0002\u03a4\u03a1\u0003\u0002\u0002",
  "\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002",
  "\u0002\u03a6\u03a7\u0005\u0160\u00b1\u0002\u03a7\u03a8\u0005\u0184\u00c3",
  "\u0002\u03a8\u03a9\u0005\u0268\u0135\u0002\u03a9\u03aa\u0005\u0118\u008d",
  "\u0002\u03aa\u03ae\u0005\u01b0\u00d9\u0002\u03ab\u03ac\u0005\u014c\u00a7",
  "\u0002\u03ac\u03ad\u0007\u0010\u0002\u0002\u03ad\u03af\u0003\u0002\u0002",
  "\u0002\u03ae\u03ab\u0003\u0002\u0002\u0002\u03ae\u03af\u0003\u0002\u0002",
  "\u0002\u03af\u03b0\u0003\u0002\u0002\u0002\u03b0\u03b1\u0005\u014e\u00a8",
  "\u0002\u03b1\u03b3\u0005&\u0014\u0002\u03b2\u03b4\u0005\u00a6T\u0002",
  "\u03b3\u03b2\u0003\u0002\u0002\u0002\u03b3\u03b4\u0003\u0002\u0002\u0002",
  "\u03b4\u03b8\u0003\u0002\u0002\u0002\u03b5\u03b6\u0005\u0294\u014b\u0002",
  "\u03b6\u03b7\u0005,\u0017\u0002\u03b7\u03b9\u0003\u0002\u0002\u0002",
  "\u03b8\u03b5\u0003\u0002\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002",
  "\u03b9%\u0003\u0002\u0002\u0002\u03ba\u03bb\u0005\u0292\u014a\u0002",
  "\u03bb\u03bf\u0005(\u0015\u0002\u03bc\u03bd\u0005\u0180\u00c1\u0002",
  "\u03bd\u03be\u0005\u0134\u009b\u0002\u03be\u03c0\u0003\u0002\u0002\u0002",
  "\u03bf\u03bc\u0003\u0002\u0002\u0002\u03bf\u03c0\u0003\u0002\u0002\u0002",
  "\u03c0'\u0003\u0002\u0002\u0002\u03c1\u03c7\u0005*\u0016\u0002\u03c2",
  "\u03c3\u0005\u0180\u00c1\u0002\u03c3\u03c4\u0005*\u0016\u0002\u03c4",
  "\u03c6\u0003\u0002\u0002\u0002\u03c5\u03c2\u0003\u0002\u0002\u0002\u03c6",
  "\u03c9\u0003\u0002\u0002\u0002\u03c7\u03c5\u0003\u0002\u0002\u0002\u03c7",
  "\u03c8\u0003\u0002\u0002\u0002\u03c8)\u0003\u0002\u0002\u0002\u03c9",
  "\u03c7\u0003\u0002\u0002\u0002\u03ca\u03cb\u0005\u0150\u00a9\u0002\u03cb",
  "\u03cc\u0005\u0226\u0114\u0002\u03cc\u03cd\u0005\u0244\u0123\u0002\u03cd",
  "\u03ce\u0005\u0246\u0124\u0002\u03ce+\u0003\u0002\u0002\u0002\u03cf",
  "\u03d0\u0005\u0090I\u0002\u03d0-\u0003\u0002\u0002\u0002\u03d1\u03d2",
  "\u0005\u0198\u00cd\u0002\u03d2\u03d4\u0005\u022e\u0118\u0002\u03d3\u03d5",
  "\u0005\u0110\u0089\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d4\u03d5",
  "\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002\u03d6\u03d7",
  "\u0005\u014c\u00a7\u0002\u03d7\u03d8\u0005\u0294\u014b\u0002\u03d8\u03d9",
  "\u0005\u025a\u012e\u0002\u03d9\u03da\u0007\u00dd\u0002\u0002\u03da\u03db",
  "\u0005\u029e\u0150\u0002\u03db\u03dc\u0005\u00c0a\u0002\u03dc\u03e0",
  "\u0005\u02a0\u0151\u0002\u03dd\u03de\u0005\u0180\u00c1\u0002\u03de\u03df",
  "\u0005\u00c4c\u0002\u03df\u03e1\u0003\u0002\u0002\u0002\u03e0\u03dd",
  "\u0003\u0002\u0002\u0002\u03e0\u03e1\u0003\u0002\u0002\u0002\u03e1/",
  "\u0003\u0002\u0002\u0002\u03e2\u03e4\u0005\u0198\u00cd\u0002\u03e3\u03e5",
  "\u0005D#\u0002\u03e4\u03e3\u0003\u0002\u0002\u0002\u03e4\u03e5\u0003",
  "\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002\u03e6\u03e8\u0005",
  "\u01b4\u00db\u0002\u03e7\u03e9\u0005\u0110\u0089\u0002\u03e8\u03e7\u0003",
  "\u0002\u0002\u0002\u03e8\u03e9\u0003\u0002\u0002\u0002\u03e9\u03ed\u0003",
  "\u0002\u0002\u0002\u03ea\u03eb\u0005\u014c\u00a7\u0002\u03eb\u03ec\u0007",
  "\u0010\u0002\u0002\u03ec\u03ee\u0003\u0002\u0002\u0002\u03ed\u03ea\u0003",
  "\u0002\u0002\u0002\u03ed\u03ee\u0003\u0002\u0002\u0002\u03ee\u03ef\u0003",
  "\u0002\u0002\u0002\u03ef\u03f0\u0005\u0166\u00b4\u0002\u03f0\u03f2\u0005",
  "\u029a\u014e\u0002\u03f1\u03f3\u00054\u001b\u0002\u03f2\u03f1\u0003",
  "\u0002\u0002\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3\u03f4\u0003",
  "\u0002\u0002\u0002\u03f4\u03f5\u0005\u029c\u014f\u0002\u03f5\u03f6\u0005",
  "6\u001c\u0002\u03f6\u03f7\u0005\u025c\u012f\u0002\u03f7\u03f8\u0005",
  "\u0152\u00aa\u0002\u03f8\u03f9\u0005\u0232\u011a\u0002\u03f9\u03fa\u0005",
  "\u0168\u00b5\u0002\u03fa\u03fb\u0005\u0184\u00c3\u0002\u03fb\u03fc\u0005",
  "2\u001a\u0002\u03fc1\u0003\u0002\u0002\u0002\u03fd\u03fe\t\u0002\u0002",
  "\u0002\u03fe3\u0003\u0002\u0002\u0002\u03ff\u0405\u0005\u0170\u00b9",
  "\u0002\u0400\u0401\u0005\u02aa\u0156\u0002\u0401\u0402\u0005\u0170\u00b9",
  "\u0002\u0402\u0404\u0003\u0002\u0002\u0002\u0403\u0400\u0003\u0002\u0002",
  "\u0002\u0404\u0407\u0003\u0002\u0002\u0002\u0405\u0403\u0003\u0002\u0002",
  "\u0002\u0405\u0406\u0003\u0002\u0002\u0002\u04065\u0003\u0002\u0002",
  "\u0002\u0407\u0405\u0003\u0002\u0002\u0002\u0408\u040d\u0005\u0190\u00c9",
  "\u0002\u0409\u040a\u0005\u025c\u012f\u0002\u040a\u040b\u0005\u0246\u0124",
  "\u0002\u040b\u040d\u0003\u0002\u0002\u0002\u040c\u0408\u0003\u0002\u0002",
  "\u0002\u040c\u0409\u0003\u0002\u0002\u0002\u040d\u040e\u0003\u0002\u0002",
  "\u0002\u040e\u040f\u0005\u024a\u0126\u0002\u040f\u0410\u0005\u0246\u0124",
  "\u0002\u0410\u0411\u0005\u0220\u0111\u0002\u04117\u0003\u0002\u0002",
  "\u0002\u0412\u0414\u0005\u0198\u00cd\u0002\u0413\u0415\u0005D#\u0002",
  "\u0414\u0413\u0003\u0002\u0002\u0002\u0414\u0415\u0003\u0002\u0002\u0002",
  "\u0415\u0416\u0003\u0002\u0002\u0002\u0416\u0418\u0005\u0176\u00bc\u0002",
  "\u0417\u0419\u0005\u0110\u0089\u0002\u0418\u0417\u0003\u0002\u0002\u0002",
  "\u0418\u0419\u0003\u0002\u0002\u0002\u0419\u041d\u0003\u0002\u0002\u0002",
  "\u041a\u041b\u0005\u014c\u00a7\u0002\u041b\u041c\u0007\u0010\u0002\u0002",
  "\u041c\u041e\u0003\u0002\u0002\u0002\u041d\u041a\u0003\u0002\u0002\u0002",
  "\u041d\u041e\u0003\u0002\u0002\u0002\u041e\u041f\u0003\u0002\u0002\u0002",
  "\u041f\u0420\u0005\u0164\u00b3\u0002\u0420\u0421\u0005\u029a\u014e\u0002",
  "\u0421\u0422\u0005\u0152\u00aa\u0002\u0422\u0423\u0005\u029c\u014f\u0002",
  "\u0423\u0424\u0005\u026c\u0137\u0002\u0424\u0425\u0005\u0166\u00b4\u0002",
  "\u0425\u0426\u0005\u0270\u0139\u0002\u0426\u0427\u0005\u0152\u00aa\u0002",
  "\u0427\u0428\u0005\u01ae\u00d8\u0002\u0428\u0429\u0005\u0166\u00b4\u0002",
  "\u0429\u042a\u0005\u021e\u0110\u0002\u042a\u042b\u0005:\u001e\u0002",
  "\u042b9\u0003\u0002\u0002\u0002\u042c\u0431\u0005\u0140\u00a1\u0002",
  '\u042d\u0431\u0005B"\u0002\u042e\u0431\u0005@!\u0002\u042f\u0431\u0005',
  "<\u001f\u0002\u0430\u042c\u0003\u0002\u0002\u0002\u0430\u042d\u0003",
  "\u0002\u0002\u0002\u0430\u042e\u0003\u0002\u0002\u0002\u0430\u042f\u0003",
  "\u0002\u0002\u0002\u0431;\u0003\u0002\u0002\u0002\u0432\u0433\u0005",
  "\u029e\u0150\u0002\u0433\u0439\u0005> \u0002\u0434\u0435\u0005\u02aa",
  "\u0156\u0002\u0435\u0436\u0005> \u0002\u0436\u0438\u0003\u0002\u0002",
  "\u0002\u0437\u0434\u0003\u0002\u0002\u0002\u0438\u043b\u0003\u0002\u0002",
  "\u0002\u0439\u0437\u0003\u0002\u0002\u0002\u0439\u043a\u0003\u0002\u0002",
  "\u0002\u043a\u043c\u0003\u0002\u0002\u0002\u043b\u0439\u0003\u0002\u0002",
  "\u0002\u043c\u043d\u0005\u02a0\u0151\u0002\u043d=\u0003\u0002\u0002",
  "\u0002\u043e\u043f\u0005\u016e\u00b8\u0002\u043f\u0440\u0007\u000b\u0002",
  "\u0002\u0440\u0441\u0005:\u001e\u0002\u0441?\u0003\u0002\u0002\u0002",
  '\u0442\u0443\u0005\u029a\u014e\u0002\u0443\u044a\u0005B"\u0002\u0444',
  "\u0445\u0005\u02aa\u0156\u0002\u0445\u0446\u0005\u0140\u00a1\u0002\u0446",
  '\u0449\u0003\u0002\u0002\u0002\u0447\u0449\u0005B"\u0002\u0448\u0444',
  "\u0003\u0002\u0002\u0002\u0448\u0447\u0003\u0002\u0002\u0002\u0449\u044c",
  "\u0003\u0002\u0002\u0002\u044a\u0448\u0003\u0002\u0002\u0002\u044a\u044b",
  "\u0003\u0002\u0002\u0002\u044b\u044d\u0003\u0002\u0002\u0002\u044c\u044a",
  "\u0003\u0002\u0002\u0002\u044d\u044e\u0005\u029c\u014f\u0002\u044eA",
  "\u0003\u0002\u0002\u0002\u044f\u0450\u0005\u029a\u014e\u0002\u0450\u0456",
  "\u0005\u0140\u00a1\u0002\u0451\u0452\u0005\u02aa\u0156\u0002\u0452\u0453",
  "\u0005\u0140\u00a1\u0002\u0453\u0455\u0003\u0002\u0002\u0002\u0454\u0451",
  "\u0003\u0002\u0002\u0002\u0455\u0458\u0003\u0002\u0002\u0002\u0456\u0454",
  "\u0003\u0002\u0002\u0002\u0456\u0457\u0003\u0002\u0002\u0002\u0457\u0459",
  "\u0003\u0002\u0002\u0002\u0458\u0456\u0003\u0002\u0002\u0002\u0459\u045a",
  "\u0005\u029c\u014f\u0002\u045aC\u0003\u0002\u0002\u0002\u045b\u045c",
  "\u0005\u024e\u0128\u0002\u045c\u045d\u0005\u0258\u012d\u0002\u045dE",
  "\u0003\u0002\u0002\u0002\u045e\u045f\u0005\u017e\u00c0\u0002\u045f\u0460",
  "\u0005\u0288\u0145\u0002\u0460\u0461\u0005\u016a\u00b6\u0002\u0461\u0462",
  "\u0005\u0294\u014b\u0002\u0462\u0464\u0005H%\u0002\u0463\u0465\u0005",
  "J&\u0002\u0464\u0463\u0003\u0002\u0002\u0002\u0464\u0465\u0003\u0002",
  "\u0002\u0002\u0465G\u0003\u0002\u0002\u0002\u0466\u0467\u0005\u0252",
  "\u012a\u0002\u0467\u0468\u0005\u0146\u00a4\u0002\u0468I\u0003\u0002",
  "\u0002\u0002\u0469\u046c\u0005\u0272\u013a\u0002\u046a\u046c\u0005\u0240",
  "\u0121\u0002\u046b\u0469\u0003\u0002\u0002\u0002\u046b\u046a\u0003\u0002",
  "\u0002\u0002\u046cK\u0003\u0002\u0002\u0002\u046d\u046e\u0005\u017e",
  "\u00c0\u0002\u046e\u0472\u0005\u0280\u0141\u0002\u046f\u0470\u0005\u014c",
  "\u00a7\u0002\u0470\u0471\u0007\u0010\u0002\u0002\u0471\u0473\u0003\u0002",
  "\u0002\u0002\u0472\u046f\u0003\u0002\u0002\u0002\u0472\u0473\u0003\u0002",
  "\u0002\u0002\u0473\u0474\u0003\u0002\u0002\u0002\u0474\u0475\u0005\u0162",
  "\u00b2\u0002\u0475\u0476\u0005N(\u0002\u0476M\u0003\u0002\u0002\u0002",
  "\u0477\u047b\u0005X-\u0002\u0478\u047b\u0005V,\u0002\u0479\u047b\u0005",
  "P)\u0002\u047a\u0477\u0003\u0002\u0002\u0002\u047a\u0478\u0003\u0002",
  "\u0002\u0002\u047a\u0479\u0003\u0002\u0002\u0002\u047bO\u0003\u0002",
  "\u0002\u0002\u047c\u047d\u0005\u0256\u012c\u0002\u047d\u047e\u0005R",
  "*\u0002\u047eQ\u0003\u0002\u0002\u0002\u047f\u0485\u0005T+\u0002\u0480",
  "\u0481\u0005\u0180\u00c1\u0002\u0481\u0482\u0005T+\u0002\u0482\u0484",
  "\u0003\u0002\u0002\u0002\u0483\u0480\u0003\u0002\u0002\u0002\u0484\u0487",
  "\u0003\u0002\u0002\u0002\u0485\u0483\u0003\u0002\u0002\u0002\u0485\u0486",
  "\u0003\u0002\u0002\u0002\u0486S\u0003\u0002\u0002\u0002\u0487\u0485",
  "\u0003\u0002\u0002\u0002\u0488\u0489\u0005\u0150\u00a9\u0002\u0489\u048a",
  "\u0005\u0278\u013d\u0002\u048a\u048b\u0005\u0150\u00a9\u0002\u048bU",
  "\u0003\u0002\u0002\u0002\u048c\u048d\u0005\u0174\u00bb\u0002\u048d\u048e",
  "\u0005 \u0011\u0002\u048eW\u0003\u0002\u0002\u0002\u048f\u0490\u0005",
  "\u017e\u00c0\u0002\u0490\u0491\u0005\u0150\u00a9\u0002\u0491\u0492\u0005",
  "\u0280\u0141\u0002\u0492\u0493\u0005\u0152\u00aa\u0002\u0493Y\u0003",
  "\u0002\u0002\u0002\u0494\u0495\u0005\u017e\u00c0\u0002\u0495\u0499\u0005",
  "\u0274\u013b\u0002\u0496\u0497\u0005\u014c\u00a7\u0002\u0497\u0498\u0007",
  "\u0010\u0002\u0002\u0498\u049a\u0003\u0002\u0002\u0002\u0499\u0496\u0003",
  "\u0002\u0002\u0002\u0499\u049a\u0003\u0002\u0002\u0002\u049a\u049b\u0003",
  "\u0002\u0002\u0002\u049b\u049c\u0005\u014e\u00a8\u0002\u049c\u049d\u0005",
  "\\/\u0002\u049d[\u0003\u0002\u0002\u0002\u049e\u04a5\u0005h5\u0002\u049f",
  "\u04a5\u0005d3\u0002\u04a0\u04a5\u0005d3\u0002\u04a1\u04a5\u0005b2\u0002",
  "\u04a2\u04a5\u0005`1\u0002\u04a3\u04a5\u0005^0\u0002\u04a4\u049e\u0003",
  "\u0002\u0002\u0002\u04a4\u049f\u0003\u0002\u0002\u0002\u04a4\u04a0\u0003",
  "\u0002\u0002\u0002\u04a4\u04a1\u0003\u0002\u0002\u0002\u04a4\u04a2\u0003",
  "\u0002\u0002\u0002\u04a4\u04a3\u0003\u0002\u0002\u0002\u04a5]\u0003",
  "\u0002\u0002\u0002\u04a6\u04a7\u0005\u0294\u014b\u0002\u04a7\u04a8\u0005",
  "\u0090I\u0002\u04a8_\u0003\u0002\u0002\u0002\u04a9\u04aa\u0005\u0256",
  "\u012c\u0002\u04aa\u04ab\u0005\u0150\u00a9\u0002\u04ab\u04ac\u0005\u0278",
  "\u013d\u0002\u04ac\u04ad\u0005\u0150\u00a9\u0002\u04ada\u0003\u0002",
  "\u0002\u0002\u04ae\u04af\u0005\u01a2\u00d2\u0002\u04af\u04b0\u0005\u0194",
  "\u00cb\u0002\u04b0\u04b1\u0005\u026e\u0138\u0002\u04b1c\u0003\u0002",
  "\u0002\u0002\u04b2\u04b3\u0005\u01a2\u00d2\u0002\u04b3\u04b4\u0005f",
  "4\u0002\u04b4e\u0003\u0002\u0002\u0002\u04b5\u04bb\u0005\u0150\u00a9",
  "\u0002\u04b6\u04b7\u0005\u02aa\u0156\u0002\u04b7\u04b8\u0005\u0150\u00a9",
  "\u0002\u04b8\u04ba\u0003\u0002\u0002\u0002\u04b9\u04b6\u0003\u0002\u0002",
  "\u0002\u04ba\u04bd\u0003\u0002\u0002\u0002\u04bb\u04b9\u0003\u0002\u0002",
  "\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bcg\u0003\u0002\u0002",
  "\u0002\u04bd\u04bb\u0003\u0002\u0002\u0002\u04be\u04bf\u0005\u0174\u00bb",
  "\u0002\u04bf\u04c0\u0005j6\u0002\u04c0i\u0003\u0002\u0002\u0002\u04c1",
  "\u04c2\u0005\u0150\u00a9\u0002\u04c2\u04c9\u0005\u0152\u00aa\u0002\u04c3",
  "\u04c4\u0005\u02aa\u0156\u0002\u04c4\u04c5\u0005\u0150\u00a9\u0002\u04c5",
  "\u04c6\u0005\u0152\u00aa\u0002\u04c6\u04c8\u0003\u0002\u0002\u0002\u04c7",
  "\u04c3\u0003\u0002\u0002\u0002\u04c8\u04cb\u0003\u0002\u0002\u0002\u04c9",
  "\u04c7\u0003\u0002\u0002\u0002\u04c9\u04ca\u0003\u0002\u0002\u0002\u04ca",
  "k\u0003\u0002\u0002\u0002\u04cb\u04c9\u0003\u0002\u0002\u0002\u04cc",
  "\u04cd\u0005\u017e\u00c0\u0002\u04cd\u04ce\u0005\u025e\u0130\u0002\u04ce",
  "\u04d0\u0005\u015a\u00ae\u0002\u04cf\u04d1\u0005n8\u0002\u04d0\u04cf",
  "\u0003\u0002\u0002\u0002\u04d0\u04d1\u0003\u0002\u0002\u0002\u04d1m",
  "\u0003\u0002\u0002\u0002\u04d2\u04d3\u0005\u0294\u014b\u0002\u04d3\u04d9",
  "\u0005p9\u0002\u04d4\u04d5\u0005\u0180\u00c1\u0002\u04d5\u04d6\u0005",
  "p9\u0002\u04d6\u04d8\u0003\u0002\u0002\u0002\u04d7\u04d4\u0003\u0002",
  "\u0002\u0002\u04d8\u04db\u0003\u0002\u0002\u0002\u04d9\u04d7\u0003\u0002",
  "\u0002\u0002\u04d9\u04da\u0003\u0002\u0002\u0002\u04dao\u0003\u0002",
  "\u0002\u0002\u04db\u04d9\u0003\u0002\u0002\u0002\u04dc\u04dd\u0005\u0252",
  "\u012a\u0002\u04dd\u04de\u0007\u00dd\u0002\u0002\u04de\u04df\u0005\u0146",
  "\u00a4\u0002\u04df\u04ed\u0003\u0002\u0002\u0002\u04e0\u04e1\u0005\u023a",
  "\u011e\u0002\u04e1\u04e2\u0007\u00dd\u0002\u0002\u04e2\u04e3\u0005\u0148",
  "\u00a5\u0002\u04e3\u04ed\u0003\u0002\u0002\u0002\u04e4\u04e5\u0005\u0272",
  "\u013a\u0002\u04e5\u04e6\u0007\u00dd\u0002\u0002\u04e6\u04e7\u0005\u0148",
  "\u00a5\u0002\u04e7\u04ed\u0003\u0002\u0002\u0002\u04e8\u04e9\u0005\u024c",
  "\u0127\u0002\u04e9\u04ea\u0007\u00dd\u0002\u0002\u04ea\u04eb\u0005\u0098",
  "M\u0002\u04eb\u04ed\u0003\u0002\u0002\u0002\u04ec\u04dc\u0003\u0002",
  "\u0002\u0002\u04ec\u04e0\u0003\u0002\u0002\u0002\u04ec\u04e4\u0003\u0002",
  "\u0002\u0002\u04ec\u04e8\u0003\u0002\u0002\u0002\u04edq\u0003\u0002",
  "\u0002\u0002\u04ee\u04ef\u0005\u017e\u00c0\u0002\u04ef\u04f0\u0005\u023c",
  "\u011f\u0002\u04f0\u04f4\u0005\u0290\u0149\u0002\u04f1\u04f2\u0005\u014c",
  "\u00a7\u0002\u04f2\u04f3\u0007\u0010\u0002\u0002\u04f3\u04f5\u0003\u0002",
  "\u0002\u0002\u04f4\u04f1\u0003\u0002\u0002\u0002\u04f4\u04f5\u0003\u0002",
  "\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04fa\u0005\u0160",
  "\u00b1\u0002\u04f7\u04f8\u0005\u0294\u014b\u0002\u04f8\u04f9\u0005\u0090",
  "I\u0002\u04f9\u04fb\u0003\u0002\u0002\u0002\u04fa\u04f7\u0003\u0002",
  "\u0002\u0002\u04fa\u04fb\u0003\u0002\u0002\u0002\u04fbs\u0003\u0002",
  "\u0002\u0002\u04fc\u04fd\u0005\u01a2\u00d2\u0002\u04fd\u04ff\u0005\u0288",
  "\u0145\u0002\u04fe\u0500\u0005\u0112\u008a\u0002\u04ff\u04fe\u0003\u0002",
  "\u0002\u0002\u04ff\u0500\u0003\u0002\u0002\u0002\u0500\u0501\u0003\u0002",
  "\u0002\u0002\u0501\u0502\u0005\u016a\u00b6\u0002\u0502u\u0003\u0002",
  "\u0002\u0002\u0503\u0504\u0005\u01a2\u00d2\u0002\u0504\u0506\u0005\u0280",
  "\u0141\u0002\u0505\u0507\u0005\u0112\u008a\u0002\u0506\u0505\u0003\u0002",
  "\u0002\u0002\u0506\u0507\u0003\u0002\u0002\u0002\u0507\u050b\u0003\u0002",
  "\u0002\u0002\u0508\u0509\u0005\u014c\u00a7\u0002\u0509\u050a\u0007\u0010",
  "\u0002\u0002\u050a\u050c\u0003\u0002\u0002\u0002\u050b\u0508\u0003\u0002",
  "\u0002\u0002\u050b\u050c\u0003\u0002\u0002\u0002\u050c\u050d\u0003\u0002",
  "\u0002\u0002\u050d\u050e\u0005\u0162\u00b2\u0002\u050ew\u0003\u0002",
  "\u0002\u0002\u050f\u0510\u0005\u01a2\u00d2\u0002\u0510\u0511\u0005\u023c",
  "\u011f\u0002\u0511\u0513\u0005\u0290\u0149\u0002\u0512\u0514\u0005\u0112",
  "\u008a\u0002\u0513\u0512\u0003\u0002\u0002\u0002\u0513\u0514\u0003\u0002",
  "\u0002\u0002\u0514\u0518\u0003\u0002\u0002\u0002\u0515\u0516\u0005\u014c",
  "\u00a7\u0002\u0516\u0517\u0007\u0010\u0002\u0002\u0517\u0519\u0003\u0002",
  "\u0002\u0002\u0518\u0515\u0003\u0002\u0002\u0002\u0518\u0519\u0003\u0002",
  "\u0002\u0002\u0519\u051a\u0003\u0002\u0002\u0002\u051a\u051b\u0005\u0160",
  "\u00b1\u0002\u051by\u0003\u0002\u0002\u0002\u051c\u051d\u0005\u01a2",
  "\u00d2\u0002\u051d\u051f\u0005\u0176\u00bc\u0002\u051e\u0520\u0005\u0112",
  "\u008a\u0002\u051f\u051e\u0003\u0002\u0002\u0002\u051f\u0520\u0003\u0002",
  "\u0002\u0002\u0520\u0524\u0003\u0002\u0002\u0002\u0521\u0522\u0005\u014c",
  "\u00a7\u0002\u0522\u0523\u0007\u0010\u0002\u0002\u0523\u0525\u0003\u0002",
  "\u0002\u0002\u0524\u0521\u0003\u0002\u0002\u0002\u0524\u0525\u0003\u0002",
  "\u0002\u0002\u0525\u0526\u0003\u0002\u0002\u0002\u0526\u0527\u0005\u0164",
  "\u00b3\u0002\u0527{\u0003\u0002\u0002\u0002\u0528\u0529\u0005\u01a2",
  "\u00d2\u0002\u0529\u052b\u0005\u01b4\u00db\u0002\u052a\u052c\u0005\u0112",
  "\u008a\u0002\u052b\u052a\u0003\u0002\u0002\u0002\u052b\u052c\u0003\u0002",
  "\u0002\u0002\u052c\u0530\u0003\u0002\u0002\u0002\u052d\u052e\u0005\u014c",
  "\u00a7\u0002\u052e\u052f\u0007\u0010\u0002\u0002\u052f\u0531\u0003\u0002",
  "\u0002\u0002\u0530\u052d\u0003\u0002\u0002\u0002\u0530\u0531\u0003\u0002",
  "\u0002\u0002\u0531\u0532\u0003\u0002\u0002\u0002\u0532\u0533\u0005\u0166",
  "\u00b4\u0002\u0533}\u0003\u0002\u0002\u0002\u0534\u0535\u0005\u01a2",
  "\u00d2\u0002\u0535\u0537\u0005\u027a\u013e\u0002\u0536\u0538\u0005\u0112",
  "\u008a\u0002\u0537\u0536\u0003\u0002\u0002\u0002\u0537\u0538\u0003\u0002",
  "\u0002\u0002\u0538\u0539\u0003\u0002\u0002\u0002\u0539\u053a\u0005\u015c",
  "\u00af\u0002\u053a\u053e\u0005\u024a\u0126\u0002\u053b\u053c\u0005\u014c",
  "\u00a7\u0002\u053c\u053d\u0007\u0010\u0002\u0002\u053d\u053f\u0003\u0002",
  "\u0002\u0002\u053e\u053b\u0003\u0002\u0002\u0002\u053e\u053f\u0003\u0002",
  "\u0002\u0002\u053f\u0540\u0003\u0002\u0002\u0002\u0540\u0541\u0005\u014e",
  "\u00a8\u0002\u0541\u007f\u0003\u0002\u0002\u0002\u0542\u0543\u0005\u01a2",
  "\u00d2\u0002\u0543\u0545\u0005\u025e\u0130\u0002\u0544\u0546\u0005\u0112",
  "\u008a\u0002\u0545\u0544\u0003\u0002\u0002\u0002\u0545\u0546\u0003\u0002",
  "\u0002\u0002\u0546\u0547\u0003\u0002\u0002\u0002\u0547\u0548\u0005\u015a",
  "\u00ae\u0002\u0548\u0081\u0003\u0002\u0002\u0002\u0549\u054a\u0005\u01a2",
  "\u00d2\u0002\u054a\u054c\u0005\u0274\u013b\u0002\u054b\u054d\u0005\u0112",
  "\u008a\u0002\u054c\u054b\u0003\u0002\u0002\u0002\u054c\u054d\u0003\u0002",
  "\u0002\u0002\u054d\u0551\u0003\u0002\u0002\u0002\u054e\u054f\u0005\u014c",
  "\u00a7\u0002\u054f\u0550\u0007\u0010\u0002\u0002\u0550\u0552\u0003\u0002",
  "\u0002\u0002\u0551\u054e\u0003\u0002\u0002\u0002\u0551\u0552\u0003\u0002",
  "\u0002\u0002\u0552\u0553\u0003\u0002\u0002\u0002\u0553\u0554\u0005\u014e",
  "\u00a8\u0002\u0554\u0083\u0003\u0002\u0002\u0002\u0555\u0556\u0005\u01a2",
  "\u00d2\u0002\u0556\u0558\u0005\u022e\u0118\u0002\u0557\u0559\u0005\u0112",
  "\u008a\u0002\u0558\u0557\u0003\u0002\u0002\u0002\u0558\u0559\u0003\u0002",
  "\u0002\u0002\u0559\u055a\u0003\u0002\u0002\u0002\u055a\u055b\u0005\u014c",
  "\u00a7\u0002\u055b\u0085\u0003\u0002\u0002\u0002\u055c\u055d\u0005\u01a2",
  "\u00d2\u0002\u055d\u055f\u0005\u01be\u00e0\u0002\u055e\u0560\u0005\u0112",
  "\u008a\u0002\u055f\u055e\u0003\u0002\u0002\u0002\u055f\u0560\u0003\u0002",
  "\u0002\u0002\u0560\u0564\u0003\u0002\u0002\u0002\u0561\u0562\u0005\u014c",
  "\u00a7\u0002\u0562\u0563\u0007\u0010\u0002\u0002\u0563\u0565\u0003\u0002",
  "\u0002\u0002\u0564\u0561\u0003\u0002\u0002\u0002\u0564\u0565\u0003\u0002",
  "\u0002\u0002\u0565\u0566\u0003\u0002\u0002\u0002\u0566\u0567\u0005\u00de",
  "p\u0002\u0567\u0087\u0003\u0002\u0002\u0002\u0568\u0569\u0005\u0198",
  "\u00cd\u0002\u0569\u056b\u0005\u0274\u013b\u0002\u056a\u056c\u0005\u0110",
  "\u0089\u0002\u056b\u056a\u0003\u0002\u0002\u0002\u056b\u056c\u0003\u0002",
  "\u0002\u0002\u056c\u0570\u0003\u0002\u0002\u0002\u056d\u056e\u0005\u014c",
  "\u00a7\u0002\u056e\u056f\u0007\u0010\u0002\u0002\u056f\u0571\u0003\u0002",
  "\u0002\u0002\u0570\u056d\u0003\u0002\u0002\u0002\u0570\u0571\u0003\u0002",
  "\u0002\u0002\u0571\u0572\u0003\u0002\u0002\u0002\u0572\u0573\u0005\u014e",
  "\u00a8\u0002\u0573\u0574\u0005\u029a\u014e\u0002\u0574\u0575\u0005\u00a0",
  "Q\u0002\u0575\u0577\u0005\u029c\u014f\u0002\u0576\u0578\u0005\u008a",
  "F\u0002\u0577\u0576\u0003\u0002\u0002\u0002\u0577\u0578\u0003\u0002",
  "\u0002\u0002\u0578\u0089\u0003\u0002\u0002\u0002\u0579\u057b\u0005\u0294",
  "\u014b\u0002\u057a\u057c\u0005\u0090I\u0002\u057b\u057a\u0003\u0002",
  "\u0002\u0002\u057b\u057c\u0003\u0002\u0002\u0002\u057c\u008b\u0003\u0002",
  "\u0002\u0002\u057d\u057f\u0005\u0150\u00a9\u0002\u057e\u0580\u0005\u0158",
  "\u00ad\u0002\u057f\u057e\u0003\u0002\u0002\u0002\u057f\u0580\u0003\u0002",
  "\u0002\u0002\u0580\u0588\u0003\u0002\u0002\u0002\u0581\u0582\u0005\u02aa",
  "\u0156\u0002\u0582\u0584\u0005\u0150\u00a9\u0002\u0583\u0585\u0005\u0158",
  "\u00ad\u0002\u0584\u0583\u0003\u0002\u0002\u0002\u0584\u0585\u0003\u0002",
  "\u0002\u0002\u0585\u0587\u0003\u0002\u0002\u0002\u0586\u0581\u0003\u0002",
  "\u0002\u0002\u0587\u058a\u0003\u0002\u0002\u0002\u0588\u0586\u0003\u0002",
  "\u0002\u0002\u0588\u0589\u0003\u0002\u0002\u0002\u0589\u008d\u0003\u0002",
  "\u0002\u0002\u058a\u0588\u0003\u0002\u0002\u0002\u058b\u058c\u0005\u0192",
  "\u00ca\u0002\u058c\u058d\u0005\u0250\u0129\u0002\u058d\u058e\u0005\u018e",
  "\u00c8\u0002\u058e\u058f\u0005\u029a\u014e\u0002\u058f\u0590\u0005\u008c",
  "G\u0002\u0590\u0591\u0005\u029c\u014f\u0002\u0591\u008f\u0003\u0002",
  "\u0002\u0002\u0592\u0598\u0005\u0092J\u0002\u0593\u0594\u0005\u0180",
  "\u00c1\u0002\u0594\u0595\u0005\u0092J\u0002\u0595\u0597\u0003\u0002",
  "\u0002\u0002\u0596\u0593\u0003\u0002\u0002\u0002\u0597\u059a\u0003\u0002",
  "\u0002\u0002\u0598\u0596\u0003\u0002\u0002\u0002\u0598\u0599\u0003\u0002",
  "\u0002\u0002\u0599\u0091\u0003\u0002\u0002\u0002\u059a\u0598\u0003\u0002",
  "\u0002\u0002\u059b\u059c\u0005\u0094K\u0002\u059c\u059d\u0007\u00dd",
  "\u0002\u0002\u059d\u059e\u0005\u0096L\u0002\u059e\u05a5\u0003\u0002",
  "\u0002\u0002\u059f\u05a0\u0005\u0094K\u0002\u05a0\u05a1\u0007\u00dd",
  "\u0002\u0002\u05a1\u05a2\u0005\u0098M\u0002\u05a2\u05a5\u0003\u0002",
  "\u0002\u0002\u05a3\u05a5\u0005\u008eH\u0002\u05a4\u059b\u0003\u0002",
  "\u0002\u0002\u05a4\u059f\u0003\u0002\u0002\u0002\u05a4\u05a3\u0003\u0002",
  "\u0002\u0002\u05a5\u0093\u0003\u0002\u0002\u0002\u05a6\u05a7\u0005\u02ae",
  "\u0158\u0002\u05a7\u0095\u0003\u0002\u0002\u0002\u05a8\u05ac\u0005\u0146",
  "\u00a4\u0002\u05a9\u05ac\u0005\u0144\u00a3\u0002\u05aa\u05ac\u0005\u02ae",
  "\u0158\u0002\u05ab\u05a8\u0003\u0002\u0002\u0002\u05ab\u05a9\u0003\u0002",
  "\u0002\u0002\u05ab\u05aa\u0003\u0002\u0002\u0002\u05ac\u0097\u0003\u0002",
  "\u0002\u0002\u05ad\u05ae\u0005\u029e\u0150\u0002\u05ae\u05b4\u0005\u009a",
  "N\u0002\u05af\u05b0\u0005\u02aa\u0156\u0002\u05b0\u05b1\u0005\u009a",
  "N\u0002\u05b1\u05b3\u0003\u0002\u0002\u0002\u05b2\u05af\u0003\u0002",
  "\u0002\u0002\u05b3\u05b6\u0003\u0002\u0002\u0002\u05b4\u05b2\u0003\u0002",
  "\u0002\u0002\u05b4\u05b5\u0003\u0002\u0002\u0002\u05b5\u05b7\u0003\u0002",
  "\u0002\u0002\u05b6\u05b4\u0003\u0002\u0002\u0002\u05b7\u05b8\u0005\u02a0",
  "\u0151\u0002\u05b8\u0099\u0003\u0002\u0002\u0002\u05b9\u05ba\u0005\u009c",
  "O\u0002\u05ba\u05bb\u0007\u000b\u0002\u0002\u05bb\u05bc\u0005\u009e",
  "P\u0002\u05bc\u009b\u0003\u0002\u0002\u0002\u05bd\u05be\u0005\u0146",
  "\u00a4\u0002\u05be\u009d\u0003\u0002\u0002\u0002\u05bf\u05c3\u0005\u0146",
  "\u00a4\u0002\u05c0\u05c3\u0005\u0148\u00a5\u0002\u05c1\u05c3\u0005\u0144",
  "\u00a3\u0002\u05c2\u05bf\u0003\u0002\u0002\u0002\u05c2\u05c0\u0003\u0002",
  "\u0002\u0002\u05c2\u05c1\u0003\u0002\u0002\u0002\u05c3\u009f\u0003\u0002",
  "\u0002\u0002\u05c4\u05ca\u0005\u00a2R\u0002\u05c5\u05c6\u0005\u02aa",
  "\u0156\u0002\u05c6\u05c7\u0005\u00a2R\u0002\u05c7\u05c9\u0003\u0002",
  "\u0002\u0002\u05c8\u05c5\u0003\u0002\u0002\u0002\u05c9\u05cc\u0003\u0002",
  "\u0002\u0002\u05ca\u05c8\u0003\u0002\u0002\u0002\u05ca\u05cb\u0003\u0002",
  "\u0002\u0002\u05cb\u05d0\u0003\u0002\u0002\u0002\u05cc\u05ca\u0003\u0002",
  "\u0002\u0002\u05cd\u05ce\u0005\u02aa\u0156\u0002\u05ce\u05cf\u0005\u00a6",
  "T\u0002\u05cf\u05d1\u0003\u0002\u0002\u0002\u05d0\u05cd\u0003\u0002",
  "\u0002\u0002\u05d0\u05d1\u0003\u0002\u0002\u0002\u05d1\u00a1\u0003\u0002",
  "\u0002\u0002\u05d2\u05d3\u0005\u0150\u00a9\u0002\u05d3\u05d5\u0005\u0152",
  "\u00aa\u0002\u05d4\u05d6\u0005\u00a4S\u0002\u05d5\u05d4\u0003\u0002",
  "\u0002\u0002\u05d5\u05d6\u0003\u0002\u0002\u0002\u05d6\u00a3\u0003\u0002",
  "\u0002\u0002\u05d7\u05d8\u0005\u0254\u012b\u0002\u05d8\u05d9\u0005\u022a",
  "\u0116\u0002\u05d9\u00a5\u0003\u0002\u0002\u0002\u05da\u05db\u0005\u0254",
  "\u012b\u0002\u05db\u05dc\u0005\u022a\u0116\u0002\u05dc\u05dd\u0005\u029a",
  "\u014e\u0002\u05dd\u05de\u0005\u00a8U\u0002\u05de\u05df\u0005\u029c",
  "\u014f\u0002\u05df\u00a7\u0003\u0002\u0002\u0002\u05e0\u05e4\u0005\u00aa",
  "V\u0002\u05e1\u05e4\u0005\u00acW\u0002\u05e2\u05e4\u0005\u00aeX\u0002",
  "\u05e3\u05e0\u0003\u0002\u0002\u0002\u05e3\u05e1\u0003\u0002\u0002\u0002",
  "\u05e3\u05e2\u0003\u0002\u0002\u0002\u05e4\u00a9\u0003\u0002\u0002\u0002",
  "\u05e5\u05e6\u0005\u0150\u00a9\u0002\u05e6\u00ab\u0003\u0002\u0002\u0002",
  "\u05e7\u05eb\u0005\u00b4[\u0002\u05e8\u05e9\u0005\u02aa\u0156\u0002",
  "\u05e9\u05ea\u0005\u00b2Z\u0002\u05ea\u05ec\u0003\u0002\u0002\u0002",
  "\u05eb\u05e8\u0003\u0002\u0002\u0002\u05eb\u05ec\u0003\u0002\u0002\u0002",
  "\u05ec\u00ad\u0003\u0002\u0002\u0002\u05ed\u05ee\u0005\u029a\u014e\u0002",
  "\u05ee\u05ef\u0005\u00b0Y\u0002\u05ef\u05f3\u0005\u029c\u014f\u0002",
  "\u05f0\u05f1\u0005\u02aa\u0156\u0002\u05f1\u05f2\u0005\u00b2Z\u0002",
  "\u05f2\u05f4\u0003\u0002\u0002\u0002\u05f3\u05f0\u0003\u0002\u0002\u0002",
  "\u05f3\u05f4\u0003\u0002\u0002\u0002\u05f4\u00af\u0003\u0002\u0002\u0002",
  "\u05f5\u05fb\u0005\u00b4[\u0002\u05f6\u05f7\u0005\u02aa\u0156\u0002",
  "\u05f7\u05f8\u0005\u00b4[\u0002\u05f8\u05fa\u0003\u0002\u0002\u0002",
  "\u05f9\u05f6\u0003\u0002\u0002\u0002\u05fa\u05fd\u0003\u0002\u0002\u0002",
  "\u05fb\u05f9\u0003\u0002\u0002\u0002\u05fb\u05fc\u0003\u0002\u0002\u0002",
  "\u05fc\u00b1\u0003\u0002\u0002\u0002\u05fd\u05fb\u0003\u0002\u0002\u0002",
  "\u05fe\u0604\u0005\u00b6\\\u0002\u05ff\u0600\u0005\u02aa\u0156\u0002",
  "\u0600\u0601\u0005\u00b6\\\u0002\u0601\u0603\u0003\u0002\u0002\u0002",
  "\u0602\u05ff\u0003\u0002\u0002\u0002\u0603\u0606\u0003\u0002\u0002\u0002",
  "\u0604\u0602\u0003\u0002\u0002\u0002\u0604\u0605\u0003\u0002\u0002\u0002",
  "\u0605\u00b3\u0003\u0002\u0002\u0002\u0606\u0604\u0003\u0002\u0002\u0002",
  "\u0607\u0608\u0005\u0150\u00a9\u0002\u0608\u00b5\u0003\u0002\u0002\u0002",
  "\u0609\u060a\u0005\u0150\u00a9\u0002\u060a\u00b7\u0003\u0002\u0002\u0002",
  "\u060b\u060c\u0005\u0182\u00c2\u0002\u060c\u060d\u0005\u018a\u00c6\u0002",
  "\u060d\u00b9\u0003\u0002\u0002\u0002\u060e\u0610\u0005\u018c\u00c7\u0002",
  "\u060f\u0611\u0005\u00bc_\u0002\u0610\u060f\u0003\u0002\u0002\u0002",
  "\u0610\u0611\u0003\u0002\u0002\u0002\u0611\u0612\u0003\u0002\u0002\u0002",
  "\u0612\u0614\u0005\u018a\u00c6\u0002\u0613\u0615\u0005\u010e\u0088\u0002",
  "\u0614\u0613\u0003\u0002\u0002\u0002\u0614\u0615\u0003\u0002\u0002\u0002",
  "\u0615\u00bb\u0003\u0002\u0002\u0002\u0616\u0619\u0005\u0238\u011d\u0002",
  "\u0617\u0619\u0005\u0282\u0142\u0002\u0618\u0616\u0003\u0002\u0002\u0002",
  "\u0618\u0617\u0003\u0002\u0002\u0002\u0619\u00bd\u0003\u0002\u0002\u0002",
  "\u061a\u061b\u0005\u017e\u00c0\u0002\u061b\u061c\u0005\u022e\u0118\u0002",
  "\u061c\u061d\u0005\u014c\u00a7\u0002\u061d\u061e\u0005\u0294\u014b\u0002",
  "\u061e\u061f\u0005\u025a\u012e\u0002\u061f\u0620\u0007\u00dd\u0002\u0002",
  "\u0620\u0621\u0005\u029e\u0150\u0002\u0621\u0622\u0005\u00c0a\u0002",
  "\u0622\u0626\u0005\u02a0\u0151\u0002\u0623\u0624\u0005\u0180\u00c1\u0002",
  "\u0624\u0625\u0005\u00c4c\u0002\u0625\u0627\u0003\u0002\u0002\u0002",
  "\u0626\u0623\u0003\u0002\u0002\u0002\u0626\u0627\u0003\u0002\u0002\u0002",
  "\u0627\u00bf\u0003\u0002\u0002\u0002\u0628\u062e\u0005\u00c2b\u0002",
  "\u0629\u062a\u0005\u02aa\u0156\u0002\u062a\u062b\u0005\u00c2b\u0002",
  "\u062b\u062d\u0003\u0002\u0002\u0002\u062c\u0629\u0003\u0002\u0002\u0002",
  "\u062d\u0630\u0003\u0002\u0002\u0002\u062e\u062c\u0003\u0002\u0002\u0002",
  "\u062e\u062f\u0003\u0002\u0002\u0002\u062f\u00c1\u0003\u0002\u0002\u0002",
  "\u0630\u062e\u0003\u0002\u0002\u0002\u0631\u0632\u0007\u00d6\u0002\u0002",
  "\u0632\u0633\u0007\u000b\u0002\u0002\u0633\u0638\u0007\u00d6\u0002\u0002",
  "\u0634\u0635\u0007\u00d6\u0002\u0002\u0635\u0636\u0007\u000b\u0002\u0002",
  "\u0636\u0638\u0007\u00d7\u0002\u0002\u0637\u0631\u0003\u0002\u0002\u0002",
  "\u0637\u0634\u0003\u0002\u0002\u0002\u0638\u00c3\u0003\u0002\u0002\u0002",
  "\u0639\u063a\u0005\u01a4\u00d3\u0002\u063a\u063b\u0007\u00dd\u0002\u0002",
  "\u063b\u063c\u0005\u0148\u00a5\u0002\u063c\u00c5\u0003\u0002\u0002\u0002",
  "\u063d\u063e\u0005\u0286\u0144\u0002\u063e\u063f\u0005\u014c\u00a7\u0002",
  "\u063f\u00c7\u0003\u0002\u0002\u0002\u0640\u0642\u0005\u027c\u013f\u0002",
  "\u0641\u0643\u0005\u0274\u013b\u0002\u0642\u0641\u0003\u0002\u0002\u0002",
  "\u0642\u0643\u0003\u0002\u0002\u0002\u0643\u0647\u0003\u0002\u0002\u0002",
  "\u0644\u0645\u0005\u014c\u00a7\u0002\u0645\u0646\u0007\u0010\u0002\u0002",
  "\u0646\u0648\u0003\u0002\u0002\u0002\u0647\u0644\u0003\u0002\u0002\u0002",
  "\u0647\u0648\u0003\u0002\u0002\u0002\u0648\u0649\u0003\u0002\u0002\u0002",
  "\u0649\u064a\u0005\u014e\u00a8\u0002\u064a\u00c9\u0003\u0002\u0002\u0002",
  "\u064b\u064c\u0005\u0198\u00cd\u0002\u064c\u064e\u0005\u01be\u00e0\u0002",
  "\u064d\u064f\u0005\u0110\u0089\u0002\u064e\u064d\u0003\u0002\u0002\u0002",
  "\u064e\u064f\u0003\u0002\u0002\u0002\u064f\u0651\u0003\u0002\u0002\u0002",
  "\u0650\u0652\u0005\u00dep\u0002\u0651\u0650\u0003\u0002\u0002\u0002",
  "\u0651\u0652\u0003\u0002\u0002\u0002\u0652\u0653\u0003\u0002\u0002\u0002",
  "\u0653\u0657\u0005\u024a\u0126\u0002\u0654\u0655\u0005\u014c\u00a7\u0002",
  "\u0655\u0656\u0007\u0010\u0002\u0002\u0656\u0658\u0003\u0002\u0002\u0002",
  "\u0657\u0654\u0003\u0002\u0002\u0002\u0657\u0658\u0003\u0002\u0002\u0002",
  "\u0658\u0659\u0003\u0002\u0002\u0002\u0659\u065a\u0005\u014e\u00a8\u0002",
  "\u065a\u065b\u0005\u029a\u014e\u0002\u065b\u065c\u0005\u00e0q\u0002",
  "\u065c\u065d\u0005\u029c\u014f\u0002\u065d\u0685\u0003\u0002\u0002\u0002",
  "\u065e\u065f\u0005\u0198\u00cd\u0002\u065f\u0660\u0005\u01c0\u00e1\u0002",
  "\u0660\u0662\u0005\u01be\u00e0\u0002\u0661\u0663\u0005\u0110\u0089\u0002",
  "\u0662\u0661\u0003\u0002\u0002\u0002\u0662\u0663\u0003\u0002\u0002\u0002",
  "\u0663\u0665\u0003\u0002\u0002\u0002\u0664\u0666\u0005\u00dep\u0002",
  "\u0665\u0664\u0003\u0002\u0002\u0002\u0665\u0666\u0003\u0002\u0002\u0002",
  "\u0666\u0667\u0003\u0002\u0002\u0002\u0667\u066b\u0005\u024a\u0126\u0002",
  "\u0668\u0669\u0005\u014c\u00a7\u0002\u0669\u066a\u0007\u0010\u0002\u0002",
  "\u066a\u066c\u0003\u0002\u0002\u0002\u066b\u0668\u0003\u0002\u0002\u0002",
  "\u066b\u066c\u0003\u0002\u0002\u0002\u066c\u066d\u0003\u0002\u0002\u0002",
  "\u066d\u066e\u0005\u014e\u00a8\u0002\u066e\u066f\u0005\u029a\u014e\u0002",
  "\u066f\u0670\u0005\u00e0q\u0002\u0670\u0671\u0005\u029c\u014f\u0002",
  "\u0671\u0675\u0005\u028c\u0147\u0002\u0672\u0676\u0005\u01e0\u00f1\u0002",
  "\u0673\u0676\u0005\u01e4\u00f3\u0002\u0674\u0676\u0005\u01e2\u00f2\u0002",
  "\u0675\u0672\u0003\u0002\u0002\u0002\u0675\u0673\u0003\u0002\u0002\u0002",
  "\u0675\u0674\u0003\u0002\u0002\u0002\u0676\u0682\u0003\u0002\u0002\u0002",
  "\u0677\u0678\u0005\u0294\u014b\u0002\u0678\u0679\u0005\u024c\u0127\u0002",
  "\u0679\u067a\u0007\u00dd\u0002\u0002\u067a\u067c\u0007\u0005\u0002\u0002",
  "\u067b\u067d\u0005\u00ccg\u0002\u067c\u067b\u0003\u0002\u0002\u0002",
  "\u067d\u067e\u0003\u0002\u0002\u0002\u067e\u067c\u0003\u0002\u0002\u0002",
  "\u067e\u067f\u0003\u0002\u0002\u0002\u067f\u0680\u0003\u0002\u0002\u0002",
  "\u0680\u0681\u0007\u0006\u0002\u0002\u0681\u0683\u0003\u0002\u0002\u0002",
  "\u0682\u0677\u0003\u0002\u0002\u0002\u0682\u0683\u0003\u0002\u0002\u0002",
  "\u0683\u0685\u0003\u0002\u0002\u0002\u0684\u064b\u0003\u0002\u0002\u0002",
  "\u0684\u065e\u0003\u0002\u0002\u0002\u0685\u00cb\u0003\u0002\u0002\u0002",
  "\u0686\u0687\u0005\u021c\u010f\u0002\u0687\u0688\u0007\u000b\u0002\u0002",
  "\u0688\u068a\u0005\u0148\u00a5\u0002\u0689\u068b\u0007\t\u0002\u0002",
  "\u068a\u0689\u0003\u0002\u0002\u0002\u068a\u068b\u0003\u0002\u0002\u0002",
  "\u068b\u06e1\u0003\u0002\u0002\u0002\u068c\u068d\u0005\u01c6\u00e4\u0002",
  "\u068d\u068e\u0007\u000b\u0002\u0002\u068e\u0690\u0005\u0148\u00a5\u0002",
  "\u068f\u0691\u0007\t\u0002\u0002\u0690\u068f\u0003\u0002\u0002\u0002",
  "\u0690\u0691\u0003\u0002\u0002\u0002\u0691\u06e1\u0003\u0002\u0002\u0002",
  "\u0692\u0693\u0005\u01c4\u00e3\u0002\u0693\u0694\u0007\u000b\u0002\u0002",
  "\u0694\u0696\u0005\u0148\u00a5\u0002\u0695\u0697\u0007\t\u0002\u0002",
  "\u0696\u0695\u0003\u0002\u0002\u0002\u0696\u0697\u0003\u0002\u0002\u0002",
  "\u0697\u06e1\u0003\u0002\u0002\u0002\u0698\u0699\u0005\u01c8\u00e5\u0002",
  "\u0699\u069a\u0007\u000b\u0002\u0002\u069a\u069c\u0005\u0148\u00a5\u0002",
  "\u069b\u069d\u0007\t\u0002\u0002\u069c\u069b\u0003\u0002\u0002\u0002",
  "\u069c\u069d\u0003\u0002\u0002\u0002\u069d\u06e1\u0003\u0002\u0002\u0002",
  "\u069e\u069f\u0005\u01ca\u00e6\u0002\u069f\u06a0\u0007\u000b\u0002\u0002",
  "\u06a0\u06a2\u0005\u0148\u00a5\u0002\u06a1\u06a3\u0007\t\u0002\u0002",
  "\u06a2\u06a1\u0003\u0002\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002",
  "\u06a3\u06e1\u0003\u0002\u0002\u0002\u06a4\u06a5\u0005\u01ce\u00e8\u0002",
  "\u06a5\u06a6\u0007\u000b\u0002\u0002\u06a6\u06a8\u0005\u0148\u00a5\u0002",
  "\u06a7\u06a9\u0007\t\u0002\u0002\u06a8\u06a7\u0003\u0002\u0002\u0002",
  "\u06a8\u06a9\u0003\u0002\u0002\u0002\u06a9\u06e1\u0003\u0002\u0002\u0002",
  "\u06aa\u06ab\u0005\u01d4\u00eb\u0002\u06ab\u06ac\u0007\u000b\u0002\u0002",
  "\u06ac\u06ae\u0005\u0148\u00a5\u0002\u06ad\u06af\u0007\t\u0002\u0002",
  "\u06ae\u06ad\u0003\u0002\u0002\u0002\u06ae\u06af\u0003\u0002\u0002\u0002",
  "\u06af\u06e1\u0003\u0002\u0002\u0002\u06b0\u06b1\u0005\u01d6\u00ec\u0002",
  "\u06b1\u06b2\u0007\u000b\u0002\u0002\u06b2\u06b4\u0005\u0148\u00a5\u0002",
  "\u06b3\u06b5\u0007\t\u0002\u0002\u06b4\u06b3\u0003\u0002\u0002\u0002",
  "\u06b4\u06b5\u0003\u0002\u0002\u0002\u06b5\u06e1\u0003\u0002\u0002\u0002",
  "\u06b6\u06b7\u0005\u01da\u00ee\u0002\u06b7\u06b8\u0007\u000b\u0002\u0002",
  "\u06b8\u06ba\u0005\u0148\u00a5\u0002\u06b9\u06bb\u0007\t\u0002\u0002",
  "\u06ba\u06b9\u0003\u0002\u0002\u0002\u06ba\u06bb\u0003\u0002\u0002\u0002",
  "\u06bb\u06e1\u0003\u0002\u0002\u0002\u06bc\u06bd\u0005\u01d8\u00ed\u0002",
  "\u06bd\u06be\u0007\u000b\u0002\u0002\u06be\u06c0\u0005\u0148\u00a5\u0002",
  "\u06bf\u06c1\u0007\t\u0002\u0002\u06c0\u06bf\u0003\u0002\u0002\u0002",
  "\u06c0\u06c1\u0003\u0002\u0002\u0002\u06c1\u06e1\u0003\u0002\u0002\u0002",
  "\u06c2\u06c3\u0005\u01cc\u00e7\u0002\u06c3\u06c4\u0007\u000b\u0002\u0002",
  "\u06c4\u06c6\u0005\u0146\u00a4\u0002\u06c5\u06c7\u0007\t\u0002\u0002",
  "\u06c6\u06c5\u0003\u0002\u0002\u0002\u06c6\u06c7\u0003\u0002\u0002\u0002",
  "\u06c7\u06e1\u0003\u0002\u0002\u0002\u06c8\u06c9\u0005\u01dc\u00ef\u0002",
  "\u06c9\u06ca\u0007\u000b\u0002\u0002\u06ca\u06cc\u0005\u0146\u00a4\u0002",
  "\u06cb\u06cd\u0007\t\u0002\u0002\u06cc\u06cb\u0003\u0002\u0002\u0002",
  "\u06cc\u06cd\u0003\u0002\u0002\u0002\u06cd\u06e1\u0003\u0002\u0002\u0002",
  "\u06ce\u06cf\u0005\u01de\u00f0\u0002\u06cf\u06d0\u0007\u000b\u0002\u0002",
  "\u06d0\u06d2\u0005\u0146\u00a4\u0002\u06d1\u06d3\u0007\t\u0002\u0002",
  "\u06d2\u06d1\u0003\u0002\u0002\u0002\u06d2\u06d3\u0003\u0002\u0002\u0002",
  "\u06d3\u06e1\u0003\u0002\u0002\u0002\u06d4\u06d5\u0005\u01d2\u00ea\u0002",
  "\u06d5\u06d6\u0007\u000b\u0002\u0002\u06d6\u06d8\u0005\u0146\u00a4\u0002",
  "\u06d7\u06d9\u0007\t\u0002\u0002\u06d8\u06d7\u0003\u0002\u0002\u0002",
  "\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9\u06e1\u0003\u0002\u0002\u0002",
  "\u06da\u06db\u0005\u01d0\u00e9\u0002\u06db\u06dc\u0007\u000b\u0002\u0002",
  "\u06dc\u06de\u0005\u0146\u00a4\u0002\u06dd\u06df\u0007\t\u0002\u0002",
  "\u06de\u06dd\u0003\u0002\u0002\u0002\u06de\u06df\u0003\u0002\u0002\u0002",
  "\u06df\u06e1\u0003\u0002\u0002\u0002\u06e0\u0686\u0003\u0002\u0002\u0002",
  "\u06e0\u068c\u0003\u0002\u0002\u0002\u06e0\u0692\u0003\u0002\u0002\u0002",
  "\u06e0\u0698\u0003\u0002\u0002\u0002\u06e0\u069e\u0003\u0002\u0002\u0002",
  "\u06e0\u06a4\u0003\u0002\u0002\u0002\u06e0\u06aa\u0003\u0002\u0002\u0002",
  "\u06e0\u06b0\u0003\u0002\u0002\u0002\u06e0\u06b6\u0003\u0002\u0002\u0002",
  "\u06e0\u06bc\u0003\u0002\u0002\u0002\u06e0\u06c2\u0003\u0002\u0002\u0002",
  "\u06e0\u06c8\u0003\u0002\u0002\u0002\u06e0\u06ce\u0003\u0002\u0002\u0002",
  "\u06e0\u06d4\u0003\u0002\u0002\u0002\u06e0\u06da\u0003\u0002\u0002\u0002",
  "\u06e1\u00cd\u0003\u0002\u0002\u0002\u06e2\u06e3\u0005\u0198\u00cd\u0002",
  "\u06e3\u06e4\u0005\u01c2\u00e2\u0002\u06e4\u06e6\u0005\u01be\u00e0\u0002",
  "\u06e5\u06e7\u0005\u0110\u0089\u0002\u06e6\u06e5\u0003\u0002\u0002\u0002",
  "\u06e6\u06e7\u0003\u0002\u0002\u0002\u06e7\u06e8\u0003\u0002\u0002\u0002",
  "\u06e8\u06ec\u0005\u024a\u0126\u0002\u06e9\u06ea\u0005\u014c\u00a7\u0002",
  "\u06ea\u06eb\u0007\u0010\u0002\u0002\u06eb\u06ed\u0003\u0002\u0002\u0002",
  "\u06ec\u06e9\u0003\u0002\u0002\u0002\u06ec\u06ed\u0003\u0002\u0002\u0002",
  "\u06ed\u06ee\u0003\u0002\u0002\u0002\u06ee\u0709\u0005\u014e\u00a8\u0002",
  "\u06ef\u06f3\u0007\u0091\u0002\u0002\u06f0\u06f1\u0005\u01f8\u00fd\u0002",
  "\u06f1\u06f2\u0005\u00dan\u0002\u06f2\u06f4\u0003\u0002\u0002\u0002",
  "\u06f3\u06f0\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003\u0002\u0002\u0002",
  "\u06f4\u06fb\u0003\u0002\u0002\u0002\u06f5\u06f7\u0005\u0180\u00c1\u0002",
  "\u06f6\u06f5\u0003\u0002\u0002\u0002\u06f6\u06f7\u0003\u0002\u0002\u0002",
  "\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06f9\u0005\u01fa\u00fe\u0002",
  "\u06f9\u06fa\u0005\u00d8m\u0002\u06fa\u06fc\u0003\u0002\u0002\u0002",
  "\u06fb\u06f6\u0003\u0002\u0002\u0002\u06fb\u06fc\u0003\u0002\u0002\u0002",
  "\u06fc\u0701\u0003\u0002\u0002\u0002\u06fd\u06ff\u0005\u0180\u00c1\u0002",
  "\u06fe\u06fd\u0003\u0002\u0002\u0002\u06fe\u06ff\u0003\u0002\u0002\u0002",
  "\u06ff\u0700\u0003\u0002\u0002\u0002\u0700\u0702\u0005\u00d0i\u0002",
  "\u0701\u06fe\u0003\u0002\u0002\u0002\u0701\u0702\u0003\u0002\u0002\u0002",
  "\u0702\u0707\u0003\u0002\u0002\u0002\u0703\u0705\u0005\u0180\u00c1\u0002",
  "\u0704\u0703\u0003\u0002\u0002\u0002\u0704\u0705\u0003\u0002\u0002\u0002",
  "\u0705\u0706\u0003\u0002\u0002\u0002\u0706\u0708\u0005\u00d4k\u0002",
  "\u0707\u0704\u0003\u0002\u0002\u0002\u0707\u0708\u0003\u0002\u0002\u0002",
  "\u0708\u070a\u0003\u0002\u0002\u0002\u0709\u06ef\u0003\u0002\u0002\u0002",
  "\u0709\u070a\u0003\u0002\u0002\u0002\u070a\u00cf\u0003\u0002\u0002\u0002",
  "\u070b\u070c\u0005\u01fc\u00ff\u0002\u070c\u0711\u0007\u0005\u0002\u0002",
  "\u070d\u070e\u0005\u01fe\u0100\u0002\u070e\u070f\u0007\u000b\u0002\u0002",
  "\u070f\u0710\u0005\u0142\u00a2\u0002\u0710\u0712\u0003\u0002\u0002\u0002",
  "\u0711\u070d\u0003\u0002\u0002\u0002\u0711\u0712\u0003\u0002\u0002\u0002",
  "\u0712\u071a\u0003\u0002\u0002\u0002\u0713\u0715\u0005\u02aa\u0156\u0002",
  "\u0714\u0713\u0003\u0002\u0002\u0002\u0714\u0715\u0003\u0002\u0002\u0002",
  "\u0715\u0716\u0003\u0002\u0002\u0002\u0716\u0717\u0005\u0200\u0101\u0002",
  "\u0717\u0718\u0007\u000b\u0002\u0002\u0718\u0719\u0005\u0146\u00a4\u0002",
  "\u0719\u071b\u0003\u0002\u0002\u0002\u071a\u0714\u0003\u0002\u0002\u0002",
  "\u071a\u071b\u0003\u0002\u0002\u0002\u071b\u0723\u0003\u0002\u0002\u0002",
  "\u071c\u071e\u0005\u02aa\u0156\u0002\u071d\u071c\u0003\u0002\u0002\u0002",
  "\u071d\u071e\u0003\u0002\u0002\u0002\u071e\u071f\u0003\u0002\u0002\u0002",
  "\u071f\u0720\u0005\u0202\u0102\u0002\u0720\u0721\u0007\u000b\u0002\u0002",
  "\u0721\u0722\u0005\u00d2j\u0002\u0722\u0724\u0003\u0002\u0002\u0002",
  "\u0723\u071d\u0003\u0002\u0002\u0002\u0723\u0724\u0003\u0002\u0002\u0002",
  "\u0724\u072c\u0003\u0002\u0002\u0002\u0725\u0727\u0005\u02aa\u0156\u0002",
  "\u0726\u0725\u0003\u0002\u0002\u0002\u0726\u0727\u0003\u0002\u0002\u0002",
  "\u0727\u0728\u0003\u0002\u0002\u0002\u0728\u0729\u0005\u0204\u0103\u0002",
  "\u0729\u072a\u0007\u000b\u0002\u0002\u072a\u072b\u0005\u0142\u00a2\u0002",
  "\u072b\u072d\u0003\u0002\u0002\u0002\u072c\u0726\u0003\u0002\u0002\u0002",
  "\u072c\u072d\u0003\u0002\u0002\u0002\u072d\u0735\u0003\u0002\u0002\u0002",
  "\u072e\u0730\u0005\u02aa\u0156\u0002\u072f\u072e\u0003\u0002\u0002\u0002",
  "\u072f\u0730\u0003\u0002\u0002\u0002\u0730\u0731\u0003\u0002\u0002\u0002",
  "\u0731\u0732\u0005\u0206\u0104\u0002\u0732\u0733\u0007\u000b\u0002\u0002",
  "\u0733\u0734\u0005\u0142\u00a2\u0002\u0734\u0736\u0003\u0002\u0002\u0002",
  "\u0735\u072f\u0003\u0002\u0002\u0002\u0735\u0736\u0003\u0002\u0002\u0002",
  "\u0736\u073e\u0003\u0002\u0002\u0002\u0737\u0739\u0005\u02aa\u0156\u0002",
  "\u0738\u0737\u0003\u0002\u0002\u0002\u0738\u0739\u0003\u0002\u0002\u0002",
  "\u0739\u073a\u0003\u0002\u0002\u0002\u073a\u073b\u0005\u0208\u0105\u0002",
  "\u073b\u073c\u0007\u000b\u0002\u0002\u073c\u073d\u0005\u0146\u00a4\u0002",
  "\u073d\u073f\u0003\u0002\u0002\u0002\u073e\u0738\u0003\u0002\u0002\u0002",
  "\u073e\u073f\u0003\u0002\u0002\u0002\u073f\u0747\u0003\u0002\u0002\u0002",
  "\u0740\u0742\u0005\u02aa\u0156\u0002\u0741\u0740\u0003\u0002\u0002\u0002",
  "\u0741\u0742\u0003\u0002\u0002\u0002\u0742\u0743\u0003\u0002\u0002\u0002",
  "\u0743\u0744\u0005\u020a\u0106\u0002\u0744\u0745\u0007\u000b\u0002\u0002",
  "\u0745\u0746\u0005\u0142\u00a2\u0002\u0746\u0748\u0003\u0002\u0002\u0002",
  "\u0747\u0741\u0003\u0002\u0002\u0002\u0747\u0748\u0003\u0002\u0002\u0002",
  "\u0748\u0750\u0003\u0002\u0002\u0002\u0749\u074b\u0005\u02aa\u0156\u0002",
  "\u074a\u0749\u0003\u0002\u0002\u0002\u074a\u074b\u0003\u0002\u0002\u0002",
  "\u074b\u074c\u0003\u0002\u0002\u0002\u074c\u074d\u0005\u020c\u0107\u0002",
  "\u074d\u074e\u0007\u000b\u0002\u0002\u074e\u074f\u0005\u0142\u00a2\u0002",
  "\u074f\u0751\u0003\u0002\u0002\u0002\u0750\u074a\u0003\u0002\u0002\u0002",
  "\u0750\u0751\u0003\u0002\u0002\u0002\u0751\u0759\u0003\u0002\u0002\u0002",
  "\u0752\u0754\u0005\u02aa\u0156\u0002\u0753\u0752\u0003\u0002\u0002\u0002",
  "\u0753\u0754\u0003\u0002\u0002\u0002\u0754\u0755\u0003\u0002\u0002\u0002",
  "\u0755\u0756\u0005\u020e\u0108\u0002\u0756\u0757\u0007\u000b\u0002\u0002",
  "\u0757\u0758\u0005\u0142\u00a2\u0002\u0758\u075a\u0003\u0002\u0002\u0002",
  "\u0759\u0753\u0003\u0002\u0002\u0002\u0759\u075a\u0003\u0002\u0002\u0002",
  "\u075a\u0762\u0003\u0002\u0002\u0002\u075b\u075d\u0005\u02aa\u0156\u0002",
  "\u075c\u075b\u0003\u0002\u0002\u0002\u075c\u075d\u0003\u0002\u0002\u0002",
  "\u075d\u075e\u0003\u0002\u0002\u0002\u075e\u075f\u0005\u0210\u0109\u0002",
  "\u075f\u0760\u0007\u000b\u0002\u0002\u0760\u0761\u0005\u0148\u00a5\u0002",
  "\u0761\u0763\u0003\u0002\u0002\u0002\u0762\u075c\u0003\u0002\u0002\u0002",
  "\u0762\u0763\u0003\u0002\u0002\u0002\u0763\u0764\u0003\u0002\u0002\u0002",
  "\u0764\u0765\u0007\u0006\u0002\u0002\u0765\u00d1\u0003\u0002\u0002\u0002",
  "\u0766\u0769\u0005\u0218\u010d\u0002\u0767\u0769\u0005\u021a\u010e\u0002",
  "\u0768\u0766\u0003\u0002\u0002\u0002\u0768\u0767\u0003\u0002\u0002\u0002",
  "\u0769\u00d3\u0003\u0002\u0002\u0002\u076a\u076b\u0005\u024c\u0127\u0002",
  "\u076b\u0770\u0007\u0005\u0002\u0002\u076c\u076d\u0005\u0212\u010a\u0002",
  "\u076d\u076e\u0007\u000b\u0002\u0002\u076e\u076f\u0005\u0148\u00a5\u0002",
  "\u076f\u0771\u0003\u0002\u0002\u0002\u0770\u076c\u0003\u0002\u0002\u0002",
  "\u0770\u0771\u0003\u0002\u0002\u0002\u0771\u0779\u0003\u0002\u0002\u0002",
  "\u0772\u0774\u0005\u02aa\u0156\u0002\u0773\u0772\u0003\u0002\u0002\u0002",
  "\u0773\u0774\u0003\u0002\u0002\u0002\u0774\u0775\u0003\u0002\u0002\u0002",
  "\u0775\u0776\u0005\u0214\u010b\u0002\u0776\u0777\u0007\u000b\u0002\u0002",
  "\u0777\u0778\u0005\u0148\u00a5\u0002\u0778\u077a\u0003\u0002\u0002\u0002",
  "\u0779\u0773\u0003\u0002\u0002\u0002\u0779\u077a\u0003\u0002\u0002\u0002",
  "\u077a\u0782\u0003\u0002\u0002\u0002\u077b\u077d\u0005\u02aa\u0156\u0002",
  "\u077c\u077b\u0003\u0002\u0002\u0002\u077c\u077d\u0003\u0002\u0002\u0002",
  "\u077d\u077e\u0003\u0002\u0002\u0002\u077e\u077f\u0005\u0216\u010c\u0002",
  "\u077f\u0780\u0007\u000b\u0002\u0002\u0780\u0781\u0005\u0148\u00a5\u0002",
  "\u0781\u0783\u0003\u0002\u0002\u0002\u0782\u077c\u0003\u0002\u0002\u0002",
  "\u0782\u0783\u0003\u0002\u0002\u0002\u0783\u0784\u0003\u0002\u0002\u0002",
  "\u0784\u0785\u0007\u0006\u0002\u0002\u0785\u00d5\u0003\u0002\u0002\u0002",
  "\u0786\u078b\u0005\u01e8\u00f5\u0002\u0787\u078b\u0005\u01e6\u00f4\u0002",
  "\u0788\u078b\u0005\u01ea\u00f6\u0002\u0789\u078b\u0005\u01ec\u00f7\u0002",
  "\u078a\u0786\u0003\u0002\u0002\u0002\u078a\u0787\u0003\u0002\u0002\u0002",
  "\u078a\u0788\u0003\u0002\u0002\u0002\u078a\u0789\u0003\u0002\u0002\u0002",
  "\u078b\u00d7\u0003\u0002\u0002\u0002\u078c\u0792\u0005\u00d6l\u0002",
  "\u078d\u078e\u0005\u02aa\u0156\u0002\u078e\u078f\u0005\u00d6l\u0002",
  "\u078f\u0791\u0003\u0002\u0002\u0002\u0790\u078d\u0003\u0002\u0002\u0002",
  "\u0791\u0794\u0003\u0002\u0002\u0002\u0792\u0790\u0003\u0002\u0002\u0002",
  "\u0792\u0793\u0003\u0002\u0002\u0002\u0793\u00d9\u0003\u0002\u0002\u0002",
  "\u0794\u0792\u0003\u0002\u0002\u0002\u0795\u079b\u0005\u00dco\u0002",
  "\u0796\u0797\u0005\u02aa\u0156\u0002\u0797\u0798\u0005\u00dco\u0002",
  "\u0798\u079a\u0003\u0002\u0002\u0002\u0799\u0796\u0003\u0002\u0002\u0002",
  "\u079a\u079d\u0003\u0002\u0002\u0002\u079b\u0799\u0003\u0002\u0002\u0002",
  "\u079b\u079c\u0003\u0002\u0002\u0002\u079c\u00db\u0003\u0002\u0002\u0002",
  "\u079d\u079b\u0003\u0002\u0002\u0002\u079e\u07cb\u0005\u0150\u00a9\u0002",
  "\u079f\u07a4\u0007\u0005\u0002\u0002\u07a0\u07a1\u0005\u01ee\u00f8\u0002",
  "\u07a1\u07a2\u0007\u000b\u0002\u0002\u07a2\u07a3\u0005\u0148\u00a5\u0002",
  "\u07a3\u07a5\u0003\u0002\u0002\u0002\u07a4\u07a0\u0003\u0002\u0002\u0002",
  "\u07a4\u07a5\u0003\u0002\u0002\u0002\u07a5\u07ad\u0003\u0002\u0002\u0002",
  "\u07a6\u07a8\u0005\u02aa\u0156\u0002\u07a7\u07a6\u0003\u0002\u0002\u0002",
  "\u07a7\u07a8\u0003\u0002\u0002\u0002\u07a8\u07a9\u0003\u0002\u0002\u0002",
  "\u07a9\u07aa\u0005\u01f0\u00f9\u0002\u07aa\u07ab\u0007\u000b\u0002\u0002",
  "\u07ab\u07ac\u0005\u0148\u00a5\u0002\u07ac\u07ae\u0003\u0002\u0002\u0002",
  "\u07ad\u07a7\u0003\u0002\u0002\u0002\u07ad\u07ae\u0003\u0002\u0002\u0002",
  "\u07ae\u07b6\u0003\u0002\u0002\u0002\u07af\u07b1\u0005\u02aa\u0156\u0002",
  "\u07b0\u07af\u0003\u0002\u0002\u0002\u07b0\u07b1\u0003\u0002\u0002\u0002",
  "\u07b1\u07b2\u0003\u0002\u0002\u0002\u07b2\u07b3\u0005\u01f2\u00fa\u0002",
  "\u07b3\u07b4\u0007\u000b\u0002\u0002\u07b4\u07b5\u0005\u0148\u00a5\u0002",
  "\u07b5\u07b7\u0003\u0002\u0002\u0002\u07b6\u07b0\u0003\u0002\u0002\u0002",
  "\u07b6\u07b7\u0003\u0002\u0002\u0002\u07b7\u07bf\u0003\u0002\u0002\u0002",
  "\u07b8\u07ba\u0005\u02aa\u0156\u0002\u07b9\u07b8\u0003\u0002\u0002\u0002",
  "\u07b9\u07ba\u0003\u0002\u0002\u0002\u07ba\u07bb\u0003\u0002\u0002\u0002",
  "\u07bb\u07bc\u0005\u01f4\u00fb\u0002\u07bc\u07bd\u0007\u000b\u0002\u0002",
  "\u07bd\u07be\u0005\u0148\u00a5\u0002\u07be\u07c0\u0003\u0002\u0002\u0002",
  "\u07bf\u07b9\u0003\u0002\u0002\u0002\u07bf\u07c0\u0003\u0002\u0002\u0002",
  "\u07c0\u07c8\u0003\u0002\u0002\u0002\u07c1\u07c3\u0005\u02aa\u0156\u0002",
  "\u07c2\u07c1\u0003\u0002\u0002\u0002\u07c2\u07c3\u0003\u0002\u0002\u0002",
  "\u07c3\u07c4\u0003\u0002\u0002\u0002\u07c4\u07c5\u0005\u01f6\u00fc\u0002",
  "\u07c5\u07c6\u0007\u000b\u0002\u0002\u07c6\u07c7\u0005\u0148\u00a5\u0002",
  "\u07c7\u07c9\u0003\u0002\u0002\u0002\u07c8\u07c2\u0003\u0002\u0002\u0002",
  "\u07c8\u07c9\u0003\u0002\u0002\u0002\u07c9\u07ca\u0003\u0002\u0002\u0002",
  "\u07ca\u07cc\u0007\u0006\u0002\u0002\u07cb\u079f\u0003\u0002\u0002\u0002",
  "\u07cb\u07cc\u0003\u0002\u0002\u0002\u07cc\u07fd\u0003\u0002\u0002\u0002",
  "\u07cd\u07fa\u0007\u0011\u0002\u0002\u07ce\u07d3\u0007\u0005\u0002\u0002",
  "\u07cf\u07d0\u0005\u01ee\u00f8\u0002\u07d0\u07d1\u0007\u000b\u0002\u0002",
  "\u07d1\u07d2\u0005\u0148\u00a5\u0002\u07d2\u07d4\u0003\u0002\u0002\u0002",
  "\u07d3\u07cf\u0003\u0002\u0002\u0002\u07d3\u07d4\u0003\u0002\u0002\u0002",
  "\u07d4\u07dc\u0003\u0002\u0002\u0002\u07d5\u07d7\u0005\u02aa\u0156\u0002",
  "\u07d6\u07d5\u0003\u0002\u0002\u0002\u07d6\u07d7\u0003\u0002\u0002\u0002",
  "\u07d7\u07d8\u0003\u0002\u0002\u0002\u07d8\u07d9\u0005\u01f0\u00f9\u0002",
  "\u07d9\u07da\u0007\u000b\u0002\u0002\u07da\u07db\u0005\u0148\u00a5\u0002",
  "\u07db\u07dd\u0003\u0002\u0002\u0002\u07dc\u07d6\u0003\u0002\u0002\u0002",
  "\u07dc\u07dd\u0003\u0002\u0002\u0002\u07dd\u07e5\u0003\u0002\u0002\u0002",
  "\u07de\u07e0\u0005\u02aa\u0156\u0002\u07df\u07de\u0003\u0002\u0002\u0002",
  "\u07df\u07e0\u0003\u0002\u0002\u0002\u07e0\u07e1\u0003\u0002\u0002\u0002",
  "\u07e1\u07e2\u0005\u01f2\u00fa\u0002\u07e2\u07e3\u0007\u000b\u0002\u0002",
  "\u07e3\u07e4\u0005\u0148\u00a5\u0002\u07e4\u07e6\u0003\u0002\u0002\u0002",
  "\u07e5\u07df\u0003\u0002\u0002\u0002\u07e5\u07e6\u0003\u0002\u0002\u0002",
  "\u07e6\u07ee\u0003\u0002\u0002\u0002\u07e7\u07e9\u0005\u02aa\u0156\u0002",
  "\u07e8\u07e7\u0003\u0002\u0002\u0002\u07e8\u07e9\u0003\u0002\u0002\u0002",
  "\u07e9\u07ea\u0003\u0002\u0002\u0002\u07ea\u07eb\u0005\u01f4\u00fb\u0002",
  "\u07eb\u07ec\u0007\u000b\u0002\u0002\u07ec\u07ed\u0005\u0148\u00a5\u0002",
  "\u07ed\u07ef\u0003\u0002\u0002\u0002\u07ee\u07e8\u0003\u0002\u0002\u0002",
  "\u07ee\u07ef\u0003\u0002\u0002\u0002\u07ef\u07f7\u0003\u0002\u0002\u0002",
  "\u07f0\u07f2\u0005\u02aa\u0156\u0002\u07f1\u07f0\u0003\u0002\u0002\u0002",
  "\u07f1\u07f2\u0003\u0002\u0002\u0002\u07f2\u07f3\u0003\u0002\u0002\u0002",
  "\u07f3\u07f4\u0005\u01f6\u00fc\u0002\u07f4\u07f5\u0007\u000b\u0002\u0002",
  "\u07f5\u07f6\u0005\u0148\u00a5\u0002\u07f6\u07f8\u0003\u0002\u0002\u0002",
  "\u07f7\u07f1\u0003\u0002\u0002\u0002\u07f7\u07f8\u0003\u0002\u0002\u0002",
  "\u07f8\u07f9\u0003\u0002\u0002\u0002\u07f9\u07fb\u0007\u0006\u0002\u0002",
  "\u07fa\u07ce\u0003\u0002\u0002\u0002\u07fa\u07fb\u0003\u0002\u0002\u0002",
  "\u07fb\u07fd\u0003\u0002\u0002\u0002\u07fc\u079e\u0003\u0002\u0002\u0002",
  "\u07fc\u07cd\u0003\u0002\u0002\u0002\u07fd\u00dd\u0003\u0002\u0002\u0002",
  "\u07fe\u0801\u0005\u02ae\u0158\u0002\u07ff\u0801\u0005\u0146\u00a4\u0002",
  "\u0800\u07fe\u0003\u0002\u0002\u0002\u0800\u07ff\u0003\u0002\u0002\u0002",
  "\u0801\u00df\u0003\u0002\u0002\u0002\u0802\u0808\u0005\u0150\u00a9\u0002",
  "\u0803\u0808\u0005\u00e2r\u0002\u0804\u0808\u0005\u00e4s\u0002\u0805",
  "\u0808\u0005\u00e6t\u0002\u0806\u0808\u0005\u00e8u\u0002\u0807\u0802",
  "\u0003\u0002\u0002\u0002\u0807\u0803\u0003\u0002\u0002\u0002\u0807\u0804",
  "\u0003\u0002\u0002\u0002\u0807\u0805\u0003\u0002\u0002\u0002\u0807\u0806",
  "\u0003\u0002\u0002\u0002\u0808\u00e1\u0003\u0002\u0002\u0002\u0809\u080a",
  "\u0005\u022c\u0117\u0002\u080a\u080b\u0005\u029a\u014e\u0002\u080b\u080c",
  "\u0005\u0150\u00a9\u0002\u080c\u080d\u0005\u029c\u014f\u0002\u080d\u00e3",
  "\u0003\u0002\u0002\u0002\u080e\u080f\u0005\u01a6\u00d4\u0002\u080f\u0810",
  "\u0005\u029a\u014e\u0002\u0810\u0811\u0005\u0150\u00a9\u0002\u0811\u0812",
  "\u0005\u029c\u014f\u0002\u0812\u00e5\u0003\u0002\u0002\u0002\u0813\u0814",
  "\u0005\u01b2\u00da\u0002\u0814\u0815\u0005\u029a\u014e\u0002\u0815\u0816",
  "\u0005\u0150\u00a9\u0002\u0816\u0817\u0005\u029c\u014f\u0002\u0817\u00e7",
  "\u0003\u0002\u0002\u0002\u0818\u0819\u0005\u028e\u0148\u0002\u0819\u081a",
  "\u0005\u029a\u014e\u0002\u081a\u081b\u0005\u0150\u00a9\u0002\u081b\u081c",
  "\u0005\u029c\u014f\u0002\u081c\u00e9\u0003\u0002\u0002\u0002\u081d\u081f",
  "\u0005\u00ba^\u0002\u081e\u081d\u0003\u0002\u0002\u0002\u081e\u081f",
  "\u0003\u0002\u0002\u0002\u081f\u0820\u0003\u0002\u0002\u0002\u0820\u0822",
  "\u0005\u019a\u00ce\u0002\u0821\u0823\u0005\u00ecw\u0002\u0822\u0821",
  "\u0003\u0002\u0002\u0002\u0822\u0823\u0003\u0002\u0002\u0002\u0823\u0824",
  "\u0003\u0002\u0002\u0002\u0824\u0826\u0005\u0124\u0093\u0002\u0825\u0827",
  "\u0005\u010e\u0088\u0002\u0826\u0825\u0003\u0002\u0002\u0002\u0826\u0827",
  "\u0003\u0002\u0002\u0002\u0827\u0828\u0003\u0002\u0002\u0002\u0828\u082b",
  "\u0005\u012c\u0097\u0002\u0829\u082c\u0005\u0112\u008a\u0002\u082a\u082c",
  "\u0005\u00f2z\u0002\u082b\u0829\u0003\u0002\u0002\u0002\u082b\u082a",
  "\u0003\u0002\u0002\u0002\u082b\u082c\u0003\u0002\u0002\u0002\u082c\u00eb",
  "\u0003\u0002\u0002\u0002\u082d\u0833\u0005\u00eex\u0002\u082e\u082f",
  "\u0005\u02aa\u0156\u0002\u082f\u0830\u0005\u00eex\u0002\u0830\u0832",
  "\u0003\u0002\u0002\u0002\u0831\u082e\u0003\u0002\u0002\u0002\u0832\u0835",
  "\u0003\u0002\u0002\u0002\u0833\u0831\u0003\u0002\u0002\u0002\u0833\u0834",
  "\u0003\u0002\u0002\u0002\u0834\u00ed\u0003\u0002\u0002\u0002\u0835\u0833",
  "\u0003\u0002\u0002\u0002\u0836\u0840\u0005\u02ae\u0158\u0002\u0837\u0838",
  "\u0005\u02ae\u0158\u0002\u0838\u083b\u0007\u0007\u0002\u0002\u0839\u083c",
  "\u0005\u0146\u00a4\u0002\u083a\u083c\u0005\u0142\u00a2\u0002\u083b\u0839",
  "\u0003\u0002\u0002\u0002\u083b\u083a\u0003\u0002\u0002\u0002\u083c\u083d",
  "\u0003\u0002\u0002\u0002\u083d\u083e\u0007\b\u0002\u0002\u083e\u0840",
  "\u0003\u0002\u0002\u0002\u083f\u0836\u0003\u0002\u0002\u0002\u083f\u0837",
  "\u0003\u0002\u0002\u0002\u0840\u00ef\u0003\u0002\u0002\u0002\u0841\u0843",
  "\u0005\u00ba^\u0002\u0842\u0841\u0003\u0002\u0002\u0002\u0842\u0843",
  "\u0003\u0002\u0002\u0002\u0843\u0844\u0003\u0002\u0002\u0002\u0844\u0848",
  "\u0005\u0284\u0143\u0002\u0845\u0846\u0005\u014c\u00a7\u0002\u0846\u0847",
  "\u0007\u0010\u0002\u0002\u0847\u0849\u0003\u0002\u0002\u0002\u0848\u0845",
  "\u0003\u0002\u0002\u0002\u0848\u0849\u0003\u0002\u0002\u0002\u0849\u084a",
  "\u0003\u0002\u0002\u0002\u084a\u084c\u0005\u014e\u00a8\u0002\u084b\u084d",
  "\u0005\u0108\u0085\u0002\u084c\u084b\u0003\u0002\u0002\u0002\u084c\u084d",
  "\u0003\u0002\u0002\u0002\u084d\u084e\u0003\u0002\u0002\u0002\u084e\u084f",
  "\u0005\u026a\u0136\u0002\u084f\u0850\u0005\u00f8}\u0002\u0850\u0853",
  "\u0005\u012c\u0097\u0002\u0851\u0854\u0005\u0112\u008a\u0002\u0852\u0854",
  "\u0005\u00f2z\u0002\u0853\u0851\u0003\u0002\u0002\u0002\u0853\u0852",
  "\u0003\u0002\u0002\u0002\u0853\u0854\u0003\u0002\u0002\u0002\u0854\u00f1",
  "\u0003\u0002\u0002\u0002\u0855\u0856\u0005\u01ba\u00de\u0002\u0856\u0857",
  "\u0005\u00f4{\u0002\u0857\u00f3\u0003\u0002\u0002\u0002\u0858\u085e",
  "\u0005\u00f6|\u0002\u0859\u085a\u0005\u0180\u00c1\u0002\u085a\u085b",
  "\u0005\u00f6|\u0002\u085b\u085d\u0003\u0002\u0002\u0002\u085c\u0859",
  "\u0003\u0002\u0002\u0002\u085d\u0860\u0003\u0002\u0002\u0002\u085e\u085c",
  "\u0003\u0002\u0002\u0002\u085e\u085f\u0003\u0002\u0002\u0002\u085f\u00f5",
  "\u0003\u0002\u0002\u0002\u0860\u085e\u0003\u0002\u0002\u0002\u0861\u0862",
  "\u0005\u02ae\u0158\u0002\u0862\u0863\u0007\u00dd\u0002\u0002\u0863\u0864",
  "\u0005\u0140\u00a1\u0002\u0864\u00f7\u0003\u0002\u0002\u0002\u0865\u086b",
  "\u0005\u00fa~\u0002\u0866\u0867\u0005\u02aa\u0156\u0002\u0867\u0868",
  "\u0005\u00fa~\u0002\u0868\u086a\u0003\u0002\u0002\u0002\u0869\u0866",
  "\u0003\u0002\u0002\u0002\u086a\u086d\u0003\u0002\u0002\u0002\u086b\u0869",
  "\u0003\u0002\u0002\u0002\u086b\u086c\u0003\u0002\u0002\u0002\u086c\u00f9",
  "\u0003\u0002\u0002\u0002\u086d\u086b\u0003\u0002\u0002\u0002\u086e\u086f",
  "\u0005\u02ae\u0158\u0002\u086f\u0874\u0007\u00dd\u0002\u0002\u0870\u0875",
  "\u0005\u0140\u00a1\u0002\u0871\u0875\u0005\u00fe\u0080\u0002\u0872\u0875",
  "\u0005\u00fc\u007f\u0002\u0873\u0875\u0005\u0102\u0082\u0002\u0874\u0870",
  "\u0003\u0002\u0002\u0002\u0874\u0871\u0003\u0002\u0002\u0002\u0874\u0872",
  "\u0003\u0002\u0002\u0002\u0874\u0873\u0003\u0002\u0002\u0002\u0875\u08a8",
  "\u0003\u0002\u0002\u0002\u0876\u0877\u0005\u02ae\u0158\u0002\u0877\u0878",
  "\u0007\u00dd\u0002\u0002\u0878\u0879\u0005\u02ae\u0158\u0002\u0879\u087a",
  "\t\u0003\u0002\u0002\u087a\u087b\u0005\u0142\u00a2\u0002\u087b\u08a8",
  "\u0003\u0002\u0002\u0002\u087c\u087d\u0005\u02ae\u0158\u0002\u087d\u087e",
  "\u0007\u00dd\u0002\u0002\u087e\u087f\u0005\u02ae\u0158\u0002\u087f\u0880",
  "\t\u0003\u0002\u0002\u0880\u0881\u0005\u00fc\u007f\u0002\u0881\u08a8",
  "\u0003\u0002\u0002\u0002\u0882\u0883\u0005\u02ae\u0158\u0002\u0883\u0884",
  "\u0007\u00dd\u0002\u0002\u0884\u0885\u0005\u00fc\u007f\u0002\u0885\u0886",
  "\t\u0003\u0002\u0002\u0886\u0887\u0005\u02ae\u0158\u0002\u0887\u08a8",
  "\u0003\u0002\u0002\u0002\u0888\u0889\u0005\u02ae\u0158\u0002\u0889\u088a",
  "\u0007\u00dd\u0002\u0002\u088a\u088b\u0005\u02ae\u0158\u0002\u088b\u088c",
  "\t\u0003\u0002\u0002\u088c\u088d\u0005\u00fe\u0080\u0002\u088d\u08a8",
  "\u0003\u0002\u0002\u0002\u088e\u088f\u0005\u02ae\u0158\u0002\u088f\u0890",
  "\u0007\u00dd\u0002\u0002\u0890\u0891\u0005\u00fe\u0080\u0002\u0891\u0892",
  "\t\u0003\u0002\u0002\u0892\u0893\u0005\u02ae\u0158\u0002\u0893\u08a8",
  "\u0003\u0002\u0002\u0002\u0894\u0895\u0005\u02ae\u0158\u0002\u0895\u0896",
  "\u0007\u00dd\u0002\u0002\u0896\u0897\u0005\u02ae\u0158\u0002\u0897\u0898",
  "\t\u0003\u0002\u0002\u0898\u0899\u0005\u0102\u0082\u0002\u0899\u08a8",
  "\u0003\u0002\u0002\u0002\u089a\u089b\u0005\u02ae\u0158\u0002\u089b\u089c",
  "\u0007\u00dd\u0002\u0002\u089c\u089d\u0005\u0102\u0082\u0002\u089d\u089e",
  "\t\u0003\u0002\u0002\u089e\u089f\u0005\u02ae\u0158\u0002\u089f\u08a8",
  "\u0003\u0002\u0002\u0002\u08a0\u08a1\u0005\u02ae\u0158\u0002\u08a1\u08a2",
  "\u0005\u02a6\u0154\u0002\u08a2\u08a3\u0005\u0142\u00a2\u0002\u08a3\u08a4",
  "\u0005\u02a8\u0155\u0002\u08a4\u08a5\u0007\u00dd\u0002\u0002\u08a5\u08a6",
  "\u0005\u0140\u00a1\u0002\u08a6\u08a8\u0003\u0002\u0002\u0002\u08a7\u086e",
  "\u0003\u0002\u0002\u0002\u08a7\u0876\u0003\u0002\u0002\u0002\u08a7\u087c",
  "\u0003\u0002\u0002\u0002\u08a7\u0882\u0003\u0002\u0002\u0002\u08a7\u0888",
  "\u0003\u0002\u0002\u0002\u08a7\u088e\u0003\u0002\u0002\u0002\u08a7\u0894",
  "\u0003\u0002\u0002\u0002\u08a7\u089a\u0003\u0002\u0002\u0002\u08a7\u08a0",
  "\u0003\u0002\u0002\u0002\u08a8\u00fb\u0003\u0002\u0002\u0002\u08a9\u08b3",
  "\u0005\u029e\u0150\u0002\u08aa\u08b0\u0005\u0140\u00a1\u0002\u08ab\u08ac",
  "\u0005\u02aa\u0156\u0002\u08ac\u08ad\u0005\u011c\u008f\u0002\u08ad\u08af",
  "\u0003\u0002\u0002\u0002\u08ae\u08ab\u0003\u0002\u0002\u0002\u08af\u08b2",
  "\u0003\u0002\u0002\u0002\u08b0\u08ae\u0003\u0002\u0002\u0002\u08b0\u08b1",
  "\u0003\u0002\u0002\u0002\u08b1\u08b4\u0003\u0002\u0002\u0002\u08b2\u08b0",
  "\u0003\u0002\u0002\u0002\u08b3\u08aa\u0003\u0002\u0002\u0002\u08b3\u08b4",
  "\u0003\u0002\u0002\u0002\u08b4\u08b5\u0003\u0002\u0002\u0002\u08b5\u08b6",
  "\u0005\u02a0\u0151\u0002\u08b6\u00fd\u0003\u0002\u0002\u0002\u08b7\u08b8",
  "\u0005\u029e\u0150\u0002\u08b8\u08b9\u0005\u0140\u00a1\u0002\u08b9\u08ba",
  "\u0005\u02ac\u0157\u0002\u08ba\u08bb\u0005\u011c\u008f\u0002\u08bb\u08c3",
  "\u0003\u0002\u0002\u0002\u08bc\u08bd\u0005\u02aa\u0156\u0002\u08bd\u08be",
  "\u0005\u0140\u00a1\u0002\u08be\u08bf\u0005\u02ac\u0157\u0002\u08bf\u08c0",
  "\u0005\u011c\u008f\u0002\u08c0\u08c2\u0003\u0002\u0002\u0002\u08c1\u08bc",
  "\u0003\u0002\u0002\u0002\u08c2\u08c5\u0003\u0002\u0002\u0002\u08c3\u08c1",
  "\u0003\u0002\u0002\u0002\u08c3\u08c4\u0003\u0002\u0002\u0002\u08c4\u08c6",
  "\u0003\u0002\u0002\u0002\u08c5\u08c3\u0003\u0002\u0002\u0002\u08c6\u08c7",
  "\u0005\u02a0\u0151\u0002\u08c7\u00ff\u0003\u0002\u0002\u0002\u08c8\u08c9",
  "\u0005\u029e\u0150\u0002\u08c9\u08cf\u0005\u011c\u008f\u0002\u08ca\u08cb",
  "\u0005\u02aa\u0156\u0002\u08cb\u08cc\u0005\u011c\u008f\u0002\u08cc\u08ce",
  "\u0003\u0002\u0002\u0002\u08cd\u08ca\u0003\u0002\u0002\u0002\u08ce\u08d1",
  "\u0003\u0002\u0002\u0002\u08cf\u08cd\u0003\u0002\u0002\u0002\u08cf\u08d0",
  "\u0003\u0002\u0002\u0002\u08d0\u08d2\u0003\u0002\u0002\u0002\u08d1\u08cf",
  "\u0003\u0002\u0002\u0002\u08d2\u08d3\u0005\u02a0\u0151\u0002\u08d3\u0101",
  "\u0003\u0002\u0002\u0002\u08d4\u08d5\u0005\u02a6\u0154\u0002\u08d5\u08db",
  "\u0005\u0140\u00a1\u0002\u08d6\u08d7\u0005\u02aa\u0156\u0002\u08d7\u08d8",
  "\u0005\u011c\u008f\u0002\u08d8\u08da\u0003\u0002\u0002\u0002\u08d9\u08d6",
  "\u0003\u0002\u0002\u0002\u08da\u08dd\u0003\u0002\u0002\u0002\u08db\u08d9",
  "\u0003\u0002\u0002\u0002\u08db\u08dc\u0003\u0002\u0002\u0002\u08dc\u08de",
  "\u0003\u0002\u0002\u0002\u08dd\u08db\u0003\u0002\u0002\u0002\u08de\u08df",
  "\u0005\u02a8\u0155\u0002\u08df\u0103\u0003\u0002\u0002\u0002\u08e0\u08fd",
  "\u0005\u029a\u014e\u0002\u08e1\u08f2\u0005\u011c\u008f\u0002\u08e2\u08e3",
  "\u0005\u02aa\u0156\u0002\u08e3\u08e4\u0005\u011c\u008f\u0002\u08e4\u08e6",
  "\u0003\u0002\u0002\u0002\u08e5\u08e2\u0003\u0002\u0002\u0002\u08e6\u08e9",
  "\u0003\u0002\u0002\u0002\u08e7\u08e5\u0003\u0002\u0002\u0002\u08e7\u08e8",
  "\u0003\u0002\u0002\u0002\u08e8\u08f3\u0003\u0002\u0002\u0002\u08e9\u08e7",
  "\u0003\u0002\u0002\u0002\u08ea\u08eb\u0005\u02aa\u0156\u0002\u08eb\u08ec",
  "\u0005\u0104\u0083\u0002\u08ec\u08ee\u0003\u0002\u0002\u0002\u08ed\u08ea",
  "\u0003\u0002\u0002\u0002\u08ee\u08f1\u0003\u0002\u0002\u0002\u08ef\u08ed",
  "\u0003\u0002\u0002\u0002\u08ef\u08f0\u0003\u0002\u0002\u0002\u08f0\u08f3",
  "\u0003\u0002\u0002\u0002\u08f1\u08ef\u0003\u0002\u0002\u0002\u08f2\u08e7",
  "\u0003\u0002\u0002\u0002\u08f2\u08ef\u0003\u0002\u0002\u0002\u08f3\u08fe",
  "\u0003\u0002\u0002\u0002\u08f4\u08fa\u0005\u0104\u0083\u0002\u08f5\u08f6",
  "\u0005\u02aa\u0156\u0002\u08f6\u08f7\u0005\u0104\u0083\u0002\u08f7\u08f9",
  "\u0003\u0002\u0002\u0002\u08f8\u08f5\u0003\u0002\u0002\u0002\u08f9\u08fc",
  "\u0003\u0002\u0002\u0002\u08fa\u08f8\u0003\u0002\u0002\u0002\u08fa\u08fb",
  "\u0003\u0002\u0002\u0002\u08fb\u08fe\u0003\u0002\u0002\u0002\u08fc\u08fa",
  "\u0003\u0002\u0002\u0002\u08fd\u08e1\u0003\u0002\u0002\u0002\u08fd\u08f4",
  "\u0003\u0002\u0002\u0002\u08fe\u08ff\u0003\u0002\u0002\u0002\u08ff\u0900",
  "\u0005\u029c\u014f\u0002\u0900\u0105\u0003\u0002\u0002\u0002\u0901\u0903",
  "\u0005\u00ba^\u0002\u0902\u0901\u0003\u0002\u0002\u0002\u0902\u0903",
  "\u0003\u0002\u0002\u0002\u0903\u0904\u0003\u0002\u0002\u0002\u0904\u0905",
  "\u0005\u0222\u0112\u0002\u0905\u0909\u0005\u0224\u0113\u0002\u0906\u0907",
  "\u0005\u014c\u00a7\u0002\u0907\u0908\u0007\u0010\u0002\u0002\u0908\u090a",
  "\u0003\u0002\u0002\u0002\u0909\u0906\u0003\u0002\u0002\u0002\u0909\u090a",
  "\u0003\u0002\u0002\u0002\u090a\u090b\u0003\u0002\u0002\u0002\u090b\u090d",
  "\u0005\u014e\u00a8\u0002\u090c\u090e\u0005\u0116\u008c\u0002\u090d\u090c",
  "\u0003\u0002\u0002\u0002\u090d\u090e\u0003\u0002\u0002\u0002\u090e\u090f",
  "\u0003\u0002\u0002\u0002\u090f\u0911\u0005\u0114\u008b\u0002\u0910\u0912",
  "\u0005\u0110\u0089\u0002\u0911\u0910\u0003\u0002\u0002\u0002\u0911\u0912",
  "\u0003\u0002\u0002\u0002\u0912\u0914\u0003\u0002\u0002\u0002\u0913\u0915",
  "\u0005\u0108\u0085\u0002\u0914\u0913\u0003\u0002\u0002\u0002\u0914\u0915",
  "\u0003\u0002\u0002\u0002\u0915\u0107\u0003\u0002\u0002\u0002\u0916\u0917",
  "\u0005\u028c\u0147\u0002\u0917\u0918\u0005\u010c\u0087\u0002\u0918\u0927",
  "\u0003\u0002\u0002\u0002\u0919\u091a\u0005\u028c\u0147\u0002\u091a\u091b",
  "\u0005\u010c\u0087\u0002\u091b\u091c\u0005\u0180\u00c1\u0002\u091c\u091d",
  "\u0005\u010a\u0086\u0002\u091d\u0927\u0003\u0002\u0002\u0002\u091e\u091f",
  "\u0005\u028c\u0147\u0002\u091f\u0920\u0005\u010a\u0086\u0002\u0920\u0927",
  "\u0003\u0002\u0002\u0002\u0921\u0922\u0005\u028c\u0147\u0002\u0922\u0923",
  "\u0005\u010a\u0086\u0002\u0923\u0924\u0005\u0180\u00c1\u0002\u0924\u0925",
  "\u0005\u010c\u0087\u0002\u0925\u0927\u0003\u0002\u0002\u0002\u0926\u0916",
  "\u0003\u0002\u0002\u0002\u0926\u0919\u0003\u0002\u0002\u0002\u0926\u091e",
  "\u0003\u0002\u0002\u0002\u0926\u0921\u0003\u0002\u0002\u0002\u0927\u0109",
  "\u0003\u0002\u0002\u0002\u0928\u0929\u0005\u0276\u013c\u0002\u0929\u092a",
  "\u0005\u0142\u00a2\u0002\u092a\u010b\u0003\u0002\u0002\u0002\u092b\u092c",
  "\u0005\u027e\u0140\u0002\u092c\u092d\u0005\u0142\u00a2\u0002\u092d\u010d",
  "\u0003\u0002\u0002\u0002\u092e\u092f\u0005\u028c\u0147\u0002\u092f\u0930",
  "\u0005\u010a\u0086\u0002\u0930\u010f\u0003\u0002\u0002\u0002\u0931\u0932",
  "\u0005\u01ba\u00de\u0002\u0932\u0933\u0005\u0244\u0123\u0002\u0933\u0934",
  "\u0005\u01aa\u00d6\u0002\u0934\u0111\u0003\u0002\u0002\u0002\u0935\u0936",
  "\u0005\u01ba\u00de\u0002\u0936\u0937\u0005\u01aa\u00d6\u0002\u0937\u0113",
  "\u0003\u0002\u0002\u0002\u0938\u0939\u0005\u028e\u0148\u0002\u0939\u093a",
  "\u0007\u0003\u0002\u0002\u093a\u093b\u0005\u011a\u008e\u0002\u093b\u093c",
  "\u0007\u0004\u0002\u0002\u093c\u0941\u0003\u0002\u0002\u0002\u093d\u093e",
  "\u0005\u0228\u0115\u0002\u093e\u093f\u0005\u0140\u00a1\u0002\u093f\u0941",
  "\u0003\u0002\u0002\u0002\u0940\u0938\u0003\u0002\u0002\u0002\u0940\u093d",
  "\u0003\u0002\u0002\u0002\u0941\u0115\u0003\u0002\u0002\u0002\u0942\u0943",
  "\u0007\u0003\u0002\u0002\u0943\u0944\u0005\u0118\u008d\u0002\u0944\u0945",
  "\u0007\u0004\u0002\u0002\u0945\u0117\u0003\u0002\u0002\u0002\u0946\u094c",
  "\u0005\u0150\u00a9\u0002\u0947\u0948\u0005\u02aa\u0156\u0002\u0948\u0949",
  "\u0005\u0150\u00a9\u0002\u0949\u094b\u0003\u0002\u0002\u0002\u094a\u0947",
  "\u0003\u0002\u0002\u0002\u094b\u094e\u0003\u0002\u0002\u0002\u094c\u094a",
  "\u0003\u0002\u0002\u0002\u094c\u094d\u0003\u0002\u0002\u0002\u094d\u0119",
  "\u0003\u0002\u0002\u0002\u094e\u094c\u0003\u0002\u0002\u0002\u094f\u0955",
  "\u0005\u011c\u008f\u0002\u0950\u0951\u0005\u02aa\u0156\u0002\u0951\u0952",
  "\u0005\u011c\u008f\u0002\u0952\u0954\u0003\u0002\u0002\u0002\u0953\u0950",
  "\u0003\u0002\u0002\u0002\u0954\u0957\u0003\u0002\u0002\u0002\u0955\u0953",
  "\u0003\u0002\u0002\u0002\u0955\u0956\u0003\u0002\u0002\u0002\u0956\u011b",
  "\u0003\u0002\u0002\u0002\u0957\u0955\u0003\u0002\u0002\u0002\u0958\u095f",
  "\u0005\u0140\u00a1\u0002\u0959\u095f\u0005\u00fe\u0080\u0002\u095a\u095f",
  "\u0005\u00fc\u007f\u0002\u095b\u095f\u0005\u0102\u0082\u0002\u095c\u095f",
  "\u0005\u0104\u0083\u0002\u095d\u095f\u0005\u0100\u0081\u0002\u095e\u0958",
  "\u0003\u0002\u0002\u0002\u095e\u0959\u0003\u0002\u0002\u0002\u095e\u095a",
  "\u0003\u0002\u0002\u0002\u095e\u095b\u0003\u0002\u0002\u0002\u095e\u095c",
  "\u0003\u0002\u0002\u0002\u095e\u095d\u0003\u0002\u0002\u0002\u095f\u011d",
  "\u0003\u0002\u0002\u0002\u0960\u0962\u0005\u0268\u0135\u0002\u0961\u0963",
  "\u0005\u012e\u0098\u0002\u0962\u0961\u0003\u0002\u0002\u0002\u0962\u0963",
  "\u0003\u0002\u0002\u0002\u0963\u0965\u0003\u0002\u0002\u0002\u0964\u0966",
  "\u0005\u0228\u0115\u0002\u0965\u0964\u0003\u0002\u0002\u0002\u0965\u0966",
  "\u0003\u0002\u0002\u0002\u0966\u0967\u0003\u0002\u0002\u0002\u0967\u0968",
  "\u0005\u0130\u0099\u0002\u0968\u096a\u0005\u0124\u0093\u0002\u0969\u096b",
  "\u0005\u012c\u0097\u0002\u096a\u0969\u0003\u0002\u0002\u0002\u096a\u096b",
  "\u0003\u0002\u0002\u0002\u096b\u096d\u0003\u0002\u0002\u0002\u096c\u096e",
  "\u0005\u0128\u0095\u0002\u096d\u096c\u0003\u0002\u0002\u0002\u096d\u096e",
  "\u0003\u0002\u0002\u0002\u096e\u0970\u0003\u0002\u0002\u0002\u096f\u0971",
  "\u0005\u0122\u0092\u0002\u0970\u096f\u0003\u0002\u0002\u0002\u0970\u0971",
  "\u0003\u0002\u0002\u0002\u0971\u0973\u0003\u0002\u0002\u0002\u0972\u0974",
  "\u0005\u0120\u0091\u0002\u0973\u0972\u0003\u0002\u0002\u0002\u0973\u0974",
  "\u0003\u0002\u0002\u0002\u0974\u011f\u0003\u0002\u0002\u0002\u0975\u0976",
  "\u0005\u017c\u00bf\u0002\u0976\u0977\u0005\u01ac\u00d7\u0002\u0977\u0121",
  "\u0003\u0002\u0002\u0002\u0978\u0979\u0005\u0234\u011b\u0002\u0979\u097a",
  "\u0005\u0142\u00a2\u0002\u097a\u0123\u0003\u0002\u0002\u0002\u097b\u097c",
  "\u0005\u01b0\u00d9\u0002\u097c\u097d\u0005\u0126\u0094\u0002\u097d\u0125",
  "\u0003\u0002\u0002\u0002\u097e\u0984\u0005\u02ae\u0158\u0002\u097f\u0980",
  "\u0005\u02ae\u0158\u0002\u0980\u0981\u0007\u0010\u0002\u0002\u0981\u0982",
  "\u0005\u02ae\u0158\u0002\u0982\u0984\u0003\u0002\u0002\u0002\u0983\u097e",
  "\u0003\u0002\u0002\u0002\u0983\u097f\u0003\u0002\u0002\u0002\u0984\u0127",
  "\u0003\u0002\u0002\u0002\u0985\u0986\u0005\u0250\u0129\u0002\u0986\u0987",
  "\u0005\u018e\u00c8\u0002\u0987\u0988\u0005\u012a\u0096\u0002\u0988\u0129",
  "\u0003\u0002\u0002\u0002\u0989\u098c\u0005\u02ae\u0158\u0002\u098a\u098d",
  "\u0005\u0186\u00c4\u0002\u098b\u098d\u0005\u019c\u00cf\u0002\u098c\u098a",
  "\u0003\u0002\u0002\u0002\u098c\u098b\u0003\u0002\u0002\u0002\u098c\u098d",
  "\u0003\u0002\u0002\u0002\u098d\u012b\u0003\u0002\u0002\u0002\u098e\u098f",
  "\u0005\u0292\u014a\u0002\u098f\u0990\u0005\u0134\u009b\u0002\u0990\u012d",
  "\u0003\u0002\u0002\u0002\u0991\u0992\u0005\u01a0\u00d1\u0002\u0992\u012f",
  "\u0003\u0002\u0002\u0002\u0993\u0996\u0007\u0011\u0002\u0002\u0994\u0996",
  "\u0005\u0132\u009a\u0002\u0995\u0993\u0003\u0002\u0002\u0002\u0995\u0994",
  "\u0003\u0002\u0002\u0002\u0996\u099c\u0003\u0002\u0002\u0002\u0997\u0998",
  "\u0005\u02aa\u0156\u0002\u0998\u0999\u0005\u0132\u009a\u0002\u0999\u099b",
  "\u0003\u0002\u0002\u0002\u099a\u0997\u0003\u0002\u0002\u0002\u099b\u099e",
  "\u0003\u0002\u0002\u0002\u099c\u099a\u0003\u0002\u0002\u0002\u099c\u099d",
  "\u0003\u0002\u0002\u0002\u099d\u0131\u0003\u0002\u0002\u0002\u099e\u099c",
  "\u0003\u0002\u0002\u0002\u099f\u09a0\u0005\u02ae\u0158\u0002\u09a0\u09a1",
  "\u0007\u0010\u0002\u0002\u09a1\u09a2\u0007\u0011\u0002\u0002\u09a2\u09b0",
  "\u0003\u0002\u0002\u0002\u09a3\u09a7\u0005\u02ae\u0158\u0002\u09a4\u09a5",
  "\u0005\u0184\u00c3\u0002\u09a5\u09a6\u0005\u02ae\u0158\u0002\u09a6\u09a8",
  "\u0003\u0002\u0002\u0002\u09a7\u09a4\u0003\u0002\u0002\u0002\u09a7\u09a8",
  "\u0003\u0002\u0002\u0002\u09a8\u09b0\u0003\u0002\u0002\u0002\u09a9\u09ad",
  "\u0005\u013c\u009f\u0002\u09aa\u09ab\u0005\u0184\u00c3\u0002\u09ab\u09ac",
  "\u0005\u02ae\u0158\u0002\u09ac\u09ae\u0003\u0002\u0002\u0002\u09ad\u09aa",
  "\u0003\u0002\u0002\u0002\u09ad\u09ae\u0003\u0002\u0002\u0002\u09ae\u09b0",
  "\u0003\u0002\u0002\u0002\u09af\u099f\u0003\u0002\u0002\u0002\u09af\u09a3",
  "\u0003\u0002\u0002\u0002\u09af\u09a9\u0003\u0002\u0002\u0002\u09b0\u0133",
  "\u0003\u0002\u0002\u0002\u09b1\u09b7\u0005\u0136\u009c\u0002\u09b2\u09b3",
  "\u0005\u0180\u00c1\u0002\u09b3\u09b4\u0005\u0136\u009c\u0002\u09b4\u09b6",
  "\u0003\u0002\u0002\u0002\u09b5\u09b2\u0003\u0002\u0002\u0002\u09b6\u09b9",
  "\u0003\u0002\u0002\u0002\u09b7\u09b5\u0003\u0002\u0002\u0002\u09b7\u09b8",
  "\u0003\u0002\u0002\u0002\u09b8\u0135\u0003\u0002\u0002\u0002\u09b9\u09b7",
  "\u0003\u0002\u0002\u0002\u09ba\u09bb\u0005\u02ae\u0158\u0002\u09bb\u09bc",
  "\t\u0004\u0002\u0002\u09bc\u09bd\u0005\u0140\u00a1\u0002\u09bd\u0a04",
  "\u0003\u0002\u0002\u0002\u09be\u09bf\u0005\u02ae\u0158\u0002\u09bf\u09c0",
  "\u0007\u0010\u0002\u0002\u09c0\u09c1\u0005\u02ae\u0158\u0002\u09c1\u09c2",
  "\t\u0004\u0002\u0002\u09c2\u09c3\u0005\u0140\u00a1\u0002\u09c3\u0a04",
  "\u0003\u0002\u0002\u0002\u09c4\u09c5\u0005\u013c\u009f\u0002\u09c5\u09c6",
  "\t\u0004\u0002\u0002\u09c6\u09c7\u0005\u0140\u00a1\u0002\u09c7\u0a04",
  "\u0003\u0002\u0002\u0002\u09c8\u09c9\u0005\u013c\u009f\u0002\u09c9\u09ca",
  "\t\u0004\u0002\u0002\u09ca\u09cb\u0005\u013c\u009f\u0002\u09cb\u0a04",
  "\u0003\u0002\u0002\u0002\u09cc\u09cd\u0005\u02ae\u0158\u0002\u09cd\u09ce",
  "\u0005\u01bc\u00df\u0002\u09ce\u09d0\u0007\u0003\u0002\u0002\u09cf\u09d1",
  "\u0005\u013e\u00a0\u0002\u09d0\u09cf\u0003\u0002\u0002\u0002\u09d0\u09d1",
  "\u0003\u0002\u0002\u0002\u09d1\u09d2\u0003\u0002\u0002\u0002\u09d2\u09d3",
  "\u0007\u0004\u0002\u0002\u09d3\u0a04\u0003\u0002\u0002\u0002\u09d4\u09d5",
  "\u0007\u0003\u0002\u0002\u09d5\u09db\u0005\u02ae\u0158\u0002\u09d6\u09d7",
  "\u0005\u02aa\u0156\u0002\u09d7\u09d8\u0005\u02ae\u0158\u0002\u09d8\u09da",
  "\u0003\u0002\u0002\u0002\u09d9\u09d6\u0003\u0002\u0002\u0002\u09da\u09dd",
  "\u0003\u0002\u0002\u0002\u09db\u09d9\u0003\u0002\u0002\u0002\u09db\u09dc",
  "\u0003\u0002\u0002\u0002\u09dc\u09de\u0003\u0002\u0002\u0002\u09dd\u09db",
  "\u0003\u0002\u0002\u0002\u09de\u09df\u0007\u0004\u0002\u0002\u09df\u09e0",
  "\u0005\u01bc\u00df\u0002\u09e0\u09e1\u0007\u0003\u0002\u0002\u09e1\u09e7",
  "\u0005\u0104\u0083\u0002\u09e2\u09e3\u0005\u02aa\u0156\u0002\u09e3\u09e4",
  "\u0005\u0104\u0083\u0002\u09e4\u09e6\u0003\u0002\u0002\u0002\u09e5\u09e2",
  "\u0003\u0002\u0002\u0002\u09e6\u09e9\u0003\u0002\u0002\u0002\u09e7\u09e5",
  "\u0003\u0002\u0002\u0002\u09e7\u09e8\u0003\u0002\u0002\u0002\u09e8\u09ea",
  "\u0003\u0002\u0002\u0002\u09e9\u09e7\u0003\u0002\u0002\u0002\u09ea\u09eb",
  "\u0007\u0004\u0002\u0002\u09eb\u0a04\u0003\u0002\u0002\u0002\u09ec\u09ed",
  "\u0007\u0003\u0002\u0002\u09ed\u09f3\u0005\u02ae\u0158\u0002\u09ee\u09ef",
  "\u0005\u02aa\u0156\u0002\u09ef\u09f0\u0005\u02ae\u0158\u0002\u09f0\u09f2",
  "\u0003\u0002\u0002\u0002\u09f1\u09ee\u0003\u0002\u0002\u0002\u09f2\u09f5",
  "\u0003\u0002\u0002\u0002\u09f3\u09f1\u0003\u0002\u0002\u0002\u09f3\u09f4",
  "\u0003\u0002\u0002\u0002\u09f4\u09f6\u0003\u0002\u0002\u0002\u09f5\u09f3",
  "\u0003\u0002\u0002\u0002\u09f6\u09f7\u0007\u0004\u0002\u0002\u09f7\u09f8",
  "\t\u0004\u0002\u0002\u09f8\u09fe\u0005\u0104\u0083\u0002\u09f9\u09fa",
  "\u0005\u02aa\u0156\u0002\u09fa\u09fb\u0005\u0104\u0083\u0002\u09fb\u09fd",
  "\u0003\u0002\u0002\u0002\u09fc\u09f9\u0003\u0002\u0002\u0002\u09fd\u0a00",
  "\u0003\u0002\u0002\u0002\u09fe\u09fc\u0003\u0002\u0002\u0002\u09fe\u09ff",
  "\u0003\u0002\u0002\u0002\u09ff\u0a04\u0003\u0002\u0002\u0002\u0a00\u09fe",
  "\u0003\u0002\u0002\u0002\u0a01\u0a04\u0005\u013a\u009e\u0002\u0a02\u0a04",
  "\u0005\u0138\u009d\u0002\u0a03\u09ba\u0003\u0002\u0002\u0002\u0a03\u09be",
  "\u0003\u0002\u0002\u0002\u0a03\u09c4\u0003\u0002\u0002\u0002\u0a03\u09c8",
  "\u0003\u0002\u0002\u0002\u0a03\u09cc\u0003\u0002\u0002\u0002\u0a03\u09d4",
  "\u0003\u0002\u0002\u0002\u0a03\u09ec\u0003\u0002\u0002\u0002\u0a03\u0a01",
  "\u0003\u0002\u0002\u0002\u0a03\u0a02\u0003\u0002\u0002\u0002\u0a04\u0137",
  "\u0003\u0002\u0002\u0002\u0a05\u0a06\u0005\u02ae\u0158\u0002\u0a06\u0a07",
  "\u0005\u0196\u00cc\u0002\u0a07\u0a08\u0005\u0140\u00a1\u0002\u0a08\u0139",
  "\u0003\u0002\u0002\u0002\u0a09\u0a0a\u0005\u02ae\u0158\u0002\u0a0a\u0a0b",
  "\u0005\u0196\u00cc\u0002\u0a0b\u0a0c\u0005\u022a\u0116\u0002\u0a0c\u0a0d",
  "\u0003\u0002\u0002\u0002\u0a0d\u0a0e\u0005\u0140\u00a1\u0002\u0a0e\u013b",
  "\u0003\u0002\u0002\u0002\u0a0f\u0a10\u0005\u02ae\u0158\u0002\u0a10\u0a11",
  "\u0007\u0003\u0002\u0002\u0a11\u0a12\u0007\u0011\u0002\u0002\u0a12\u0a13",
  "\u0007\u0004\u0002\u0002\u0a13\u0a1c\u0003\u0002\u0002\u0002\u0a14\u0a15",
  "\u0005\u02ae\u0158\u0002\u0a15\u0a17\u0007\u0003\u0002\u0002\u0a16\u0a18",
  "\u0005\u013e\u00a0\u0002\u0a17\u0a16\u0003\u0002\u0002\u0002\u0a17\u0a18",
  "\u0003\u0002\u0002\u0002\u0a18\u0a19\u0003\u0002\u0002\u0002\u0a19\u0a1a",
  "\u0007\u0004\u0002\u0002\u0a1a\u0a1c\u0003\u0002\u0002\u0002\u0a1b\u0a0f",
  "\u0003\u0002\u0002\u0002\u0a1b\u0a14\u0003\u0002\u0002\u0002\u0a1c\u013d",
  "\u0003\u0002\u0002\u0002\u0a1d\u0a21\u0005\u0140\u00a1\u0002\u0a1e\u0a21",
  "\u0005\u02ae\u0158\u0002\u0a1f\u0a21\u0005\u013c\u009f\u0002\u0a20\u0a1d",
  "\u0003\u0002\u0002\u0002\u0a20\u0a1e\u0003\u0002\u0002\u0002\u0a20\u0a1f",
  "\u0003\u0002\u0002\u0002\u0a21\u0a2a\u0003\u0002\u0002\u0002\u0a22\u0a26",
  "\u0005\u02aa\u0156\u0002\u0a23\u0a27\u0005\u0140\u00a1\u0002\u0a24\u0a27",
  "\u0005\u02ae\u0158\u0002\u0a25\u0a27\u0005\u013c\u009f\u0002\u0a26\u0a23",
  "\u0003\u0002\u0002\u0002\u0a26\u0a24\u0003\u0002\u0002\u0002\u0a26\u0a25",
  "\u0003\u0002\u0002\u0002\u0a27\u0a29\u0003\u0002\u0002\u0002\u0a28\u0a22",
  "\u0003\u0002\u0002\u0002\u0a29\u0a2c\u0003\u0002\u0002\u0002\u0a2a\u0a28",
  "\u0003\u0002\u0002\u0002\u0a2a\u0a2b\u0003\u0002\u0002\u0002\u0a2b\u013f",
  "\u0003\u0002\u0002\u0002\u0a2c\u0a2a\u0003\u0002\u0002\u0002\u0a2d\u0a37",
  "\u0007\u00dc\u0002\u0002\u0a2e\u0a37\u0005\u0146\u00a4\u0002\u0a2f\u0a37",
  "\u0005\u0142\u00a2\u0002\u0a30\u0a37\u0005\u0144\u00a3\u0002\u0a31\u0a37",
  "\u0005\u014a\u00a6\u0002\u0a32\u0a37\u0005\u0148\u00a5\u0002\u0a33\u0a37",
  "\u00052\u001a\u0002\u0a34\u0a37\u0005\u0246\u0124\u0002\u0a35\u0a37",
  "\u0005\u02ae\u0158\u0002\u0a36\u0a2d\u0003\u0002\u0002\u0002\u0a36\u0a2e",
  "\u0003\u0002\u0002\u0002\u0a36\u0a2f\u0003\u0002\u0002\u0002\u0a36\u0a30",
  "\u0003\u0002\u0002\u0002\u0a36\u0a31\u0003\u0002\u0002\u0002\u0a36\u0a32",
  "\u0003\u0002\u0002\u0002\u0a36\u0a33\u0003\u0002\u0002\u0002\u0a36\u0a34",
  "\u0003\u0002\u0002\u0002\u0a36\u0a35\u0003\u0002\u0002\u0002\u0a37\u0141",
  "\u0003\u0002\u0002\u0002\u0a38\u0a39\u0007\u00d7\u0002\u0002\u0a39\u0143",
  "\u0003\u0002\u0002\u0002\u0a3a\u0a3b\t\u0005\u0002\u0002\u0a3b\u0145",
  "\u0003\u0002\u0002\u0002\u0a3c\u0a3d\u0007\u00d6\u0002\u0002\u0a3d\u0147",
  "\u0003\u0002\u0002\u0002\u0a3e\u0a3f\t\u0006\u0002\u0002\u0a3f\u0149",
  "\u0003\u0002\u0002\u0002\u0a40\u0a41\u0007\u00d9\u0002\u0002\u0a41\u014b",
  "\u0003\u0002\u0002\u0002\u0a42\u0a48\u0005\u02ae\u0158\u0002\u0a43\u0a44",
  "\u0007\u0017\u0002\u0002\u0a44\u0a45\u0005\u02ae\u0158\u0002\u0a45\u0a46",
  "\u0007\u0017\u0002\u0002\u0a46\u0a48\u0003\u0002\u0002\u0002\u0a47\u0a42",
  "\u0003\u0002\u0002\u0002\u0a47\u0a43\u0003\u0002\u0002\u0002\u0a48\u014d",
  "\u0003\u0002\u0002\u0002\u0a49\u0a4f\u0005\u02ae\u0158\u0002\u0a4a\u0a4b",
  "\u0007\u0017\u0002\u0002\u0a4b\u0a4c\u0005\u02ae\u0158\u0002\u0a4c\u0a4d",
  "\u0007\u0017\u0002\u0002\u0a4d\u0a4f\u0003\u0002\u0002\u0002\u0a4e\u0a49",
  "\u0003\u0002\u0002\u0002\u0a4e\u0a4a\u0003\u0002\u0002\u0002\u0a4f\u014f",
  "\u0003\u0002\u0002\u0002\u0a50\u0a56\u0005\u02ae\u0158\u0002\u0a51\u0a52",
  "\u0007\u0017\u0002\u0002\u0a52\u0a53\u0005\u02ae\u0158\u0002\u0a53\u0a54",
  "\u0007\u0017\u0002\u0002\u0a54\u0a56\u0003\u0002\u0002\u0002\u0a55\u0a50",
  "\u0003\u0002\u0002\u0002\u0a55\u0a51\u0003\u0002\u0002\u0002\u0a56\u0151",
  "\u0003\u0002\u0002\u0002\u0a57\u0a59\u0005\u0154\u00ab\u0002\u0a58\u0a5a",
  "\u0005\u0156\u00ac\u0002\u0a59\u0a58\u0003\u0002\u0002\u0002\u0a59\u0a5a",
  "\u0003\u0002\u0002\u0002\u0a5a\u0153\u0003\u0002\u0002\u0002\u0a5b\u0a5c",
  "\u0005\u014c\u00a7\u0002\u0a5c\u0a5d\u0007\u0010\u0002\u0002\u0a5d\u0a5f",
  "\u0003\u0002\u0002\u0002\u0a5e\u0a5b\u0003\u0002\u0002\u0002\u0a5e\u0a5f",
  "\u0003\u0002\u0002\u0002\u0a5f\u0a60\u0003\u0002\u0002\u0002\u0a60\u0a7e",
  "\u0005\u0162\u00b2\u0002\u0a61\u0a7e\u0007\u00d6\u0002\u0002\u0a62\u0a7e",
  "\u0007\u007f\u0002\u0002\u0a63\u0a7e\u0007w\u0002\u0002\u0a64\u0a7e",
  "\u0007\u0093\u0002\u0002\u0a65\u0a7e\u0007\u00c0\u0002\u0002\u0a66\u0a7e",
  "\u0007\u00c1\u0002\u0002\u0a67\u0a7e\u0007\u00c2\u0002\u0002\u0a68\u0a7e",
  "\u0007\u00c3\u0002\u0002\u0a69\u0a7e\u0007\u00c4\u0002\u0002\u0a6a\u0a7e",
  "\u0007\u00c5\u0002\u0002\u0a6b\u0a7e\u0007\u00c6\u0002\u0002\u0a6c\u0a7e",
  "\u0007\u00c7\u0002\u0002\u0a6d\u0a7e\u0007\u00c8\u0002\u0002\u0a6e\u0a7e",
  "\u0007\u00c9\u0002\u0002\u0a6f\u0a7e\u0007\u00ca\u0002\u0002\u0a70\u0a7e",
  "\u0007\u00cb\u0002\u0002\u0a71\u0a7e\u0007\u00cc\u0002\u0002\u0a72\u0a7e",
  "\u0007\u00cd\u0002\u0002\u0a73\u0a7e\u0007\u00ce\u0002\u0002\u0a74\u0a7e",
  "\u0007\u00d0\u0002\u0002\u0a75\u0a7e\u0007\u00cf\u0002\u0002\u0a76\u0a7e",
  "\u0007\u00d1\u0002\u0002\u0a77\u0a7e\u0007\u00d2\u0002\u0002\u0a78\u0a7e",
  "\u0007\u00d3\u0002\u0002\u0a79\u0a7e\u0007\u00d4\u0002\u0002\u0a7a\u0a7e",
  "\u0007\u007f\u0002\u0002\u0a7b\u0a7e\u0007\u008d\u0002\u0002\u0a7c\u0a7e",
  "\u0007\u00e3\u0002\u0002\u0a7d\u0a5e\u0003\u0002\u0002\u0002\u0a7d\u0a61",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a62\u0003\u0002\u0002\u0002\u0a7d\u0a63",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a64\u0003\u0002\u0002\u0002\u0a7d\u0a65",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a66\u0003\u0002\u0002\u0002\u0a7d\u0a67",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a68\u0003\u0002\u0002\u0002\u0a7d\u0a69",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a6a\u0003\u0002\u0002\u0002\u0a7d\u0a6b",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a6c\u0003\u0002\u0002\u0002\u0a7d\u0a6d",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a6e\u0003\u0002\u0002\u0002\u0a7d\u0a6f",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a70\u0003\u0002\u0002\u0002\u0a7d\u0a71",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a72\u0003\u0002\u0002\u0002\u0a7d\u0a73",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a74\u0003\u0002\u0002\u0002\u0a7d\u0a75",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a76\u0003\u0002\u0002\u0002\u0a7d\u0a77",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a78\u0003\u0002\u0002\u0002\u0a7d\u0a79",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a7a\u0003\u0002\u0002\u0002\u0a7d\u0a7b",
  "\u0003\u0002\u0002\u0002\u0a7d\u0a7c\u0003\u0002\u0002\u0002\u0a7e\u0155",
  "\u0003\u0002\u0002\u0002\u0a7f\u0a80\u0005\u02a2\u0152\u0002\u0a80\u0a88",
  "\u0005\u0152\u00aa\u0002\u0a81\u0a84\u0005\u02aa\u0156\u0002\u0a82\u0a85",
  "\u0005\u0152\u00aa\u0002\u0a83\u0a85\u0005\u0142\u00a2\u0002\u0a84\u0a82",
  "\u0003\u0002\u0002\u0002\u0a84\u0a83\u0003\u0002\u0002\u0002\u0a85\u0a87",
  "\u0003\u0002\u0002\u0002\u0a86\u0a81\u0003\u0002\u0002\u0002\u0a87\u0a8a",
  "\u0003\u0002\u0002\u0002\u0a88\u0a86\u0003\u0002\u0002\u0002\u0a88\u0a89",
  "\u0003\u0002\u0002\u0002\u0a89\u0a8b\u0003\u0002\u0002\u0002\u0a8a\u0a88",
  "\u0003\u0002\u0002\u0002\u0a8b\u0a8c\u0005\u02a4\u0153\u0002\u0a8c\u0157",
  "\u0003\u0002\u0002\u0002\u0a8d\u0a90\u0005\u0186\u00c4\u0002\u0a8e\u0a90",
  "\u0005\u019c\u00cf\u0002\u0a8f\u0a8d\u0003\u0002\u0002\u0002\u0a8f\u0a8e",
  "\u0003\u0002\u0002\u0002\u0a90\u0159\u0003\u0002\u0002\u0002\u0a91\u0a92",
  "\u0005\u02ae\u0158\u0002\u0a92\u015b\u0003\u0002\u0002\u0002\u0a93\u0a94",
  "\u0005\u02ae\u0158\u0002\u0a94\u015d\u0003\u0002\u0002\u0002\u0a95\u0a96",
  "\u0005\u0146\u00a4\u0002\u0a96\u015f\u0003\u0002\u0002\u0002\u0a97\u0a98",
  "\u0005\u02ae\u0158\u0002\u0a98\u0161\u0003\u0002\u0002\u0002\u0a99\u0a9a",
  "\u0005\u02ae\u0158\u0002\u0a9a\u0163\u0003\u0002\u0002\u0002\u0a9b\u0a9c",
  "\u0005\u02ae\u0158\u0002\u0a9c\u0165\u0003\u0002\u0002\u0002\u0a9d\u0a9e",
  "\u0005\u02ae\u0158\u0002\u0a9e\u0167\u0003\u0002\u0002\u0002\u0a9f\u0aa0",
  "\u0005\u02ae\u0158\u0002\u0aa0\u0169\u0003\u0002\u0002\u0002\u0aa1\u0aa2",
  "\u0005\u02ae\u0158\u0002\u0aa2\u016b\u0003\u0002\u0002\u0002\u0aa3\u0aa4",
  "\u0005\u0146\u00a4\u0002\u0aa4\u016d\u0003\u0002\u0002\u0002\u0aa5\u0aa6",
  "\u0005\u02ae\u0158\u0002\u0aa6\u016f\u0003\u0002\u0002\u0002\u0aa7\u0aa8",
  "\u0005\u0172\u00ba\u0002\u0aa8\u0aa9\u0005\u0152\u00aa\u0002\u0aa9\u0171",
  "\u0003\u0002\u0002\u0002\u0aaa\u0aab\u0005\u02ae\u0158\u0002\u0aab\u0173",
  "\u0003\u0002\u0002\u0002\u0aac\u0aad\u0007\u0019\u0002\u0002\u0aad\u0175",
  "\u0003\u0002\u0002\u0002\u0aae\u0aaf\u0007\u001a\u0002\u0002\u0aaf\u0177",
  "\u0003\u0002\u0002\u0002\u0ab0\u0ab1\u0007\u001b\u0002\u0002\u0ab1\u0179",
  "\u0003\u0002\u0002\u0002\u0ab2\u0ab3\u0007\u001b\u0002\u0002\u0ab3\u0ab4",
  "\u0007h\u0002\u0002\u0ab4\u017b\u0003\u0002\u0002\u0002\u0ab5\u0ab6",
  "\u0007\u001c\u0002\u0002\u0ab6\u017d\u0003\u0002\u0002\u0002\u0ab7\u0ab8",
  "\u0007\u001d\u0002\u0002\u0ab8\u017f\u0003\u0002\u0002\u0002\u0ab9\u0aba",
  "\u0007\u001e\u0002\u0002\u0aba\u0181\u0003\u0002\u0002\u0002\u0abb\u0abc",
  "\u0007 \u0002\u0002\u0abc\u0183\u0003\u0002\u0002\u0002\u0abd\u0abe",
  "\u0007!\u0002\u0002\u0abe\u0185\u0003\u0002\u0002\u0002\u0abf\u0ac0",
  '\u0007"\u0002\u0002\u0ac0\u0187\u0003\u0002\u0002\u0002\u0ac1\u0ac2',
  "\u0007#\u0002\u0002\u0ac2\u0189\u0003\u0002\u0002\u0002\u0ac3\u0ac4",
  "\u0007$\u0002\u0002\u0ac4\u018b\u0003\u0002\u0002\u0002\u0ac5\u0ac6",
  "\u0007%\u0002\u0002\u0ac6\u018d\u0003\u0002\u0002\u0002\u0ac7\u0ac8",
  "\u0007&\u0002\u0002\u0ac8\u018f\u0003\u0002\u0002\u0002\u0ac9\u0aca",
  "\u0007'\u0002\u0002\u0aca\u0191\u0003\u0002\u0002\u0002\u0acb\u0acc",
  "\u0007(\u0002\u0002\u0acc\u0193\u0003\u0002\u0002\u0002\u0acd\u0ace",
  "\u0007*\u0002\u0002\u0ace\u0195\u0003\u0002\u0002\u0002\u0acf\u0ad0",
  "\u0007,\u0002\u0002\u0ad0\u0197\u0003\u0002\u0002\u0002\u0ad1\u0ad2",
  "\u0007-\u0002\u0002\u0ad2\u0199\u0003\u0002\u0002\u0002\u0ad3\u0ad4",
  "\u00070\u0002\u0002\u0ad4\u019b\u0003\u0002\u0002\u0002\u0ad5\u0ad6",
  "\u00071\u0002\u0002\u0ad6\u019d\u0003\u0002\u0002\u0002\u0ad7\u0ad8",
  "\u00072\u0002\u0002\u0ad8\u019f\u0003\u0002\u0002\u0002\u0ad9\u0ada",
  "\u00073\u0002\u0002\u0ada\u01a1\u0003\u0002\u0002\u0002\u0adb\u0adc",
  "\u00074\u0002\u0002\u0adc\u01a3\u0003\u0002\u0002\u0002\u0add\u0ade",
  "\u00075\u0002\u0002\u0ade\u01a5\u0003\u0002\u0002\u0002\u0adf\u0ae0",
  "\u00077\u0002\u0002\u0ae0\u01a7\u0003\u0002\u0002\u0002\u0ae1\u0ae2",
  "\u00078\u0002\u0002\u0ae2\u01a9\u0003\u0002\u0002\u0002\u0ae3\u0ae4",
  "\u00079\u0002\u0002\u0ae4\u01ab\u0003\u0002\u0002\u0002\u0ae5\u0ae6",
  "\u0007;\u0002\u0002\u0ae6\u01ad\u0003\u0002\u0002\u0002\u0ae7\u0ae8",
  "\u0007<\u0002\u0002\u0ae8\u01af\u0003\u0002\u0002\u0002\u0ae9\u0aea",
  "\u0007=\u0002\u0002\u0aea\u01b1\u0003\u0002\u0002\u0002\u0aeb\u0aec",
  "\u0007>\u0002\u0002\u0aec\u01b3\u0003\u0002\u0002\u0002\u0aed\u0aee",
  "\u0007?\u0002\u0002\u0aee\u01b5\u0003\u0002\u0002\u0002\u0aef\u0af0",
  "\u0007@\u0002\u0002\u0af0\u01b7\u0003\u0002\u0002\u0002\u0af1\u0af2",
  "\u0007A\u0002\u0002\u0af2\u01b9\u0003\u0002\u0002\u0002\u0af3\u0af4",
  "\u0007B\u0002\u0002\u0af4\u01bb\u0003\u0002\u0002\u0002\u0af5\u0af6",
  "\u0007C\u0002\u0002\u0af6\u01bd\u0003\u0002\u0002\u0002\u0af7\u0af8",
  "\u0007D\u0002\u0002\u0af8\u01bf\u0003\u0002\u0002\u0002\u0af9\u0afa",
  "\u0007.\u0002\u0002\u0afa\u01c1\u0003\u0002\u0002\u0002\u0afb\u0afc",
  "\u0007/\u0002\u0002\u0afc\u01c3\u0003\u0002\u0002\u0002\u0afd\u0afe",
  "\u0007\u0093\u0002\u0002\u0afe\u01c5\u0003\u0002\u0002\u0002\u0aff\u0b00",
  "\u0007\u0095\u0002\u0002\u0b00\u01c7\u0003\u0002\u0002\u0002\u0b01\u0b02",
  "\u0007\u0096\u0002\u0002\u0b02\u01c9\u0003\u0002\u0002\u0002\u0b03\u0b04",
  "\u0007\u0097\u0002\u0002\u0b04\u01cb\u0003\u0002\u0002\u0002\u0b05\u0b06",
  "\u0007\u0098\u0002\u0002\u0b06\u01cd\u0003\u0002\u0002\u0002\u0b07\u0b08",
  "\u0007\u0099\u0002\u0002\u0b08\u01cf\u0003\u0002\u0002\u0002\u0b09\u0b0a",
  "\u0007\u009a\u0002\u0002\u0b0a\u01d1\u0003\u0002\u0002\u0002\u0b0b\u0b0c",
  "\u0007\u009b\u0002\u0002\u0b0c\u01d3\u0003\u0002\u0002\u0002\u0b0d\u0b0e",
  "\u0007\u009c\u0002\u0002\u0b0e\u01d5\u0003\u0002\u0002\u0002\u0b0f\u0b10",
  "\u0007\u009d\u0002\u0002\u0b10\u01d7\u0003\u0002\u0002\u0002\u0b11\u0b12",
  "\u0007\u009e\u0002\u0002\u0b12\u01d9\u0003\u0002\u0002\u0002\u0b13\u0b14",
  "\u0007\u009f\u0002\u0002\u0b14\u01db\u0003\u0002\u0002\u0002\u0b15\u0b16",
  "\u0007\u00a0\u0002\u0002\u0b16\u01dd\u0003\u0002\u0002\u0002\u0b17\u0b18",
  "\u0007\u00a1\u0002\u0002\u0b18\u01df\u0003\u0002\u0002\u0002\u0b19\u0b1a",
  "\u0007\u00a2\u0002\u0002\u0b1a\u01e1\u0003\u0002\u0002\u0002\u0b1b\u0b1c",
  "\u0007\u00a4\u0002\u0002\u0b1c\u01e3\u0003\u0002\u0002\u0002\u0b1d\u0b1e",
  "\u0007\u00a3\u0002\u0002\u0b1e\u01e5\u0003\u0002\u0002\u0002\u0b1f\u0b20",
  "\u0007\u00a5\u0002\u0002\u0b20\u01e7\u0003\u0002\u0002\u0002\u0b21\u0b22",
  "\u0007\u00a6\u0002\u0002\u0b22\u01e9\u0003\u0002\u0002\u0002\u0b23\u0b24",
  "\u0007\u00a7\u0002\u0002\u0b24\u01eb\u0003\u0002\u0002\u0002\u0b25\u0b26",
  "\u0007\u00a8\u0002\u0002\u0b26\u01ed\u0003\u0002\u0002\u0002\u0b27\u0b28",
  "\u0007\u00aa\u0002\u0002\u0b28\u01ef\u0003\u0002\u0002\u0002\u0b29\u0b2a",
  "\u0007\u00a9\u0002\u0002\u0b2a\u01f1\u0003\u0002\u0002\u0002\u0b2b\u0b2c",
  "\u0007\u00ab\u0002\u0002\u0b2c\u01f3\u0003\u0002\u0002\u0002\u0b2d\u0b2e",
  "\u0007\u00ac\u0002\u0002\u0b2e\u01f5\u0003\u0002\u0002\u0002\u0b2f\u0b30",
  "\u0007\u00ad\u0002\u0002\u0b30\u01f7\u0003\u0002\u0002\u0002\u0b31\u0b32",
  "\u0007\u00ae\u0002\u0002\u0b32\u01f9\u0003\u0002\u0002\u0002\u0b33\u0b34",
  "\u0007\u00af\u0002\u0002\u0b34\u01fb\u0003\u0002\u0002\u0002\u0b35\u0b36",
  "\u0007\u00b0\u0002\u0002\u0b36\u01fd\u0003\u0002\u0002\u0002\u0b37\u0b38",
  "\u0007\u00b1\u0002\u0002\u0b38\u01ff\u0003\u0002\u0002\u0002\u0b39\u0b3a",
  "\u0007\u00b2\u0002\u0002\u0b3a\u0201\u0003\u0002\u0002\u0002\u0b3b\u0b3c",
  "\u0007\u00b3\u0002\u0002\u0b3c\u0203\u0003\u0002\u0002\u0002\u0b3d\u0b3e",
  "\u0007\u00b4\u0002\u0002\u0b3e\u0205\u0003\u0002\u0002\u0002\u0b3f\u0b40",
  "\u0007\u00b5\u0002\u0002\u0b40\u0207\u0003\u0002\u0002\u0002\u0b41\u0b42",
  "\u0007\u00b6\u0002\u0002\u0b42\u0209\u0003\u0002\u0002\u0002\u0b43\u0b44",
  "\u0007\u00b7\u0002\u0002\u0b44\u020b\u0003\u0002\u0002\u0002\u0b45\u0b46",
  "\u0007\u00b8\u0002\u0002\u0b46\u020d\u0003\u0002\u0002\u0002\u0b47\u0b48",
  "\u0007\u00b9\u0002\u0002\u0b48\u020f\u0003\u0002\u0002\u0002\u0b49\u0b4a",
  "\u0007\u00ba\u0002\u0002\u0b4a\u0211\u0003\u0002\u0002\u0002\u0b4b\u0b4c",
  "\u0007\u00bb\u0002\u0002\u0b4c\u0213\u0003\u0002\u0002\u0002\u0b4d\u0b4e",
  "\u0007\u00bc\u0002\u0002\u0b4e\u0215\u0003\u0002\u0002\u0002\u0b4f\u0b50",
  "\u0007\u00bd\u0002\u0002\u0b50\u0217\u0003\u0002\u0002\u0002\u0b51\u0b52",
  "\u0007\u00be\u0002\u0002\u0b52\u0219\u0003\u0002\u0002\u0002\u0b53\u0b54",
  "\u0007\u00bf\u0002\u0002\u0b54\u021b\u0003\u0002\u0002\u0002\u0b55\u0b56",
  "\u0007\u0094\u0002\u0002\u0b56\u021d\u0003\u0002\u0002\u0002\u0b57\u0b58",
  "\u0007F\u0002\u0002\u0b58\u021f\u0003\u0002\u0002\u0002\u0b59\u0b5a",
  "\u0007G\u0002\u0002\u0b5a\u0221\u0003\u0002\u0002\u0002\u0b5b\u0b5c",
  "\u0007H\u0002\u0002\u0b5c\u0223\u0003\u0002\u0002\u0002\u0b5d\u0b5e",
  "\u0007I\u0002\u0002\u0b5e\u0225\u0003\u0002\u0002\u0002\u0b5f\u0b60",
  "\u0007J\u0002\u0002\u0b60\u0227\u0003\u0002\u0002\u0002\u0b61\u0b62",
  "\u0007K\u0002\u0002\u0b62\u0229\u0003\u0002\u0002\u0002\u0b63\u0b64",
  "\u0007L\u0002\u0002\u0b64\u022b\u0003\u0002\u0002\u0002\u0b65\u0b66",
  "\u0007M\u0002\u0002\u0b66\u022d\u0003\u0002\u0002\u0002\u0b67\u0b68",
  "\u0007N\u0002\u0002\u0b68\u022f\u0003\u0002\u0002\u0002\u0b69\u0b6a",
  "\u0007O\u0002\u0002\u0b6a\u0231\u0003\u0002\u0002\u0002\u0b6b\u0b6c",
  "\u0007P\u0002\u0002\u0b6c\u0233\u0003\u0002\u0002\u0002\u0b6d\u0b6e",
  "\u0007R\u0002\u0002\u0b6e\u0235\u0003\u0002\u0002\u0002\u0b6f\u0b70",
  "\u0007\u00cb\u0002\u0002\u0b70\u0237\u0003\u0002\u0002\u0002\u0b71\u0b72",
  "\u0007U\u0002\u0002\u0b72\u0239\u0003\u0002\u0002\u0002\u0b73\u0b74",
  "\u0007V\u0002\u0002\u0b74\u023b\u0003\u0002\u0002\u0002\u0b75\u0b76",
  "\u0007W\u0002\u0002\u0b76\u023d\u0003\u0002\u0002\u0002\u0b77\u0b78",
  "\u0007X\u0002\u0002\u0b78\u023f\u0003\u0002\u0002\u0002\u0b79\u0b7a",
  "\u0007[\u0002\u0002\u0b7a\u0241\u0003\u0002\u0002\u0002\u0b7b\u0b7c",
  "\u0007Z\u0002\u0002\u0b7c\u0243\u0003\u0002\u0002\u0002\u0b7d\u0b7e",
  "\u0007\\\u0002\u0002\u0b7e\u0245\u0003\u0002\u0002\u0002\u0b7f\u0b80",
  "\u0007]\u0002\u0002\u0b80\u0247\u0003\u0002\u0002\u0002\u0b81\u0b82",
  "\u0007^\u0002\u0002\u0b82\u0249\u0003\u0002\u0002\u0002\u0b83\u0b84",
  "\u0007_\u0002\u0002\u0b84\u024b\u0003\u0002\u0002\u0002\u0b85\u0b86",
  "\u0007a\u0002\u0002\u0b86\u024d\u0003\u0002\u0002\u0002\u0b87\u0b88",
  "\u0007b\u0002\u0002\u0b88\u024f\u0003\u0002\u0002\u0002\u0b89\u0b8a",
  "\u0007c\u0002\u0002\u0b8a\u0251\u0003\u0002\u0002\u0002\u0b8b\u0b8c",
  "\u0007e\u0002\u0002\u0b8c\u0253\u0003\u0002\u0002\u0002\u0b8d\u0b8e",
  "\u0007i\u0002\u0002\u0b8e\u0255\u0003\u0002\u0002\u0002\u0b8f\u0b90",
  "\u0007k\u0002\u0002\u0b90\u0257\u0003\u0002\u0002\u0002\u0b91\u0b92",
  "\u0007l\u0002\u0002\u0b92\u0259\u0003\u0002\u0002\u0002\u0b93\u0b94",
  "\u0007m\u0002\u0002\u0b94\u025b\u0003\u0002\u0002\u0002\u0b95\u0b96",
  "\u0007n\u0002\u0002\u0b96\u025d\u0003\u0002\u0002\u0002\u0b97\u0b98",
  "\u0007p\u0002\u0002\u0b98\u025f\u0003\u0002\u0002\u0002\u0b99\u0b9a",
  "\u0007r\u0002\u0002\u0b9a\u0261\u0003\u0002\u0002\u0002\u0b9b\u0b9c",
  "\u0007s\u0002\u0002\u0b9c\u0263\u0003\u0002\u0002\u0002\u0b9d\u0b9e",
  "\u0007t\u0002\u0002\u0b9e\u0265\u0003\u0002\u0002\u0002\u0b9f\u0ba0",
  "\u0007q\u0002\u0002\u0ba0\u0267\u0003\u0002\u0002\u0002\u0ba1\u0ba2",
  "\u0007v\u0002\u0002\u0ba2\u0269\u0003\u0002\u0002\u0002\u0ba3\u0ba4",
  "\u0007w\u0002\u0002\u0ba4\u026b\u0003\u0002\u0002\u0002\u0ba5\u0ba6",
  "\u0007x\u0002\u0002\u0ba6\u026d\u0003\u0002\u0002\u0002\u0ba7\u0ba8",
  "\u0007z\u0002\u0002\u0ba8\u026f\u0003\u0002\u0002\u0002\u0ba9\u0baa",
  "\u0007{\u0002\u0002\u0baa\u0271\u0003\u0002\u0002\u0002\u0bab\u0bac",
  "\u0007|\u0002\u0002\u0bac\u0273\u0003\u0002\u0002\u0002\u0bad\u0bae",
  "\u0007}\u0002\u0002\u0bae\u0275\u0003\u0002\u0002\u0002\u0baf\u0bb0",
  "\u0007\u007f\u0002\u0002\u0bb0\u0277\u0003\u0002\u0002\u0002\u0bb1\u0bb2",
  "\u0007\u0080\u0002\u0002\u0bb2\u0279\u0003\u0002\u0002\u0002\u0bb3\u0bb4",
  "\u0007\u0082\u0002\u0002\u0bb4\u027b\u0003\u0002\u0002\u0002\u0bb5\u0bb6",
  "\u0007\u0084\u0002\u0002\u0bb6\u027d\u0003\u0002\u0002\u0002\u0bb7\u0bb8",
  "\u0007\u0085\u0002\u0002\u0bb8\u027f\u0003\u0002\u0002\u0002\u0bb9\u0bba",
  "\u0007\u0087\u0002\u0002\u0bba\u0281\u0003\u0002\u0002\u0002\u0bbb\u0bbc",
  "\u0007\u0088\u0002\u0002\u0bbc\u0283\u0003\u0002\u0002\u0002\u0bbd\u0bbe",
  "\u0007\u0089\u0002\u0002\u0bbe\u0285\u0003\u0002\u0002\u0002\u0bbf\u0bc0",
  "\u0007\u008a\u0002\u0002\u0bc0\u0287\u0003\u0002\u0002\u0002\u0bc1\u0bc2",
  "\u0007\u008b\u0002\u0002\u0bc2\u0289\u0003\u0002\u0002\u0002\u0bc3\u0bc4",
  "\u0007\u00e2\u0002\u0002\u0bc4\u028b\u0003\u0002\u0002\u0002\u0bc5\u0bc6",
  "\u0007\u008c\u0002\u0002\u0bc6\u028d\u0003\u0002\u0002\u0002\u0bc7\u0bc8",
  "\u0007\u008e\u0002\u0002\u0bc8\u028f\u0003\u0002\u0002\u0002\u0bc9\u0bca",
  "\u0007\u008f\u0002\u0002\u0bca\u0291\u0003\u0002\u0002\u0002\u0bcb\u0bcc",
  "\u0007\u0090\u0002\u0002\u0bcc\u0293\u0003\u0002\u0002\u0002\u0bcd\u0bce",
  "\u0007\u0091\u0002\u0002\u0bce\u0295\u0003\u0002\u0002\u0002\u0bcf\u0bd0",
  "\u0007o\u0002\u0002\u0bd0\u0297\u0003\u0002\u0002\u0002\u0bd1\u0bd2",
  "\u0007\u0002\u0002\u0003\u0bd2\u0299\u0003\u0002\u0002\u0002\u0bd3\u0bd4",
  "\u0007\u0003\u0002\u0002\u0bd4\u029b\u0003\u0002\u0002\u0002\u0bd5\u0bd6",
  "\u0007\u0004\u0002\u0002\u0bd6\u029d\u0003\u0002\u0002\u0002\u0bd7\u0bd8",
  "\u0007\u0005\u0002\u0002\u0bd8\u029f\u0003\u0002\u0002\u0002\u0bd9\u0bda",
  "\u0007\u0006\u0002\u0002\u0bda\u02a1\u0003\u0002\u0002\u0002\u0bdb\u0bdc",
  "\u0007\u00de\u0002\u0002\u0bdc\u02a3\u0003\u0002\u0002\u0002\u0bdd\u0bde",
  "\u0007\u00df\u0002\u0002\u0bde\u02a5\u0003\u0002\u0002\u0002\u0bdf\u0be0",
  "\u0007\u0007\u0002\u0002\u0be0\u02a7\u0003\u0002\u0002\u0002\u0be1\u0be2",
  "\u0007\b\u0002\u0002\u0be2\u02a9\u0003\u0002\u0002\u0002\u0be3\u0be4",
  "\u0007\t\u0002\u0002\u0be4\u02ab\u0003\u0002\u0002\u0002\u0be5\u0be6",
  "\u0007\u000b\u0002\u0002\u0be6\u02ad\u0003\u0002\u0002\u0002\u0be7\u0c77",
  "\u0007\u00db\u0002\u0002\u0be8\u0be9\u0007\u0019\u0002\u0002\u0be9\u0c77",
  "\u0007\u001a\u0002\u0002\u0bea\u0c77\u0007\u001b\u0002\u0002\u0beb\u0c77",
  "\u0007\u001c\u0002\u0002\u0bec\u0c77\u0007\u001d\u0002\u0002\u0bed\u0c77",
  "\u0007\u001e\u0002\u0002\u0bee\u0c77\u0007\u001f\u0002\u0002\u0bef\u0c77",
  "\u0007 \u0002\u0002\u0bf0\u0c77\u0007!\u0002\u0002\u0bf1\u0c77\u0007",
  '"\u0002\u0002\u0bf2\u0c77\u0007#\u0002\u0002\u0bf3\u0c77\u0007$\u0002',
  "\u0002\u0bf4\u0c77\u0007%\u0002\u0002\u0bf5\u0c77\u0007&\u0002\u0002",
  "\u0bf6\u0c77\u0007'\u0002\u0002\u0bf7\u0c77\u0007(\u0002\u0002\u0bf8",
  "\u0c77\u0007)\u0002\u0002\u0bf9\u0c77\u0007*\u0002\u0002\u0bfa\u0c77",
  "\u0007+\u0002\u0002\u0bfb\u0c77\u0007,\u0002\u0002\u0bfc\u0c77\u0007",
  "-\u0002\u0002\u0bfd\u0c77\u0007.\u0002\u0002\u0bfe\u0c77\u00070\u0002",
  "\u0002\u0bff\u0c77\u00071\u0002\u0002\u0c00\u0c77\u00072\u0002\u0002",
  "\u0c01\u0c77\u00073\u0002\u0002\u0c02\u0c77\u00074\u0002\u0002\u0c03",
  "\u0c77\u00075\u0002\u0002\u0c04\u0c77\u00076\u0002\u0002\u0c05\u0c77",
  "\u00077\u0002\u0002\u0c06\u0c77\u00078\u0002\u0002\u0c07\u0c77\u0007",
  "9\u0002\u0002\u0c08\u0c77\u0007:\u0002\u0002\u0c09\u0c77\u0007;\u0002",
  "\u0002\u0c0a\u0c77\u0007<\u0002\u0002\u0c0b\u0c77\u0007=\u0002\u0002",
  "\u0c0c\u0c77\u0007>\u0002\u0002\u0c0d\u0c77\u0007?\u0002\u0002\u0c0e",
  "\u0c77\u0007@\u0002\u0002\u0c0f\u0c77\u0007A\u0002\u0002\u0c10\u0c77",
  "\u0007B\u0002\u0002\u0c11\u0c77\u0007C\u0002\u0002\u0c12\u0c77\u0007",
  "D\u0002\u0002\u0c13\u0c77\u0007E\u0002\u0002\u0c14\u0c77\u0007F\u0002",
  "\u0002\u0c15\u0c77\u0007G\u0002\u0002\u0c16\u0c77\u0007H\u0002\u0002",
  "\u0c17\u0c77\u0007I\u0002\u0002\u0c18\u0c77\u0007J\u0002\u0002\u0c19",
  "\u0c77\u0007K\u0002\u0002\u0c1a\u0c77\u0007L\u0002\u0002\u0c1b\u0c77",
  "\u0007M\u0002\u0002\u0c1c\u0c77\u0007N\u0002\u0002\u0c1d\u0c77\u0007",
  "O\u0002\u0002\u0c1e\u0c77\u0007P\u0002\u0002\u0c1f\u0c77\u0007Q\u0002",
  "\u0002\u0c20\u0c77\u0007R\u0002\u0002\u0c21\u0c77\u0007S\u0002\u0002",
  "\u0c22\u0c77\u0007T\u0002\u0002\u0c23\u0c77\u0007U\u0002\u0002\u0c24",
  "\u0c77\u0007V\u0002\u0002\u0c25\u0c77\u0007W\u0002\u0002\u0c26\u0c77",
  "\u0007X\u0002\u0002\u0c27\u0c77\u0007Y\u0002\u0002\u0c28\u0c77\u0007",
  "Z\u0002\u0002\u0c29\u0c77\u0007[\u0002\u0002\u0c2a\u0c77\u0007\\\u0002",
  "\u0002\u0c2b\u0c77\u0007]\u0002\u0002\u0c2c\u0c77\u0007^\u0002\u0002",
  "\u0c2d\u0c77\u0007_\u0002\u0002\u0c2e\u0c77\u0007`\u0002\u0002\u0c2f",
  "\u0c77\u0007a\u0002\u0002\u0c30\u0c77\u0007b\u0002\u0002\u0c31\u0c77",
  "\u0007c\u0002\u0002\u0c32\u0c77\u0007d\u0002\u0002\u0c33\u0c77\u0007",
  "e\u0002\u0002\u0c34\u0c77\u0007f\u0002\u0002\u0c35\u0c77\u0007g\u0002",
  "\u0002\u0c36\u0c77\u0007h\u0002\u0002\u0c37\u0c77\u0007i\u0002\u0002",
  "\u0c38\u0c77\u0007j\u0002\u0002\u0c39\u0c77\u0007k\u0002\u0002\u0c3a",
  "\u0c77\u0007l\u0002\u0002\u0c3b\u0c77\u0007m\u0002\u0002\u0c3c\u0c77",
  "\u0007n\u0002\u0002\u0c3d\u0c77\u0007o\u0002\u0002\u0c3e\u0c77\u0007",
  "p\u0002\u0002\u0c3f\u0c77\u0007q\u0002\u0002\u0c40\u0c77\u0007u\u0002",
  "\u0002\u0c41\u0c77\u0007v\u0002\u0002\u0c42\u0c77\u0007w\u0002\u0002",
  "\u0c43\u0c77\u0007x\u0002\u0002\u0c44\u0c77\u0007y\u0002\u0002\u0c45",
  "\u0c77\u0007z\u0002\u0002\u0c46\u0c77\u0007{\u0002\u0002\u0c47\u0c77",
  "\u0007|\u0002\u0002\u0c48\u0c77\u0007}\u0002\u0002\u0c49\u0c77\u0007",
  "~\u0002\u0002\u0c4a\u0c77\u0007\u007f\u0002\u0002\u0c4b\u0c77\u0007",
  "\u0080\u0002\u0002\u0c4c\u0c77\u0007\u0081\u0002\u0002\u0c4d\u0c77\u0007",
  "\u0082\u0002\u0002\u0c4e\u0c77\u0007\u0083\u0002\u0002\u0c4f\u0c77\u0007",
  "\u0084\u0002\u0002\u0c50\u0c77\u0007\u0085\u0002\u0002\u0c51\u0c77\u0007",
  "\u0086\u0002\u0002\u0c52\u0c77\u0007\u0087\u0002\u0002\u0c53\u0c77\u0007",
  "\u0088\u0002\u0002\u0c54\u0c77\u0007\u0089\u0002\u0002\u0c55\u0c77\u0007",
  "\u008a\u0002\u0002\u0c56\u0c77\u0007\u008b\u0002\u0002\u0c57\u0c77\u0007",
  "\u008c\u0002\u0002\u0c58\u0c77\u0007\u008d\u0002\u0002\u0c59\u0c77\u0007",
  "\u008e\u0002\u0002\u0c5a\u0c77\u0007\u008f\u0002\u0002\u0c5b\u0c77\u0007",
  "\u0090\u0002\u0002\u0c5c\u0c77\u0007\u0091\u0002\u0002\u0c5d\u0c77\u0007",
  "\u0092\u0002\u0002\u0c5e\u0c77\u0007\u0093\u0002\u0002\u0c5f\u0c77\u0007",
  "\u00c0\u0002\u0002\u0c60\u0c77\u0007\u00c1\u0002\u0002\u0c61\u0c77\u0007",
  "\u00c2\u0002\u0002\u0c62\u0c77\u0007\u00c3\u0002\u0002\u0c63\u0c77\u0007",
  "\u00c4\u0002\u0002\u0c64\u0c77\u0007\u00c5\u0002\u0002\u0c65\u0c77\u0007",
  "\u00c6\u0002\u0002\u0c66\u0c77\u0007\u00c7\u0002\u0002\u0c67\u0c77\u0007",
  "\u00c8\u0002\u0002\u0c68\u0c77\u0007\u00c9\u0002\u0002\u0c69\u0c77\u0007",
  "\u00ca\u0002\u0002\u0c6a\u0c77\u0007\u00cb\u0002\u0002\u0c6b\u0c77\u0007",
  "\u00cc\u0002\u0002\u0c6c\u0c77\u0007\u00cd\u0002\u0002\u0c6d\u0c77\u0007",
  "\u00ce\u0002\u0002\u0c6e\u0c77\u0007\u00cf\u0002\u0002\u0c6f\u0c77\u0007",
  "\u00d0\u0002\u0002\u0c70\u0c77\u0007\u00d1\u0002\u0002\u0c71\u0c77\u0007",
  "\u00d2\u0002\u0002\u0c72\u0c77\u0007\u00d3\u0002\u0002\u0c73\u0c77\u0007",
  "\u00d4\u0002\u0002\u0c74\u0c77\u0007\u00e2\u0002\u0002\u0c75\u0c77\u0007",
  "\u00e3\u0002\u0002\u0c76\u0be7\u0003\u0002\u0002\u0002\u0c76\u0be8\u0003",
  "\u0002\u0002\u0002\u0c76\u0bea\u0003\u0002\u0002\u0002\u0c76\u0beb\u0003",
  "\u0002\u0002\u0002\u0c76\u0bec\u0003\u0002\u0002\u0002\u0c76\u0bed\u0003",
  "\u0002\u0002\u0002\u0c76\u0bee\u0003\u0002\u0002\u0002\u0c76\u0bef\u0003",
  "\u0002\u0002\u0002\u0c76\u0bf0\u0003\u0002\u0002\u0002\u0c76\u0bf1\u0003",
  "\u0002\u0002\u0002\u0c76\u0bf2\u0003\u0002\u0002\u0002\u0c76\u0bf3\u0003",
  "\u0002\u0002\u0002\u0c76\u0bf4\u0003\u0002\u0002\u0002\u0c76\u0bf5\u0003",
  "\u0002\u0002\u0002\u0c76\u0bf6\u0003\u0002\u0002\u0002\u0c76\u0bf7\u0003",
  "\u0002\u0002\u0002\u0c76\u0bf8\u0003\u0002\u0002\u0002\u0c76\u0bf9\u0003",
  "\u0002\u0002\u0002\u0c76\u0bfa\u0003\u0002\u0002\u0002\u0c76\u0bfb\u0003",
  "\u0002\u0002\u0002\u0c76\u0bfc\u0003\u0002\u0002\u0002\u0c76\u0bfd\u0003",
  "\u0002\u0002\u0002\u0c76\u0bfe\u0003\u0002\u0002\u0002\u0c76\u0bff\u0003",
  "\u0002\u0002\u0002\u0c76\u0c00\u0003\u0002\u0002\u0002\u0c76\u0c01\u0003",
  "\u0002\u0002\u0002\u0c76\u0c02\u0003\u0002\u0002\u0002\u0c76\u0c03\u0003",
  "\u0002\u0002\u0002\u0c76\u0c04\u0003\u0002\u0002\u0002\u0c76\u0c05\u0003",
  "\u0002\u0002\u0002\u0c76\u0c06\u0003\u0002\u0002\u0002\u0c76\u0c07\u0003",
  "\u0002\u0002\u0002\u0c76\u0c08\u0003\u0002\u0002\u0002\u0c76\u0c09\u0003",
  "\u0002\u0002\u0002\u0c76\u0c0a\u0003\u0002\u0002\u0002\u0c76\u0c0b\u0003",
  "\u0002\u0002\u0002\u0c76\u0c0c\u0003\u0002\u0002\u0002\u0c76\u0c0d\u0003",
  "\u0002\u0002\u0002\u0c76\u0c0e\u0003\u0002\u0002\u0002\u0c76\u0c0f\u0003",
  "\u0002\u0002\u0002\u0c76\u0c10\u0003\u0002\u0002\u0002\u0c76\u0c11\u0003",
  "\u0002\u0002\u0002\u0c76\u0c12\u0003\u0002\u0002\u0002\u0c76\u0c13\u0003",
  "\u0002\u0002\u0002\u0c76\u0c14\u0003\u0002\u0002\u0002\u0c76\u0c15\u0003",
  "\u0002\u0002\u0002\u0c76\u0c16\u0003\u0002\u0002\u0002\u0c76\u0c17\u0003",
  "\u0002\u0002\u0002\u0c76\u0c18\u0003\u0002\u0002\u0002\u0c76\u0c19\u0003",
  "\u0002\u0002\u0002\u0c76\u0c1a\u0003\u0002\u0002\u0002\u0c76\u0c1b\u0003",
  "\u0002\u0002\u0002\u0c76\u0c1c\u0003\u0002\u0002\u0002\u0c76\u0c1d\u0003",
  "\u0002\u0002\u0002\u0c76\u0c1e\u0003\u0002\u0002\u0002\u0c76\u0c1f\u0003",
  "\u0002\u0002\u0002\u0c76\u0c20\u0003\u0002\u0002\u0002\u0c76\u0c21\u0003",
  "\u0002\u0002\u0002\u0c76\u0c22\u0003\u0002\u0002\u0002\u0c76\u0c23\u0003",
  "\u0002\u0002\u0002\u0c76\u0c24\u0003\u0002\u0002\u0002\u0c76\u0c25\u0003",
  "\u0002\u0002\u0002\u0c76\u0c26\u0003\u0002\u0002\u0002\u0c76\u0c27\u0003",
  "\u0002\u0002\u0002\u0c76\u0c28\u0003\u0002\u0002\u0002\u0c76\u0c29\u0003",
  "\u0002\u0002\u0002\u0c76\u0c2a\u0003\u0002\u0002\u0002\u0c76\u0c2b\u0003",
  "\u0002\u0002\u0002\u0c76\u0c2c\u0003\u0002\u0002\u0002\u0c76\u0c2d\u0003",
  "\u0002\u0002\u0002\u0c76\u0c2e\u0003\u0002\u0002\u0002\u0c76\u0c2f\u0003",
  "\u0002\u0002\u0002\u0c76\u0c30\u0003\u0002\u0002\u0002\u0c76\u0c31\u0003",
  "\u0002\u0002\u0002\u0c76\u0c32\u0003\u0002\u0002\u0002\u0c76\u0c33\u0003",
  "\u0002\u0002\u0002\u0c76\u0c34\u0003\u0002\u0002\u0002\u0c76\u0c35\u0003",
  "\u0002\u0002\u0002\u0c76\u0c36\u0003\u0002\u0002\u0002\u0c76\u0c37\u0003",
  "\u0002\u0002\u0002\u0c76\u0c38\u0003\u0002\u0002\u0002\u0c76\u0c39\u0003",
  "\u0002\u0002\u0002\u0c76\u0c3a\u0003\u0002\u0002\u0002\u0c76\u0c3b\u0003",
  "\u0002\u0002\u0002\u0c76\u0c3c\u0003\u0002\u0002\u0002\u0c76\u0c3d\u0003",
  "\u0002\u0002\u0002\u0c76\u0c3e\u0003\u0002\u0002\u0002\u0c76\u0c3f\u0003",
  "\u0002\u0002\u0002\u0c76\u0c40\u0003\u0002\u0002\u0002\u0c76\u0c41\u0003",
  "\u0002\u0002\u0002\u0c76\u0c42\u0003\u0002\u0002\u0002\u0c76\u0c43\u0003",
  "\u0002\u0002\u0002\u0c76\u0c44\u0003\u0002\u0002\u0002\u0c76\u0c45\u0003",
  "\u0002\u0002\u0002\u0c76\u0c46\u0003\u0002\u0002\u0002\u0c76\u0c47\u0003",
  "\u0002\u0002\u0002\u0c76\u0c48\u0003\u0002\u0002\u0002\u0c76\u0c49\u0003",
  "\u0002\u0002\u0002\u0c76\u0c4a\u0003\u0002\u0002\u0002\u0c76\u0c4b\u0003",
  "\u0002\u0002\u0002\u0c76\u0c4c\u0003\u0002\u0002\u0002\u0c76\u0c4d\u0003",
  "\u0002\u0002\u0002\u0c76\u0c4e\u0003\u0002\u0002\u0002\u0c76\u0c4f\u0003",
  "\u0002\u0002\u0002\u0c76\u0c50\u0003\u0002\u0002\u0002\u0c76\u0c51\u0003",
  "\u0002\u0002\u0002\u0c76\u0c52\u0003\u0002\u0002\u0002\u0c76\u0c53\u0003",
  "\u0002\u0002\u0002\u0c76\u0c54\u0003\u0002\u0002\u0002\u0c76\u0c55\u0003",
  "\u0002\u0002\u0002\u0c76\u0c56\u0003\u0002\u0002\u0002\u0c76\u0c57\u0003",
  "\u0002\u0002\u0002\u0c76\u0c58\u0003\u0002\u0002\u0002\u0c76\u0c59\u0003",
  "\u0002\u0002\u0002\u0c76\u0c5a\u0003\u0002\u0002\u0002\u0c76\u0c5b\u0003",
  "\u0002\u0002\u0002\u0c76\u0c5c\u0003\u0002\u0002\u0002\u0c76\u0c5d\u0003",
  "\u0002\u0002\u0002\u0c76\u0c5e\u0003\u0002\u0002\u0002\u0c76\u0c5f\u0003",
  "\u0002\u0002\u0002\u0c76\u0c60\u0003\u0002\u0002\u0002\u0c76\u0c61\u0003",
  "\u0002\u0002\u0002\u0c76\u0c62\u0003\u0002\u0002\u0002\u0c76\u0c63\u0003",
  "\u0002\u0002\u0002\u0c76\u0c64\u0003\u0002\u0002\u0002\u0c76\u0c65\u0003",
  "\u0002\u0002\u0002\u0c76\u0c66\u0003\u0002\u0002\u0002\u0c76\u0c67\u0003",
  "\u0002\u0002\u0002\u0c76\u0c68\u0003\u0002\u0002\u0002\u0c76\u0c69\u0003",
  "\u0002\u0002\u0002\u0c76\u0c6a\u0003\u0002\u0002\u0002\u0c76\u0c6b\u0003",
  "\u0002\u0002\u0002\u0c76\u0c6c\u0003\u0002\u0002\u0002\u0c76\u0c6d\u0003",
  "\u0002\u0002\u0002\u0c76\u0c6e\u0003\u0002\u0002\u0002\u0c76\u0c6f\u0003",
  "\u0002\u0002\u0002\u0c76\u0c70\u0003\u0002\u0002\u0002\u0c76\u0c71\u0003",
  "\u0002\u0002\u0002\u0c76\u0c72\u0003\u0002\u0002\u0002\u0c76\u0c73\u0003",
  "\u0002\u0002\u0002\u0c76\u0c74\u0003\u0002\u0002\u0002\u0c76\u0c75\u0003",
  "\u0002\u0002\u0002\u0c77\u02af\u0003\u0002\u0002\u0002\u010f\u02b1\u02b4",
  "\u02ba\u02bf\u02c1\u02c6\u02c9\u02cc\u02f8\u0309\u030c\u0313\u0318\u0323",
  "\u032d\u033c\u0347\u034c\u0357\u035b\u0360\u0368\u036d\u0371\u0376\u037b",
  "\u038a\u0390\u0395\u039f\u03a4\u03ae\u03b3\u03b8\u03bf\u03c7\u03d4\u03e0",
  "\u03e4\u03e8\u03ed\u03f2\u0405\u040c\u0414\u0418\u041d\u0430\u0439\u0448",
  "\u044a\u0456\u0464\u046b\u0472\u047a\u0485\u0499\u04a4\u04bb\u04c9\u04d0",
  "\u04d9\u04ec\u04f4\u04fa\u04ff\u0506\u050b\u0513\u0518\u051f\u0524\u052b",
  "\u0530\u0537\u053e\u0545\u054c\u0551\u0558\u055f\u0564\u056b\u0570\u0577",
  "\u057b\u057f\u0584\u0588\u0598\u05a4\u05ab\u05b4\u05c2\u05ca\u05d0\u05d5",
  "\u05e3\u05eb\u05f3\u05fb\u0604\u0610\u0614\u0618\u0626\u062e\u0637\u0642",
  "\u0647\u064e\u0651\u0657\u0662\u0665\u066b\u0675\u067e\u0682\u0684\u068a",
  "\u0690\u0696\u069c\u06a2\u06a8\u06ae\u06b4\u06ba\u06c0\u06c6\u06cc\u06d2",
  "\u06d8\u06de\u06e0\u06e6\u06ec\u06f3\u06f6\u06fb\u06fe\u0701\u0704\u0707",
  "\u0709\u0711\u0714\u071a\u071d\u0723\u0726\u072c\u072f\u0735\u0738\u073e",
  "\u0741\u0747\u074a\u0750\u0753\u0759\u075c\u0762\u0768\u0770\u0773\u0779",
  "\u077c\u0782\u078a\u0792\u079b\u07a4\u07a7\u07ad\u07b0\u07b6\u07b9\u07bf",
  "\u07c2\u07c8\u07cb\u07d3\u07d6\u07dc\u07df\u07e5\u07e8\u07ee\u07f1\u07f7",
  "\u07fa\u07fc\u0800\u0807\u081e\u0822\u0826\u082b\u0833\u083b\u083f\u0842",
  "\u0848\u084c\u0853\u085e\u086b\u0874\u08a7\u08b0\u08b3\u08c3\u08cf\u08db",
  "\u08e7\u08ef\u08f2\u08fa\u08fd\u0902\u0909\u090d\u0911\u0914\u0926\u0940",
  "\u094c\u0955\u095e\u0962\u0965\u096a\u096d\u0970\u0973\u0983\u098c\u0995",
  "\u099c\u09a7\u09ad\u09af\u09b7\u09d0\u09db\u09e7\u09f3\u09fe\u0a03\u0a17",
  "\u0a1b\u0a20\u0a26\u0a2a\u0a36\u0a47\u0a4e\u0a55\u0a59\u0a5e\u0a7d\u0a84",
  "\u0a88\u0a8f\u0c76",
].join("");

const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map(
  (ds, index) => new antlr4.dfa.DFA(ds, index),
);

const sharedContextCache = new antlr4.PredictionContextCache();

class CqlParser extends antlr4.Parser {
  static grammarFileName = "CqlParser.g4";
  static literalNames = [
    null,
    "'('",
    "')'",
    "'{'",
    "'}'",
    "'['",
    "']'",
    "','",
    "';'",
    "':'",
    null,
    null,
    null,
    null,
    "'.'",
    "'*'",
    "'/'",
    "'%'",
    "'+'",
    "'--'",
    "'-'",
    "'\"'",
    "'''",
  ];
  static symbolicNames = [
    null,
    "LR_BRACKET",
    "RR_BRACKET",
    "LC_BRACKET",
    "RC_BRACKET",
    "LS_BRACKET",
    "RS_BRACKET",
    "COMMA",
    "SEMI",
    "COLON",
    "SPACE",
    "SPEC_MYSQL_COMMENT",
    "COMMENT_INPUT",
    "LINE_COMMENT",
    "DOT",
    "STAR",
    "DIVIDE",
    "MODULE",
    "PLUS",
    "MINUSMINUS",
    "MINUS",
    "DQUOTE",
    "SQUOTE",
    "K_ADD",
    "K_AGGREGATE",
    "K_ALL",
    "K_ALLOW",
    "K_ALTER",
    "K_AND",
    "K_ANY",
    "K_APPLY",
    "K_AS",
    "K_ASC",
    "K_AUTHORIZE",
    "K_BATCH",
    "K_BEGIN",
    "K_BY",
    "K_CALLED",
    "K_CLUSTERING",
    "K_COLUMNFAMILY",
    "K_COMPACT",
    "K_CONSISTENCY",
    "K_CONTAINS",
    "K_CREATE",
    "K_CUSTOM",
    "K_SEARCH",
    "K_DELETE",
    "K_DESC",
    "K_DESCRIBE",
    "K_DISTINCT",
    "K_DROP",
    "K_DURABLE_WRITES",
    "K_EACH_QUORUM",
    "K_ENTRIES",
    "K_EXECUTE",
    "K_EXISTS",
    "K_FALSE",
    "K_FILTERING",
    "K_FINALFUNC",
    "K_FROM",
    "K_FULL",
    "K_FUNCTION",
    "K_FUNCTIONS",
    "K_GRANT",
    "K_IF",
    "K_IN",
    "K_INDEX",
    "K_INFINITY",
    "K_INITCOND",
    "K_INPUT",
    "K_INSERT",
    "K_INTO",
    "K_IS",
    "K_JSON",
    "K_KEY",
    "K_KEYS",
    "K_KEYSPACE",
    "K_KEYSPACES",
    "K_LANGUAGE",
    "K_LEVEL",
    "K_LIMIT",
    "K_LOCAL_ONE",
    "K_LOCAL_QUORUM",
    "K_LOGGED",
    "K_LOGIN",
    "K_MATERIALIZED",
    "K_MODIFY",
    "K_NAN",
    "K_NORECURSIVE",
    "K_NOSUPERUSER",
    "K_NOT",
    "K_NULL",
    "K_OF",
    "K_ON",
    "K_ONE",
    "K_OPTIONS",
    "K_OR",
    "K_ORDER",
    "K_PARTITION",
    "K_PASSWORD",
    "K_PER",
    "K_PERMISSION",
    "K_PERMISSIONS",
    "K_PRIMARY",
    "K_QUORUM",
    "K_RENAME",
    "K_REPLACE",
    "K_REPLICATION",
    "K_RETURNS",
    "K_REVOKE",
    "K_ROLE",
    "K_ROLES",
    "K_INTERNAL",
    "K_LDAP",
    "K_SCHEME",
    "K_SCHEMA",
    "K_SELECT",
    "K_SET",
    "K_SFUNC",
    "K_STATIC",
    "K_STORAGE",
    "K_STYPE",
    "K_SUPERUSER",
    "K_TABLE",
    "K_THREE",
    "K_TIMESTAMP",
    "K_TO",
    "K_TOKEN",
    "K_TRIGGER",
    "K_TRUE",
    "K_TRUNCATE",
    "K_TTL",
    "K_TWO",
    "K_TYPE",
    "K_UNLOGGED",
    "K_UPDATE",
    "K_USE",
    "K_USER",
    "K_USING",
    "K_UUID",
    "K_VALUES",
    "K_VIEW",
    "K_WHERE",
    "K_WITH",
    "K_WRITETIME",
    "K_ASCII",
    "K_CASE_SENITIVE",
    "K_NORMALIZE",
    "K_ANALYZED",
    "K_IS_LITERAL",
    "K_MAX_COMPACTION_FLUSH_MEMORY_IN_MB",
    "K_TOKENIZATION_ENABLE_STEMMING",
    "K_TOKENIZATION_SKIP_STOP_WORDS",
    "K_TOKENIZATION_LOCALE",
    "K_TOKENIZATION_NORMALIZE_LOWERCASE",
    "K_TOKENIZATION_NORMALIZE_UPPERCASE",
    "K_NORMALIZE_LOWERCASE",
    "K_NORMALIZE_UPPERCASE",
    "K_MODE",
    "K_ANALYZER_CLASS",
    "K_STORAGE_ATTACHED_INDEX",
    "K_SASI_INDEX",
    "K_SOLR_INDEX",
    "K_SPACE_SAVING_NO_JOIN",
    "K_SPACE_SAVING_ALL",
    "K_SPACE_SAVING_SLOW_TRIE_PRECISION",
    "K_SPACE_SAVING_NO_TEXT_FIELD",
    "K_DOC_VALUES",
    "K_COPY_FIELD",
    "K_EXCLUDED",
    "K_INDEXED",
    "K_LOWERCASE",
    "K_COLUMNS",
    "K_PROFILES",
    "K_CONFIG",
    "K_AUTOCOMMIT_TIME",
    "K_DEFAULT_QUERY_FIELD",
    "K_DIRECTORY_FACTORY",
    "K_FILTER_CACHE_LOW_WATERMARK",
    "K_FILTER_CACHE_HIGH_WATERMARK",
    "K_DIRECTORY_FACTORY_CLASS",
    "K_MERGE_MAX_THREAD_COUNT",
    "K_MERGE_MAX_MERGE_COUNT",
    "K_RAM_BUFFER_SIZE",
    "K_REALTIME",
    "K_RECOVERY",
    "K_REINDEX",
    "K_LENIENT",
    "K_STANDARD",
    "K_ENCRYPTED",
    "K_BIGINT",
    "K_BLOB",
    "K_BOOLEAN",
    "K_COUNTER",
    "K_DATE",
    "K_DECIMAL",
    "K_DOUBLE",
    "K_FLOAT",
    "K_FROZEN",
    "K_INET",
    "K_INT",
    "K_LIST",
    "K_MAP",
    "K_SMALLINT",
    "K_TEXT",
    "K_TIMEUUID",
    "K_TIME",
    "K_TINYINT",
    "K_TUPLE",
    "K_VARCHAR",
    "K_VARINT",
    "CODE_BLOCK",
    "STRING_LITERAL",
    "DECIMAL_LITERAL",
    "FLOAT_LITERAL",
    "HEXADECIMAL_LITERAL",
    "REAL_LITERAL",
    "OBJECT_NAME",
    "UUID",
    "OPERATOR_EQ",
    "OPERATOR_LT",
    "OPERATOR_GT",
    "OPERATOR_LTE",
    "OPERATOR_GTE",
    "K_USERS",
    "K_VECTOR",
  ];
  static ruleNames = [
    "root",
    "cqls",
    "statementSeparator",
    "empty",
    "cql",
    "revoke",
    "listUsers",
    "listRoles",
    "listPermissions",
    "grant",
    "priviledge",
    "resource",
    "createUser",
    "createRole",
    "createType",
    "typeMemberColumnList",
    "createTrigger",
    "createMaterializedView",
    "materializedViewWhere",
    "columnNotNullList",
    "columnNotNull",
    "materializedViewOptions",
    "createKeyspace",
    "createFunction",
    "codeBlock",
    "paramList",
    "returnMode",
    "createAggregate",
    "initCondDefinition",
    "initCondHash",
    "initCondHashItem",
    "initCondListNested",
    "initCondList",
    "orReplace",
    "alterUser",
    "userPassword",
    "userSuperUser",
    "alterType",
    "alterTypeOperation",
    "alterTypeRename",
    "alterTypeRenameList",
    "alterTypeRenameItem",
    "alterTypeAdd",
    "alterTypeAlterType",
    "alterTable",
    "alterTableOperation",
    "alterTableWith",
    "alterTableRename",
    "alterTableDropCompactStorage",
    "alterTableDropColumns",
    "alterTableDropColumnList",
    "alterTableAdd",
    "alterTableColumnDefinition",
    "alterRole",
    "roleWith",
    "roleWithOptions",
    "alterMaterializedView",
    "dropUser",
    "dropType",
    "dropMaterializedView",
    "dropAggregate",
    "dropFunction",
    "dropTrigger",
    "dropRole",
    "dropTable",
    "dropKeyspace",
    "dropIndex",
    "createTable",
    "withElement",
    "clusteringOrderColumns",
    "clusteringOrder",
    "tableOptions",
    "tableOptionItem",
    "tableOptionName",
    "tableOptionValue",
    "optionHash",
    "optionHashItem",
    "optionHashKey",
    "optionHashValue",
    "columnDefinitionList",
    "columnDefinition",
    "primaryKeyColumn",
    "primaryKeyElement",
    "primaryKeyDefinition",
    "singlePrimaryKey",
    "compoundKey",
    "compositeKey",
    "partitionKeyList",
    "clusteringKeyList",
    "partitionKey",
    "clusteringKey",
    "applyBatch",
    "beginBatch",
    "batchType",
    "alterKeyspace",
    "replicationList",
    "replicationListItem",
    "durableWrites",
    "use",
    "truncate",
    "createIndex",
    "customIndexOption",
    "createSearchIndex",
    "searchIndexConfigs",
    "directoryFactory",
    "searchIndexOptions",
    "searchIndexProfile",
    "searchIndexProfiles",
    "searchIndexColumnList",
    "searchIndexColumn",
    "indexName",
    "indexColumnSpec",
    "indexKeysSpec",
    "indexEntriesSSpec",
    "indexFullSpec",
    "indexValuesSpec",
    "deleteStatement",
    "deleteColumnList",
    "deleteColumnItem",
    "update",
    "ifSpec",
    "ifConditionList",
    "ifCondition",
    "assignments",
    "assignmentElement",
    "assignmentSet",
    "assignmentMap",
    "assignmentMapExpression",
    "assignmentList",
    "assignmentTuple",
    "insert",
    "usingTtlTimestamp",
    "timestamp",
    "ttl",
    "usingTimestampSpec",
    "ifNotExist",
    "ifExist",
    "insertValuesSpec",
    "insertColumnSpec",
    "columnList",
    "expressionList",
    "expression",
    "select",
    "allowFilteringSpec",
    "limitSpec",
    "fromSpec",
    "fromSpecElement",
    "orderSpec",
    "orderSpecElement",
    "whereSpec",
    "distinctSpec",
    "selectElements",
    "selectElement",
    "relationElements",
    "relationElement",
    "relalationContains",
    "relalationContainsKey",
    "functionCall",
    "functionArgs",
    "constant",
    "decimalLiteral",
    "floatLiteral",
    "stringLiteral",
    "booleanLiteral",
    "hexadecimalLiteral",
    "keyspace",
    "table",
    "column",
    "dataType",
    "dataTypeName",
    "dataTypeDefinition",
    "orderDirection",
    "role",
    "trigger",
    "triggerClass",
    "materializedView",
    "type",
    "aggregate",
    "functionStatement",
    "language",
    "user",
    "password",
    "hashKey",
    "param",
    "paramName",
    "kwAdd",
    "kwAggregate",
    "kwAll",
    "kwAllPermissions",
    "kwAllow",
    "kwAlter",
    "kwAnd",
    "kwApply",
    "kwAs",
    "kwAsc",
    "kwAuthorize",
    "kwBatch",
    "kwBegin",
    "kwBy",
    "kwCalled",
    "kwClustering",
    "kwCompact",
    "kwContains",
    "kwCreate",
    "kwDelete",
    "kwDesc",
    "kwDescibe",
    "kwDistinct",
    "kwDrop",
    "kwDurableWrites",
    "kwEntries",
    "kwExecute",
    "kwExists",
    "kwFiltering",
    "kwFinalfunc",
    "kwFrom",
    "kwFull",
    "kwFunction",
    "kwFunctions",
    "kwGrant",
    "kwIf",
    "kwIn",
    "kwIndex",
    "kwCustom",
    "kwSearch",
    "kwAscii",
    "kwNormalize",
    "kwAnalyzed",
    "kwIsLiteral",
    "kwMaxCompactionFlushMemoryInMb",
    "kwTokenizationEnableStemming",
    "kwTokenizationSkipStopWords",
    "kwTokenizationLocale",
    "kwTokenizationNormalizeLowercase",
    "kwTokenizationNormalizeUppercase",
    "kwNormalizeLowercase",
    "kwNormalizeUppercase",
    "kwMode",
    "kwAnalyzerClass",
    "kwStorageAttachedIndex",
    "kwSolrIndex",
    "kwSASIIndex",
    "kwSpaceSavingNoJoin",
    "kwSpaceSavingAll",
    "kwSpaceSavingSlowTriePrecision",
    "kwSpaceSavingNoTextField",
    "kwCopyField",
    "kwDocValues",
    "kwExcluded",
    "kwIndexed",
    "kwLowerCase",
    "kwColumns",
    "kwProfiles",
    "kwConfig",
    "kwAutoCommitTime",
    "kwDefaultQueryField",
    "kwDirectoryFactory",
    "kwFilterCacheLowWaterMark",
    "kwFilterCacheHighWaterMark",
    "kwDirectoryFactoryClass",
    "kwMergeMaxThreadCount",
    "kwMergeMaxMergeCount",
    "kwRamBufferSize",
    "kwRealtime",
    "kwRecovery",
    "kwReindex",
    "kwLenient",
    "kwStandard",
    "kwEncrypted",
    "kwCaseSensitive",
    "kwInitcond",
    "kwInput",
    "kwInsert",
    "kwInto",
    "kwIs",
    "kwJson",
    "kwKey",
    "kwKeys",
    "kwKeyspace",
    "kwKeyspaces",
    "kwLanguage",
    "kwLimit",
    "kwList",
    "kwLogged",
    "kwLogin",
    "kwMaterialized",
    "kwModify",
    "kwNosuperuser",
    "kwNorecursive",
    "kwNot",
    "kwNull",
    "kwOf",
    "kwOn",
    "kwOptions",
    "kwOr",
    "kwOrder",
    "kwPassword",
    "kwPrimary",
    "kwRename",
    "kwReplace",
    "kwReplication",
    "kwReturns",
    "kwRole",
    "kwInternal",
    "kwLdap",
    "kwScheme",
    "kwRoles",
    "kwSelect",
    "kwSet",
    "kwSfunc",
    "kwStorage",
    "kwStype",
    "kwSuperuser",
    "kwTable",
    "kwTimestamp",
    "kwTo",
    "kwTrigger",
    "kwTruncate",
    "kwTtl",
    "kwType",
    "kwUnlogged",
    "kwUpdate",
    "kwUse",
    "kwUser",
    "kwUsers",
    "kwUsing",
    "kwValues",
    "kwView",
    "kwWhere",
    "kwWith",
    "kwRevoke",
    "eof",
    "syntaxBracketLr",
    "syntaxBracketRr",
    "syntaxBracketLc",
    "syntaxBracketRc",
    "syntaxBracketLa",
    "syntaxBracketRa",
    "syntaxBracketLs",
    "syntaxBracketRs",
    "syntaxComma",
    "syntaxColon",
    "id",
  ];

  constructor(input) {
    super(input);
    this._interp = new antlr4.atn.ParserATNSimulator(
      this,
      atn,
      decisionsToDFA,
      sharedContextCache,
    );
    this.ruleNames = CqlParser.ruleNames;
    this.literalNames = CqlParser.literalNames;
    this.symbolicNames = CqlParser.symbolicNames;
  }

  get atn() {
    return atn;
  }

  root() {
    let localctx = new RootContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CqlParser.RULE_root);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 687;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        (((_la - 8) & ~0x1f) == 0 &&
          ((1 << (_la - 8)) &
            ((1 << (CqlParser.SEMI - 8)) |
              (1 << (CqlParser.K_ALTER - 8)) |
              (1 << (CqlParser.K_APPLY - 8)) |
              (1 << (CqlParser.K_BEGIN - 8)))) !==
            0) ||
        (((_la - 43) & ~0x1f) == 0 &&
          ((1 << (_la - 43)) &
            ((1 << (CqlParser.K_CREATE - 43)) |
              (1 << (CqlParser.K_DELETE - 43)) |
              (1 << (CqlParser.K_DROP - 43)) |
              (1 << (CqlParser.K_GRANT - 43)) |
              (1 << (CqlParser.K_INSERT - 43)))) !==
            0) ||
        (((_la - 109) & ~0x1f) == 0 &&
          ((1 << (_la - 109)) &
            ((1 << (CqlParser.K_REVOKE - 109)) |
              (1 << (CqlParser.K_SELECT - 109)) |
              (1 << (CqlParser.K_TRUNCATE - 109)) |
              (1 << (CqlParser.K_UPDATE - 109)) |
              (1 << (CqlParser.K_USE - 109)))) !==
            0) ||
        _la === CqlParser.K_LIST
      ) {
        this.state = 686;
        this.cqls();
      }

      this.state = 690;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.MINUSMINUS) {
        this.state = 689;
        this.match(CqlParser.MINUSMINUS);
      }

      this.state = 692;
      this.eof();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  cqls() {
    let localctx = new CqlsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CqlParser.RULE_cqls);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 703;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 701;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CqlParser.K_ALTER:
            case CqlParser.K_APPLY:
            case CqlParser.K_BEGIN:
            case CqlParser.K_CREATE:
            case CqlParser.K_DELETE:
            case CqlParser.K_DROP:
            case CqlParser.K_GRANT:
            case CqlParser.K_INSERT:
            case CqlParser.K_REVOKE:
            case CqlParser.K_SELECT:
            case CqlParser.K_TRUNCATE:
            case CqlParser.K_UPDATE:
            case CqlParser.K_USE:
            case CqlParser.K_LIST:
              this.state = 694;
              this.cql();
              this.state = 696;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CqlParser.MINUSMINUS) {
                this.state = 695;
                this.match(CqlParser.MINUSMINUS);
              }

              this.state = 698;
              this.statementSeparator();
              break;
            case CqlParser.SEMI:
              this.state = 700;
              this.empty();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        }
        this.state = 705;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
      }

      this.state = 714;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_ALTER:
        case CqlParser.K_APPLY:
        case CqlParser.K_BEGIN:
        case CqlParser.K_CREATE:
        case CqlParser.K_DELETE:
        case CqlParser.K_DROP:
        case CqlParser.K_GRANT:
        case CqlParser.K_INSERT:
        case CqlParser.K_REVOKE:
        case CqlParser.K_SELECT:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_LIST:
          this.state = 706;
          this.cql();
          this.state = 711;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);
          if (la_ === 1) {
            this.state = 708;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CqlParser.MINUSMINUS) {
              this.state = 707;
              this.match(CqlParser.MINUSMINUS);
            }

            this.state = 710;
            this.statementSeparator();
          }
          break;
        case CqlParser.SEMI:
          this.state = 713;
          this.empty();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  statementSeparator() {
    let localctx = new StatementSeparatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CqlParser.RULE_statementSeparator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 716;
      this.match(CqlParser.SEMI);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  empty() {
    let localctx = new EmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CqlParser.RULE_empty);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 718;
      this.statementSeparator();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  cql() {
    let localctx = new CqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CqlParser.RULE_cql);
    try {
      this.state = 758;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 720;
          this.alterKeyspace();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 721;
          this.alterMaterializedView();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 722;
          this.alterRole();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 723;
          this.alterTable();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 724;
          this.alterType();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 725;
          this.alterUser();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 726;
          this.applyBatch();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 727;
          this.createAggregate();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 728;
          this.createFunction();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 729;
          this.createIndex();
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 730;
          this.createSearchIndex();
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 731;
          this.createKeyspace();
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 732;
          this.createMaterializedView();
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 733;
          this.createRole();
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 734;
          this.createTable();
          break;

        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 735;
          this.createTrigger();
          break;

        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 736;
          this.createType();
          break;

        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 737;
          this.createUser();
          break;

        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 738;
          this.deleteStatement();
          break;

        case 20:
          this.enterOuterAlt(localctx, 20);
          this.state = 739;
          this.dropAggregate();
          break;

        case 21:
          this.enterOuterAlt(localctx, 21);
          this.state = 740;
          this.dropFunction();
          break;

        case 22:
          this.enterOuterAlt(localctx, 22);
          this.state = 741;
          this.dropIndex();
          break;

        case 23:
          this.enterOuterAlt(localctx, 23);
          this.state = 742;
          this.dropKeyspace();
          break;

        case 24:
          this.enterOuterAlt(localctx, 24);
          this.state = 743;
          this.dropMaterializedView();
          break;

        case 25:
          this.enterOuterAlt(localctx, 25);
          this.state = 744;
          this.dropRole();
          break;

        case 26:
          this.enterOuterAlt(localctx, 26);
          this.state = 745;
          this.dropTable();
          break;

        case 27:
          this.enterOuterAlt(localctx, 27);
          this.state = 746;
          this.dropTrigger();
          break;

        case 28:
          this.enterOuterAlt(localctx, 28);
          this.state = 747;
          this.dropType();
          break;

        case 29:
          this.enterOuterAlt(localctx, 29);
          this.state = 748;
          this.dropUser();
          break;

        case 30:
          this.enterOuterAlt(localctx, 30);
          this.state = 749;
          this.grant();
          break;

        case 31:
          this.enterOuterAlt(localctx, 31);
          this.state = 750;
          this.insert();
          break;

        case 32:
          this.enterOuterAlt(localctx, 32);
          this.state = 751;
          this.listPermissions();
          break;

        case 33:
          this.enterOuterAlt(localctx, 33);
          this.state = 752;
          this.listRoles();
          break;

        case 34:
          this.enterOuterAlt(localctx, 34);
          this.state = 753;
          this.revoke();
          break;

        case 35:
          this.enterOuterAlt(localctx, 35);
          this.state = 754;
          this.select();
          break;

        case 36:
          this.enterOuterAlt(localctx, 36);
          this.state = 755;
          this.truncate();
          break;

        case 37:
          this.enterOuterAlt(localctx, 37);
          this.state = 756;
          this.update();
          break;

        case 38:
          this.enterOuterAlt(localctx, 38);
          this.state = 757;
          this.use();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  revoke() {
    let localctx = new RevokeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CqlParser.RULE_revoke);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 760;
      this.kwRevoke();
      this.state = 761;
      this.priviledge();
      this.state = 762;
      this.kwOn();
      this.state = 763;
      this.resource();
      this.state = 764;
      this.kwFrom();
      this.state = 765;
      this.role();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  listUsers() {
    let localctx = new ListUsersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CqlParser.RULE_listUsers);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 767;
      this.kwList();
      this.state = 768;
      this.kwUsers();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  listRoles() {
    let localctx = new ListRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CqlParser.RULE_listRoles);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 770;
      this.kwList();
      this.state = 771;
      this.kwRoles();
      this.state = 775;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_OF) {
        this.state = 772;
        this.kwOf();
        this.state = 773;
        this.role();
      }

      this.state = 778;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_NORECURSIVE) {
        this.state = 777;
        this.kwNorecursive();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  listPermissions() {
    let localctx = new ListPermissionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CqlParser.RULE_listPermissions);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 780;
      this.kwList();
      this.state = 781;
      this.priviledge();
      this.state = 785;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_ON) {
        this.state = 782;
        this.kwOn();
        this.state = 783;
        this.resource();
      }

      this.state = 790;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_OF) {
        this.state = 787;
        this.kwOf();
        this.state = 788;
        this.role();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  grant() {
    let localctx = new GrantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CqlParser.RULE_grant);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 792;
      this.kwGrant();
      this.state = 793;
      this.priviledge();
      this.state = 794;
      this.kwOn();
      this.state = 795;
      this.resource();
      this.state = 796;
      this.kwTo();
      this.state = 797;
      this.role();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  priviledge() {
    let localctx = new PriviledgeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CqlParser.RULE_priviledge);
    try {
      this.state = 811;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_ALL:
          this.enterOuterAlt(localctx, 1);
          this.state = 801;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 13, this._ctx);
          switch (la_) {
            case 1:
              this.state = 799;
              this.kwAll();
              break;

            case 2:
              this.state = 800;
              this.kwAllPermissions();
              break;
          }
          break;
        case CqlParser.K_ALTER:
          this.enterOuterAlt(localctx, 2);
          this.state = 803;
          this.kwAlter();
          break;
        case CqlParser.K_AUTHORIZE:
          this.enterOuterAlt(localctx, 3);
          this.state = 804;
          this.kwAuthorize();
          break;
        case CqlParser.K_DESCRIBE:
          this.enterOuterAlt(localctx, 4);
          this.state = 805;
          this.kwDescibe();
          break;
        case CqlParser.K_EXECUTE:
          this.enterOuterAlt(localctx, 5);
          this.state = 806;
          this.kwExecute();
          break;
        case CqlParser.K_CREATE:
          this.enterOuterAlt(localctx, 6);
          this.state = 807;
          this.kwCreate();
          break;
        case CqlParser.K_DROP:
          this.enterOuterAlt(localctx, 7);
          this.state = 808;
          this.kwDrop();
          break;
        case CqlParser.K_MODIFY:
          this.enterOuterAlt(localctx, 8);
          this.state = 809;
          this.kwModify();
          break;
        case CqlParser.K_SELECT:
          this.enterOuterAlt(localctx, 9);
          this.state = 810;
          this.kwSelect();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  resource() {
    let localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CqlParser.RULE_resource);
    try {
      this.state = 857;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 813;
          this.kwAll();
          this.state = 814;
          this.kwFunctions();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 816;
          this.kwAll();
          this.state = 817;
          this.kwFunctions();
          this.state = 818;
          this.kwIn();
          this.state = 819;
          this.kwKeyspace();
          this.state = 820;
          this.keyspace();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 822;
          this.kwFunction();
          this.state = 826;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);
          if (la_ === 1) {
            this.state = 823;
            this.keyspace();
            this.state = 824;
            this.match(CqlParser.DOT);
          }
          this.state = 828;
          this.functionStatement();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 830;
          this.kwAll();
          this.state = 831;
          this.kwKeyspaces();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 833;
          this.kwKeyspace();
          this.state = 834;
          this.keyspace();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 837;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
          if (la_ === 1) {
            this.state = 836;
            this.kwTable();
          }
          this.state = 842;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 17, this._ctx);
          if (la_ === 1) {
            this.state = 839;
            this.keyspace();
            this.state = 840;
            this.match(CqlParser.DOT);
          }
          this.state = 844;
          this.table();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 845;
          this.kwAll();
          this.state = 846;
          this.kwRoles();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 848;
          this.kwRole();
          this.state = 849;
          this.role();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 853;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CqlParser.K_INTERNAL:
              this.state = 851;
              this.kwInternal();
              break;
            case CqlParser.K_LDAP:
              this.state = 852;
              this.kwLdap();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          this.state = 855;
          this.kwScheme();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createUser() {
    let localctx = new CreateUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CqlParser.RULE_createUser);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 859;
      this.kwCreate();
      this.state = 860;
      this.kwUser();
      this.state = 862;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);
      if (la_ === 1) {
        this.state = 861;
        this.ifNotExist();
      }
      this.state = 864;
      this.user();
      this.state = 865;
      this.kwWith();
      this.state = 866;
      this.kwPassword();
      this.state = 867;
      this.stringLiteral();
      this.state = 870;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_SUPERUSER:
          this.state = 868;
          this.kwSuperuser();
          break;
        case CqlParser.K_NOSUPERUSER:
          this.state = 869;
          this.kwNosuperuser();
          break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
          break;
        default:
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createRole() {
    let localctx = new CreateRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CqlParser.RULE_createRole);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 872;
      this.kwCreate();
      this.state = 873;
      this.kwRole();
      this.state = 875;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
      if (la_ === 1) {
        this.state = 874;
        this.ifNotExist();
      }
      this.state = 877;
      this.role();
      this.state = 879;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_WITH) {
        this.state = 878;
        this.roleWith();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createType() {
    let localctx = new CreateTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CqlParser.RULE_createType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 881;
      this.kwCreate();
      this.state = 882;
      this.kwType();
      this.state = 884;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
      if (la_ === 1) {
        this.state = 883;
        this.ifNotExist();
      }
      this.state = 889;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 25, this._ctx);
      if (la_ === 1) {
        this.state = 886;
        this.keyspace();
        this.state = 887;
        this.match(CqlParser.DOT);
      }
      this.state = 891;
      this.type();
      this.state = 892;
      this.syntaxBracketLr();
      this.state = 893;
      this.typeMemberColumnList();
      this.state = 894;
      this.syntaxBracketRr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  typeMemberColumnList() {
    let localctx = new TypeMemberColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CqlParser.RULE_typeMemberColumnList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 896;
      this.column();
      this.state = 897;
      this.dataType();
      this.state = 904;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 898;
        this.syntaxComma();
        this.state = 899;
        this.column();
        this.state = 900;
        this.dataType();
        this.state = 906;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createTrigger() {
    let localctx = new CreateTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CqlParser.RULE_createTrigger);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 907;
      this.kwCreate();
      this.state = 908;
      this.kwTrigger();
      this.state = 910;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);
      if (la_ === 1) {
        this.state = 909;
        this.ifNotExist();
      }
      this.state = 915;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);
      if (la_ === 1) {
        this.state = 912;
        this.keyspace();
        this.state = 913;
        this.match(CqlParser.DOT);
      }
      this.state = 917;
      this.trigger();
      this.state = 918;
      this.kwUsing();
      this.state = 919;
      this.triggerClass();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createMaterializedView() {
    let localctx = new CreateMaterializedViewContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 34, CqlParser.RULE_createMaterializedView);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 921;
      this.kwCreate();
      this.state = 922;
      this.kwMaterialized();
      this.state = 923;
      this.kwView();
      this.state = 925;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);
      if (la_ === 1) {
        this.state = 924;
        this.ifNotExist();
      }
      this.state = 930;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 30, this._ctx);
      if (la_ === 1) {
        this.state = 927;
        this.keyspace();
        this.state = 928;
        this.match(CqlParser.DOT);
      }
      this.state = 932;
      this.materializedView();
      this.state = 933;
      this.kwAs();
      this.state = 934;
      this.kwSelect();
      this.state = 935;
      this.columnList();
      this.state = 936;
      this.kwFrom();
      this.state = 940;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 31, this._ctx);
      if (la_ === 1) {
        this.state = 937;
        this.keyspace();
        this.state = 938;
        this.match(CqlParser.DOT);
      }
      this.state = 942;
      this.table();
      this.state = 943;
      this.materializedViewWhere();
      this.state = 945;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_PRIMARY) {
        this.state = 944;
        this.primaryKeyElement();
      }

      this.state = 950;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_WITH) {
        this.state = 947;
        this.kwWith();
        this.state = 948;
        this.materializedViewOptions();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  materializedViewWhere() {
    let localctx = new MaterializedViewWhereContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 36, CqlParser.RULE_materializedViewWhere);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 952;
      this.kwWhere();
      this.state = 953;
      this.columnNotNullList();
      this.state = 957;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_AND) {
        this.state = 954;
        this.kwAnd();
        this.state = 955;
        this.relationElements();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNotNullList() {
    let localctx = new ColumnNotNullListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CqlParser.RULE_columnNotNullList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 959;
      this.columnNotNull();
      this.state = 965;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 35, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 960;
          this.kwAnd();
          this.state = 961;
          this.columnNotNull();
        }
        this.state = 967;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 35, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNotNull() {
    let localctx = new ColumnNotNullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CqlParser.RULE_columnNotNull);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 968;
      this.column();
      this.state = 969;
      this.kwIs();
      this.state = 970;
      this.kwNot();
      this.state = 971;
      this.kwNull();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  materializedViewOptions() {
    let localctx = new MaterializedViewOptionsContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 42, CqlParser.RULE_materializedViewOptions);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 973;
      this.tableOptions();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createKeyspace() {
    let localctx = new CreateKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CqlParser.RULE_createKeyspace);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 975;
      this.kwCreate();
      this.state = 976;
      this.kwKeyspace();
      this.state = 978;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);
      if (la_ === 1) {
        this.state = 977;
        this.ifNotExist();
      }
      this.state = 980;
      this.keyspace();
      this.state = 981;
      this.kwWith();
      this.state = 982;
      this.kwReplication();
      this.state = 983;
      this.match(CqlParser.OPERATOR_EQ);
      this.state = 984;
      this.syntaxBracketLc();
      this.state = 985;
      this.replicationList();
      this.state = 986;
      this.syntaxBracketRc();
      this.state = 990;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_AND) {
        this.state = 987;
        this.kwAnd();
        this.state = 988;
        this.durableWrites();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createFunction() {
    let localctx = new CreateFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CqlParser.RULE_createFunction);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 992;
      this.kwCreate();
      this.state = 994;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_OR) {
        this.state = 993;
        this.orReplace();
      }

      this.state = 996;
      this.kwFunction();
      this.state = 998;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);
      if (la_ === 1) {
        this.state = 997;
        this.ifNotExist();
      }
      this.state = 1003;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 40, this._ctx);
      if (la_ === 1) {
        this.state = 1000;
        this.keyspace();
        this.state = 1001;
        this.match(CqlParser.DOT);
      }
      this.state = 1005;
      this.functionStatement();
      this.state = 1006;
      this.syntaxBracketLr();
      this.state = 1008;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        (((_la - 23) & ~0x1f) == 0 &&
          ((1 << (_la - 23)) &
            ((1 << (CqlParser.K_ADD - 23)) |
              (1 << (CqlParser.K_ALL - 23)) |
              (1 << (CqlParser.K_ALLOW - 23)) |
              (1 << (CqlParser.K_ALTER - 23)) |
              (1 << (CqlParser.K_AND - 23)) |
              (1 << (CqlParser.K_ANY - 23)) |
              (1 << (CqlParser.K_APPLY - 23)) |
              (1 << (CqlParser.K_AS - 23)) |
              (1 << (CqlParser.K_ASC - 23)) |
              (1 << (CqlParser.K_AUTHORIZE - 23)) |
              (1 << (CqlParser.K_BATCH - 23)) |
              (1 << (CqlParser.K_BEGIN - 23)) |
              (1 << (CqlParser.K_BY - 23)) |
              (1 << (CqlParser.K_CALLED - 23)) |
              (1 << (CqlParser.K_CLUSTERING - 23)) |
              (1 << (CqlParser.K_COLUMNFAMILY - 23)) |
              (1 << (CqlParser.K_COMPACT - 23)) |
              (1 << (CqlParser.K_CONSISTENCY - 23)) |
              (1 << (CqlParser.K_CONTAINS - 23)) |
              (1 << (CqlParser.K_CREATE - 23)) |
              (1 << (CqlParser.K_CUSTOM - 23)) |
              (1 << (CqlParser.K_DELETE - 23)) |
              (1 << (CqlParser.K_DESC - 23)) |
              (1 << (CqlParser.K_DESCRIBE - 23)) |
              (1 << (CqlParser.K_DISTINCT - 23)) |
              (1 << (CqlParser.K_DROP - 23)) |
              (1 << (CqlParser.K_DURABLE_WRITES - 23)) |
              (1 << (CqlParser.K_EACH_QUORUM - 23)) |
              (1 << (CqlParser.K_ENTRIES - 23)) |
              (1 << (CqlParser.K_EXECUTE - 23)))) !==
            0) ||
        (((_la - 55) & ~0x1f) == 0 &&
          ((1 << (_la - 55)) &
            ((1 << (CqlParser.K_EXISTS - 55)) |
              (1 << (CqlParser.K_FALSE - 55)) |
              (1 << (CqlParser.K_FILTERING - 55)) |
              (1 << (CqlParser.K_FINALFUNC - 55)) |
              (1 << (CqlParser.K_FROM - 55)) |
              (1 << (CqlParser.K_FULL - 55)) |
              (1 << (CqlParser.K_FUNCTION - 55)) |
              (1 << (CqlParser.K_FUNCTIONS - 55)) |
              (1 << (CqlParser.K_GRANT - 55)) |
              (1 << (CqlParser.K_IF - 55)) |
              (1 << (CqlParser.K_IN - 55)) |
              (1 << (CqlParser.K_INDEX - 55)) |
              (1 << (CqlParser.K_INFINITY - 55)) |
              (1 << (CqlParser.K_INITCOND - 55)) |
              (1 << (CqlParser.K_INPUT - 55)) |
              (1 << (CqlParser.K_INSERT - 55)) |
              (1 << (CqlParser.K_INTO - 55)) |
              (1 << (CqlParser.K_IS - 55)) |
              (1 << (CqlParser.K_JSON - 55)) |
              (1 << (CqlParser.K_KEY - 55)) |
              (1 << (CqlParser.K_KEYS - 55)) |
              (1 << (CqlParser.K_KEYSPACE - 55)) |
              (1 << (CqlParser.K_KEYSPACES - 55)) |
              (1 << (CqlParser.K_LANGUAGE - 55)) |
              (1 << (CqlParser.K_LEVEL - 55)) |
              (1 << (CqlParser.K_LIMIT - 55)) |
              (1 << (CqlParser.K_LOCAL_ONE - 55)) |
              (1 << (CqlParser.K_LOCAL_QUORUM - 55)) |
              (1 << (CqlParser.K_LOGGED - 55)) |
              (1 << (CqlParser.K_LOGIN - 55)) |
              (1 << (CqlParser.K_MATERIALIZED - 55)) |
              (1 << (CqlParser.K_MODIFY - 55)))) !==
            0) ||
        (((_la - 87) & ~0x1f) == 0 &&
          ((1 << (_la - 87)) &
            ((1 << (CqlParser.K_NAN - 87)) |
              (1 << (CqlParser.K_NORECURSIVE - 87)) |
              (1 << (CqlParser.K_NOSUPERUSER - 87)) |
              (1 << (CqlParser.K_NOT - 87)) |
              (1 << (CqlParser.K_NULL - 87)) |
              (1 << (CqlParser.K_OF - 87)) |
              (1 << (CqlParser.K_ON - 87)) |
              (1 << (CqlParser.K_ONE - 87)) |
              (1 << (CqlParser.K_OPTIONS - 87)) |
              (1 << (CqlParser.K_OR - 87)) |
              (1 << (CqlParser.K_ORDER - 87)) |
              (1 << (CqlParser.K_PARTITION - 87)) |
              (1 << (CqlParser.K_PASSWORD - 87)) |
              (1 << (CqlParser.K_PER - 87)) |
              (1 << (CqlParser.K_PERMISSION - 87)) |
              (1 << (CqlParser.K_PERMISSIONS - 87)) |
              (1 << (CqlParser.K_PRIMARY - 87)) |
              (1 << (CqlParser.K_QUORUM - 87)) |
              (1 << (CqlParser.K_RENAME - 87)) |
              (1 << (CqlParser.K_REPLACE - 87)) |
              (1 << (CqlParser.K_REPLICATION - 87)) |
              (1 << (CqlParser.K_RETURNS - 87)) |
              (1 << (CqlParser.K_REVOKE - 87)) |
              (1 << (CqlParser.K_ROLE - 87)) |
              (1 << (CqlParser.K_ROLES - 87)) |
              (1 << (CqlParser.K_SCHEMA - 87)) |
              (1 << (CqlParser.K_SELECT - 87)) |
              (1 << (CqlParser.K_SET - 87)) |
              (1 << (CqlParser.K_SFUNC - 87)))) !==
            0) ||
        (((_la - 119) & ~0x1f) == 0 &&
          ((1 << (_la - 119)) &
            ((1 << (CqlParser.K_STATIC - 119)) |
              (1 << (CqlParser.K_STORAGE - 119)) |
              (1 << (CqlParser.K_STYPE - 119)) |
              (1 << (CqlParser.K_SUPERUSER - 119)) |
              (1 << (CqlParser.K_TABLE - 119)) |
              (1 << (CqlParser.K_THREE - 119)) |
              (1 << (CqlParser.K_TIMESTAMP - 119)) |
              (1 << (CqlParser.K_TO - 119)) |
              (1 << (CqlParser.K_TOKEN - 119)) |
              (1 << (CqlParser.K_TRIGGER - 119)) |
              (1 << (CqlParser.K_TRUE - 119)) |
              (1 << (CqlParser.K_TRUNCATE - 119)) |
              (1 << (CqlParser.K_TTL - 119)) |
              (1 << (CqlParser.K_TWO - 119)) |
              (1 << (CqlParser.K_TYPE - 119)) |
              (1 << (CqlParser.K_UNLOGGED - 119)) |
              (1 << (CqlParser.K_UPDATE - 119)) |
              (1 << (CqlParser.K_USE - 119)) |
              (1 << (CqlParser.K_USER - 119)) |
              (1 << (CqlParser.K_USING - 119)) |
              (1 << (CqlParser.K_UUID - 119)) |
              (1 << (CqlParser.K_VALUES - 119)) |
              (1 << (CqlParser.K_VIEW - 119)) |
              (1 << (CqlParser.K_WHERE - 119)) |
              (1 << (CqlParser.K_WITH - 119)) |
              (1 << (CqlParser.K_WRITETIME - 119)) |
              (1 << (CqlParser.K_ASCII - 119)))) !==
            0) ||
        (((_la - 190) & ~0x1f) == 0 &&
          ((1 << (_la - 190)) &
            ((1 << (CqlParser.K_BIGINT - 190)) |
              (1 << (CqlParser.K_BLOB - 190)) |
              (1 << (CqlParser.K_BOOLEAN - 190)) |
              (1 << (CqlParser.K_COUNTER - 190)) |
              (1 << (CqlParser.K_DATE - 190)) |
              (1 << (CqlParser.K_DECIMAL - 190)) |
              (1 << (CqlParser.K_DOUBLE - 190)) |
              (1 << (CqlParser.K_FLOAT - 190)) |
              (1 << (CqlParser.K_FROZEN - 190)) |
              (1 << (CqlParser.K_INET - 190)) |
              (1 << (CqlParser.K_INT - 190)) |
              (1 << (CqlParser.K_LIST - 190)) |
              (1 << (CqlParser.K_MAP - 190)) |
              (1 << (CqlParser.K_SMALLINT - 190)) |
              (1 << (CqlParser.K_TEXT - 190)) |
              (1 << (CqlParser.K_TIMEUUID - 190)) |
              (1 << (CqlParser.K_TIME - 190)) |
              (1 << (CqlParser.K_TINYINT - 190)) |
              (1 << (CqlParser.K_TUPLE - 190)) |
              (1 << (CqlParser.K_VARCHAR - 190)) |
              (1 << (CqlParser.K_VARINT - 190)) |
              (1 << (CqlParser.OBJECT_NAME - 190)))) !==
            0) ||
        _la === CqlParser.K_USERS ||
        _la === CqlParser.K_VECTOR
      ) {
        this.state = 1007;
        this.paramList();
      }

      this.state = 1010;
      this.syntaxBracketRr();
      this.state = 1011;
      this.returnMode();
      this.state = 1012;
      this.kwReturns();
      this.state = 1013;
      this.dataType();
      this.state = 1014;
      this.kwLanguage();
      this.state = 1015;
      this.language();
      this.state = 1016;
      this.kwAs();
      this.state = 1017;
      this.codeBlock();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  codeBlock() {
    let localctx = new CodeBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CqlParser.RULE_codeBlock);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1019;
      _la = this._input.LA(1);
      if (!(_la === CqlParser.CODE_BLOCK || _la === CqlParser.STRING_LITERAL)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  paramList() {
    let localctx = new ParamListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CqlParser.RULE_paramList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1021;
      this.param();
      this.state = 1027;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1022;
        this.syntaxComma();
        this.state = 1023;
        this.param();
        this.state = 1029;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  returnMode() {
    let localctx = new ReturnModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CqlParser.RULE_returnMode);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1034;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_CALLED:
          this.state = 1030;
          this.kwCalled();
          break;
        case CqlParser.K_RETURNS:
          this.state = 1031;
          this.kwReturns();
          this.state = 1032;
          this.kwNull();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 1036;
      this.kwOn();
      this.state = 1037;
      this.kwNull();
      this.state = 1038;
      this.kwInput();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createAggregate() {
    let localctx = new CreateAggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CqlParser.RULE_createAggregate);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1040;
      this.kwCreate();
      this.state = 1042;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_OR) {
        this.state = 1041;
        this.orReplace();
      }

      this.state = 1044;
      this.kwAggregate();
      this.state = 1046;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);
      if (la_ === 1) {
        this.state = 1045;
        this.ifNotExist();
      }
      this.state = 1051;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 46, this._ctx);
      if (la_ === 1) {
        this.state = 1048;
        this.keyspace();
        this.state = 1049;
        this.match(CqlParser.DOT);
      }
      this.state = 1053;
      this.aggregate();
      this.state = 1054;
      this.syntaxBracketLr();
      this.state = 1055;
      this.dataType();
      this.state = 1056;
      this.syntaxBracketRr();
      this.state = 1057;
      this.kwSfunc();
      this.state = 1058;
      this.functionStatement();
      this.state = 1059;
      this.kwStype();
      this.state = 1060;
      this.dataType();
      this.state = 1061;
      this.kwFinalfunc();
      this.state = 1062;
      this.functionStatement();
      this.state = 1063;
      this.kwInitcond();
      this.state = 1064;
      this.initCondDefinition();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  initCondDefinition() {
    let localctx = new InitCondDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CqlParser.RULE_initCondDefinition);
    try {
      this.state = 1070;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 47, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1066;
          this.constant();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1067;
          this.initCondList();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1068;
          this.initCondListNested();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1069;
          this.initCondHash();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  initCondHash() {
    let localctx = new InitCondHashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CqlParser.RULE_initCondHash);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1072;
      this.syntaxBracketLc();
      this.state = 1073;
      this.initCondHashItem();
      this.state = 1079;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1074;
        this.syntaxComma();
        this.state = 1075;
        this.initCondHashItem();
        this.state = 1081;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1082;
      this.syntaxBracketRc();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  initCondHashItem() {
    let localctx = new InitCondHashItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CqlParser.RULE_initCondHashItem);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1084;
      this.hashKey();
      this.state = 1085;
      this.match(CqlParser.COLON);
      this.state = 1086;
      this.initCondDefinition();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  initCondListNested() {
    let localctx = new InitCondListNestedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CqlParser.RULE_initCondListNested);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1088;
      this.syntaxBracketLr();
      this.state = 1089;
      this.initCondList();
      this.state = 1096;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.LR_BRACKET || _la === CqlParser.COMMA) {
        this.state = 1094;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CqlParser.COMMA:
            this.state = 1090;
            this.syntaxComma();
            this.state = 1091;
            this.constant();
            break;
          case CqlParser.LR_BRACKET:
            this.state = 1093;
            this.initCondList();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1098;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1099;
      this.syntaxBracketRr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  initCondList() {
    let localctx = new InitCondListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CqlParser.RULE_initCondList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1101;
      this.syntaxBracketLr();
      this.state = 1102;
      this.constant();
      this.state = 1108;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1103;
        this.syntaxComma();
        this.state = 1104;
        this.constant();
        this.state = 1110;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1111;
      this.syntaxBracketRr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  orReplace() {
    let localctx = new OrReplaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CqlParser.RULE_orReplace);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1113;
      this.kwOr();
      this.state = 1114;
      this.kwReplace();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterUser() {
    let localctx = new AlterUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CqlParser.RULE_alterUser);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1116;
      this.kwAlter();
      this.state = 1117;
      this.kwUser();
      this.state = 1118;
      this.user();
      this.state = 1119;
      this.kwWith();
      this.state = 1120;
      this.userPassword();
      this.state = 1122;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_NOSUPERUSER || _la === CqlParser.K_SUPERUSER) {
        this.state = 1121;
        this.userSuperUser();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  userPassword() {
    let localctx = new UserPasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CqlParser.RULE_userPassword);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1124;
      this.kwPassword();
      this.state = 1125;
      this.stringLiteral();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  userSuperUser() {
    let localctx = new UserSuperUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CqlParser.RULE_userSuperUser);
    try {
      this.state = 1129;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_SUPERUSER:
          this.enterOuterAlt(localctx, 1);
          this.state = 1127;
          this.kwSuperuser();
          break;
        case CqlParser.K_NOSUPERUSER:
          this.enterOuterAlt(localctx, 2);
          this.state = 1128;
          this.kwNosuperuser();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterType() {
    let localctx = new AlterTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CqlParser.RULE_alterType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1131;
      this.kwAlter();
      this.state = 1132;
      this.kwType();
      this.state = 1136;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);
      if (la_ === 1) {
        this.state = 1133;
        this.keyspace();
        this.state = 1134;
        this.match(CqlParser.DOT);
      }
      this.state = 1138;
      this.type();
      this.state = 1139;
      this.alterTypeOperation();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTypeOperation() {
    let localctx = new AlterTypeOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CqlParser.RULE_alterTypeOperation);
    try {
      this.state = 1144;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_ALTER:
          this.enterOuterAlt(localctx, 1);
          this.state = 1141;
          this.alterTypeAlterType();
          break;
        case CqlParser.K_ADD:
          this.enterOuterAlt(localctx, 2);
          this.state = 1142;
          this.alterTypeAdd();
          break;
        case CqlParser.K_RENAME:
          this.enterOuterAlt(localctx, 3);
          this.state = 1143;
          this.alterTypeRename();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTypeRename() {
    let localctx = new AlterTypeRenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CqlParser.RULE_alterTypeRename);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1146;
      this.kwRename();
      this.state = 1147;
      this.alterTypeRenameList();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTypeRenameList() {
    let localctx = new AlterTypeRenameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CqlParser.RULE_alterTypeRenameList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1149;
      this.alterTypeRenameItem();
      this.state = 1155;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.K_AND) {
        this.state = 1150;
        this.kwAnd();
        this.state = 1151;
        this.alterTypeRenameItem();
        this.state = 1157;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTypeRenameItem() {
    let localctx = new AlterTypeRenameItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CqlParser.RULE_alterTypeRenameItem);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1158;
      this.column();
      this.state = 1159;
      this.kwTo();
      this.state = 1160;
      this.column();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTypeAdd() {
    let localctx = new AlterTypeAddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CqlParser.RULE_alterTypeAdd);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1162;
      this.kwAdd();
      this.state = 1163;
      this.typeMemberColumnList();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTypeAlterType() {
    let localctx = new AlterTypeAlterTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CqlParser.RULE_alterTypeAlterType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1165;
      this.kwAlter();
      this.state = 1166;
      this.column();
      this.state = 1167;
      this.kwType();
      this.state = 1168;
      this.dataType();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTable() {
    let localctx = new AlterTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CqlParser.RULE_alterTable);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1170;
      this.kwAlter();
      this.state = 1171;
      this.kwTable();
      this.state = 1175;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 57, this._ctx);
      if (la_ === 1) {
        this.state = 1172;
        this.keyspace();
        this.state = 1173;
        this.match(CqlParser.DOT);
      }
      this.state = 1177;
      this.table();
      this.state = 1178;
      this.alterTableOperation();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTableOperation() {
    let localctx = new AlterTableOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CqlParser.RULE_alterTableOperation);
    try {
      this.state = 1186;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 58, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1180;
          this.alterTableAdd();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1181;
          this.alterTableDropColumns();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1182;
          this.alterTableDropColumns();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1183;
          this.alterTableDropCompactStorage();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1184;
          this.alterTableRename();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1185;
          this.alterTableWith();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTableWith() {
    let localctx = new AlterTableWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CqlParser.RULE_alterTableWith);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1188;
      this.kwWith();
      this.state = 1189;
      this.tableOptions();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTableRename() {
    let localctx = new AlterTableRenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CqlParser.RULE_alterTableRename);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1191;
      this.kwRename();
      this.state = 1192;
      this.column();
      this.state = 1193;
      this.kwTo();
      this.state = 1194;
      this.column();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTableDropCompactStorage() {
    let localctx = new AlterTableDropCompactStorageContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 96, CqlParser.RULE_alterTableDropCompactStorage);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1196;
      this.kwDrop();
      this.state = 1197;
      this.kwCompact();
      this.state = 1198;
      this.kwStorage();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTableDropColumns() {
    let localctx = new AlterTableDropColumnsContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 98, CqlParser.RULE_alterTableDropColumns);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1200;
      this.kwDrop();
      this.state = 1201;
      this.alterTableDropColumnList();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTableDropColumnList() {
    let localctx = new AlterTableDropColumnListContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 100, CqlParser.RULE_alterTableDropColumnList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1203;
      this.column();
      this.state = 1209;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1204;
        this.syntaxComma();
        this.state = 1205;
        this.column();
        this.state = 1211;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTableAdd() {
    let localctx = new AlterTableAddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CqlParser.RULE_alterTableAdd);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1212;
      this.kwAdd();
      this.state = 1213;
      this.alterTableColumnDefinition();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTableColumnDefinition() {
    let localctx = new AlterTableColumnDefinitionContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 104, CqlParser.RULE_alterTableColumnDefinition);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1215;
      this.column();
      this.state = 1216;
      this.dataType();
      this.state = 1223;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1217;
        this.syntaxComma();
        this.state = 1218;
        this.column();
        this.state = 1219;
        this.dataType();
        this.state = 1225;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterRole() {
    let localctx = new AlterRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CqlParser.RULE_alterRole);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1226;
      this.kwAlter();
      this.state = 1227;
      this.kwRole();
      this.state = 1228;
      this.role();
      this.state = 1230;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_WITH) {
        this.state = 1229;
        this.roleWith();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  roleWith() {
    let localctx = new RoleWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CqlParser.RULE_roleWith);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1232;
      this.kwWith();

      this.state = 1233;
      this.roleWithOptions();
      this.state = 1239;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.K_AND) {
        this.state = 1234;
        this.kwAnd();
        this.state = 1235;
        this.roleWithOptions();
        this.state = 1241;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  roleWithOptions() {
    let localctx = new RoleWithOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CqlParser.RULE_roleWithOptions);
    try {
      this.state = 1258;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_PASSWORD:
          this.enterOuterAlt(localctx, 1);
          this.state = 1242;
          this.kwPassword();
          this.state = 1243;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 1244;
          this.stringLiteral();
          break;
        case CqlParser.K_LOGIN:
          this.enterOuterAlt(localctx, 2);
          this.state = 1246;
          this.kwLogin();
          this.state = 1247;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 1248;
          this.booleanLiteral();
          break;
        case CqlParser.K_SUPERUSER:
          this.enterOuterAlt(localctx, 3);
          this.state = 1250;
          this.kwSuperuser();
          this.state = 1251;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 1252;
          this.booleanLiteral();
          break;
        case CqlParser.K_OPTIONS:
          this.enterOuterAlt(localctx, 4);
          this.state = 1254;
          this.kwOptions();
          this.state = 1255;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 1256;
          this.optionHash();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterMaterializedView() {
    let localctx = new AlterMaterializedViewContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 112, CqlParser.RULE_alterMaterializedView);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1260;
      this.kwAlter();
      this.state = 1261;
      this.kwMaterialized();
      this.state = 1262;
      this.kwView();
      this.state = 1266;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 64, this._ctx);
      if (la_ === 1) {
        this.state = 1263;
        this.keyspace();
        this.state = 1264;
        this.match(CqlParser.DOT);
      }
      this.state = 1268;
      this.materializedView();
      this.state = 1272;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_WITH) {
        this.state = 1269;
        this.kwWith();
        this.state = 1270;
        this.tableOptions();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropUser() {
    let localctx = new DropUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CqlParser.RULE_dropUser);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1274;
      this.kwDrop();
      this.state = 1275;
      this.kwUser();
      this.state = 1277;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 66, this._ctx);
      if (la_ === 1) {
        this.state = 1276;
        this.ifExist();
      }
      this.state = 1279;
      this.user();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropType() {
    let localctx = new DropTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CqlParser.RULE_dropType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1281;
      this.kwDrop();
      this.state = 1282;
      this.kwType();
      this.state = 1284;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);
      if (la_ === 1) {
        this.state = 1283;
        this.ifExist();
      }
      this.state = 1289;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
      if (la_ === 1) {
        this.state = 1286;
        this.keyspace();
        this.state = 1287;
        this.match(CqlParser.DOT);
      }
      this.state = 1291;
      this.type();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropMaterializedView() {
    let localctx = new DropMaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CqlParser.RULE_dropMaterializedView);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1293;
      this.kwDrop();
      this.state = 1294;
      this.kwMaterialized();
      this.state = 1295;
      this.kwView();
      this.state = 1297;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 69, this._ctx);
      if (la_ === 1) {
        this.state = 1296;
        this.ifExist();
      }
      this.state = 1302;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 70, this._ctx);
      if (la_ === 1) {
        this.state = 1299;
        this.keyspace();
        this.state = 1300;
        this.match(CqlParser.DOT);
      }
      this.state = 1304;
      this.materializedView();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropAggregate() {
    let localctx = new DropAggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CqlParser.RULE_dropAggregate);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1306;
      this.kwDrop();
      this.state = 1307;
      this.kwAggregate();
      this.state = 1309;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);
      if (la_ === 1) {
        this.state = 1308;
        this.ifExist();
      }
      this.state = 1314;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 72, this._ctx);
      if (la_ === 1) {
        this.state = 1311;
        this.keyspace();
        this.state = 1312;
        this.match(CqlParser.DOT);
      }
      this.state = 1316;
      this.aggregate();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropFunction() {
    let localctx = new DropFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CqlParser.RULE_dropFunction);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1318;
      this.kwDrop();
      this.state = 1319;
      this.kwFunction();
      this.state = 1321;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);
      if (la_ === 1) {
        this.state = 1320;
        this.ifExist();
      }
      this.state = 1326;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 74, this._ctx);
      if (la_ === 1) {
        this.state = 1323;
        this.keyspace();
        this.state = 1324;
        this.match(CqlParser.DOT);
      }
      this.state = 1328;
      this.functionStatement();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropTrigger() {
    let localctx = new DropTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CqlParser.RULE_dropTrigger);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1330;
      this.kwDrop();
      this.state = 1331;
      this.kwTrigger();
      this.state = 1333;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 75, this._ctx);
      if (la_ === 1) {
        this.state = 1332;
        this.ifExist();
      }
      this.state = 1335;
      this.trigger();
      this.state = 1336;
      this.kwOn();
      this.state = 1340;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 76, this._ctx);
      if (la_ === 1) {
        this.state = 1337;
        this.keyspace();
        this.state = 1338;
        this.match(CqlParser.DOT);
      }
      this.state = 1342;
      this.table();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropRole() {
    let localctx = new DropRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CqlParser.RULE_dropRole);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1344;
      this.kwDrop();
      this.state = 1345;
      this.kwRole();
      this.state = 1347;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 77, this._ctx);
      if (la_ === 1) {
        this.state = 1346;
        this.ifExist();
      }
      this.state = 1349;
      this.role();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropTable() {
    let localctx = new DropTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CqlParser.RULE_dropTable);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1351;
      this.kwDrop();
      this.state = 1352;
      this.kwTable();
      this.state = 1354;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 78, this._ctx);
      if (la_ === 1) {
        this.state = 1353;
        this.ifExist();
      }
      this.state = 1359;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 79, this._ctx);
      if (la_ === 1) {
        this.state = 1356;
        this.keyspace();
        this.state = 1357;
        this.match(CqlParser.DOT);
      }
      this.state = 1361;
      this.table();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropKeyspace() {
    let localctx = new DropKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CqlParser.RULE_dropKeyspace);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1363;
      this.kwDrop();
      this.state = 1364;
      this.kwKeyspace();
      this.state = 1366;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
      if (la_ === 1) {
        this.state = 1365;
        this.ifExist();
      }
      this.state = 1368;
      this.keyspace();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropIndex() {
    let localctx = new DropIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CqlParser.RULE_dropIndex);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1370;
      this.kwDrop();
      this.state = 1371;
      this.kwIndex();
      this.state = 1373;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 81, this._ctx);
      if (la_ === 1) {
        this.state = 1372;
        this.ifExist();
      }
      this.state = 1378;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);
      if (la_ === 1) {
        this.state = 1375;
        this.keyspace();
        this.state = 1376;
        this.match(CqlParser.DOT);
      }
      this.state = 1380;
      this.indexName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createTable() {
    let localctx = new CreateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CqlParser.RULE_createTable);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1382;
      this.kwCreate();
      this.state = 1383;
      this.kwTable();
      this.state = 1385;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 83, this._ctx);
      if (la_ === 1) {
        this.state = 1384;
        this.ifNotExist();
      }
      this.state = 1390;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 84, this._ctx);
      if (la_ === 1) {
        this.state = 1387;
        this.keyspace();
        this.state = 1388;
        this.match(CqlParser.DOT);
      }
      this.state = 1392;
      this.table();
      this.state = 1393;
      this.syntaxBracketLr();
      this.state = 1394;
      this.columnDefinitionList();
      this.state = 1395;
      this.syntaxBracketRr();
      this.state = 1397;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_WITH) {
        this.state = 1396;
        this.withElement();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  withElement() {
    let localctx = new WithElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CqlParser.RULE_withElement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1399;
      this.kwWith();
      this.state = 1401;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        (((_la - 23) & ~0x1f) == 0 &&
          ((1 << (_la - 23)) &
            ((1 << (CqlParser.K_ADD - 23)) |
              (1 << (CqlParser.K_ALL - 23)) |
              (1 << (CqlParser.K_ALLOW - 23)) |
              (1 << (CqlParser.K_ALTER - 23)) |
              (1 << (CqlParser.K_AND - 23)) |
              (1 << (CqlParser.K_ANY - 23)) |
              (1 << (CqlParser.K_APPLY - 23)) |
              (1 << (CqlParser.K_AS - 23)) |
              (1 << (CqlParser.K_ASC - 23)) |
              (1 << (CqlParser.K_AUTHORIZE - 23)) |
              (1 << (CqlParser.K_BATCH - 23)) |
              (1 << (CqlParser.K_BEGIN - 23)) |
              (1 << (CqlParser.K_BY - 23)) |
              (1 << (CqlParser.K_CALLED - 23)) |
              (1 << (CqlParser.K_CLUSTERING - 23)) |
              (1 << (CqlParser.K_COLUMNFAMILY - 23)) |
              (1 << (CqlParser.K_COMPACT - 23)) |
              (1 << (CqlParser.K_CONSISTENCY - 23)) |
              (1 << (CqlParser.K_CONTAINS - 23)) |
              (1 << (CqlParser.K_CREATE - 23)) |
              (1 << (CqlParser.K_CUSTOM - 23)) |
              (1 << (CqlParser.K_DELETE - 23)) |
              (1 << (CqlParser.K_DESC - 23)) |
              (1 << (CqlParser.K_DESCRIBE - 23)) |
              (1 << (CqlParser.K_DISTINCT - 23)) |
              (1 << (CqlParser.K_DROP - 23)) |
              (1 << (CqlParser.K_DURABLE_WRITES - 23)) |
              (1 << (CqlParser.K_EACH_QUORUM - 23)) |
              (1 << (CqlParser.K_ENTRIES - 23)) |
              (1 << (CqlParser.K_EXECUTE - 23)))) !==
            0) ||
        (((_la - 55) & ~0x1f) == 0 &&
          ((1 << (_la - 55)) &
            ((1 << (CqlParser.K_EXISTS - 55)) |
              (1 << (CqlParser.K_FALSE - 55)) |
              (1 << (CqlParser.K_FILTERING - 55)) |
              (1 << (CqlParser.K_FINALFUNC - 55)) |
              (1 << (CqlParser.K_FROM - 55)) |
              (1 << (CqlParser.K_FULL - 55)) |
              (1 << (CqlParser.K_FUNCTION - 55)) |
              (1 << (CqlParser.K_FUNCTIONS - 55)) |
              (1 << (CqlParser.K_GRANT - 55)) |
              (1 << (CqlParser.K_IF - 55)) |
              (1 << (CqlParser.K_IN - 55)) |
              (1 << (CqlParser.K_INDEX - 55)) |
              (1 << (CqlParser.K_INFINITY - 55)) |
              (1 << (CqlParser.K_INITCOND - 55)) |
              (1 << (CqlParser.K_INPUT - 55)) |
              (1 << (CqlParser.K_INSERT - 55)) |
              (1 << (CqlParser.K_INTO - 55)) |
              (1 << (CqlParser.K_IS - 55)) |
              (1 << (CqlParser.K_JSON - 55)) |
              (1 << (CqlParser.K_KEY - 55)) |
              (1 << (CqlParser.K_KEYS - 55)) |
              (1 << (CqlParser.K_KEYSPACE - 55)) |
              (1 << (CqlParser.K_KEYSPACES - 55)) |
              (1 << (CqlParser.K_LANGUAGE - 55)) |
              (1 << (CqlParser.K_LEVEL - 55)) |
              (1 << (CqlParser.K_LIMIT - 55)) |
              (1 << (CqlParser.K_LOCAL_ONE - 55)) |
              (1 << (CqlParser.K_LOCAL_QUORUM - 55)) |
              (1 << (CqlParser.K_LOGGED - 55)) |
              (1 << (CqlParser.K_LOGIN - 55)) |
              (1 << (CqlParser.K_MATERIALIZED - 55)) |
              (1 << (CqlParser.K_MODIFY - 55)))) !==
            0) ||
        (((_la - 87) & ~0x1f) == 0 &&
          ((1 << (_la - 87)) &
            ((1 << (CqlParser.K_NAN - 87)) |
              (1 << (CqlParser.K_NORECURSIVE - 87)) |
              (1 << (CqlParser.K_NOSUPERUSER - 87)) |
              (1 << (CqlParser.K_NOT - 87)) |
              (1 << (CqlParser.K_NULL - 87)) |
              (1 << (CqlParser.K_OF - 87)) |
              (1 << (CqlParser.K_ON - 87)) |
              (1 << (CqlParser.K_ONE - 87)) |
              (1 << (CqlParser.K_OPTIONS - 87)) |
              (1 << (CqlParser.K_OR - 87)) |
              (1 << (CqlParser.K_ORDER - 87)) |
              (1 << (CqlParser.K_PARTITION - 87)) |
              (1 << (CqlParser.K_PASSWORD - 87)) |
              (1 << (CqlParser.K_PER - 87)) |
              (1 << (CqlParser.K_PERMISSION - 87)) |
              (1 << (CqlParser.K_PERMISSIONS - 87)) |
              (1 << (CqlParser.K_PRIMARY - 87)) |
              (1 << (CqlParser.K_QUORUM - 87)) |
              (1 << (CqlParser.K_RENAME - 87)) |
              (1 << (CqlParser.K_REPLACE - 87)) |
              (1 << (CqlParser.K_REPLICATION - 87)) |
              (1 << (CqlParser.K_RETURNS - 87)) |
              (1 << (CqlParser.K_REVOKE - 87)) |
              (1 << (CqlParser.K_ROLE - 87)) |
              (1 << (CqlParser.K_ROLES - 87)) |
              (1 << (CqlParser.K_SCHEMA - 87)) |
              (1 << (CqlParser.K_SELECT - 87)) |
              (1 << (CqlParser.K_SET - 87)) |
              (1 << (CqlParser.K_SFUNC - 87)))) !==
            0) ||
        (((_la - 119) & ~0x1f) == 0 &&
          ((1 << (_la - 119)) &
            ((1 << (CqlParser.K_STATIC - 119)) |
              (1 << (CqlParser.K_STORAGE - 119)) |
              (1 << (CqlParser.K_STYPE - 119)) |
              (1 << (CqlParser.K_SUPERUSER - 119)) |
              (1 << (CqlParser.K_TABLE - 119)) |
              (1 << (CqlParser.K_THREE - 119)) |
              (1 << (CqlParser.K_TIMESTAMP - 119)) |
              (1 << (CqlParser.K_TO - 119)) |
              (1 << (CqlParser.K_TOKEN - 119)) |
              (1 << (CqlParser.K_TRIGGER - 119)) |
              (1 << (CqlParser.K_TRUE - 119)) |
              (1 << (CqlParser.K_TRUNCATE - 119)) |
              (1 << (CqlParser.K_TTL - 119)) |
              (1 << (CqlParser.K_TWO - 119)) |
              (1 << (CqlParser.K_TYPE - 119)) |
              (1 << (CqlParser.K_UNLOGGED - 119)) |
              (1 << (CqlParser.K_UPDATE - 119)) |
              (1 << (CqlParser.K_USE - 119)) |
              (1 << (CqlParser.K_USER - 119)) |
              (1 << (CqlParser.K_USING - 119)) |
              (1 << (CqlParser.K_UUID - 119)) |
              (1 << (CqlParser.K_VALUES - 119)) |
              (1 << (CqlParser.K_VIEW - 119)) |
              (1 << (CqlParser.K_WHERE - 119)) |
              (1 << (CqlParser.K_WITH - 119)) |
              (1 << (CqlParser.K_WRITETIME - 119)) |
              (1 << (CqlParser.K_ASCII - 119)))) !==
            0) ||
        (((_la - 190) & ~0x1f) == 0 &&
          ((1 << (_la - 190)) &
            ((1 << (CqlParser.K_BIGINT - 190)) |
              (1 << (CqlParser.K_BLOB - 190)) |
              (1 << (CqlParser.K_BOOLEAN - 190)) |
              (1 << (CqlParser.K_COUNTER - 190)) |
              (1 << (CqlParser.K_DATE - 190)) |
              (1 << (CqlParser.K_DECIMAL - 190)) |
              (1 << (CqlParser.K_DOUBLE - 190)) |
              (1 << (CqlParser.K_FLOAT - 190)) |
              (1 << (CqlParser.K_FROZEN - 190)) |
              (1 << (CqlParser.K_INET - 190)) |
              (1 << (CqlParser.K_INT - 190)) |
              (1 << (CqlParser.K_LIST - 190)) |
              (1 << (CqlParser.K_MAP - 190)) |
              (1 << (CqlParser.K_SMALLINT - 190)) |
              (1 << (CqlParser.K_TEXT - 190)) |
              (1 << (CqlParser.K_TIMEUUID - 190)) |
              (1 << (CqlParser.K_TIME - 190)) |
              (1 << (CqlParser.K_TINYINT - 190)) |
              (1 << (CqlParser.K_TUPLE - 190)) |
              (1 << (CqlParser.K_VARCHAR - 190)) |
              (1 << (CqlParser.K_VARINT - 190)) |
              (1 << (CqlParser.OBJECT_NAME - 190)))) !==
            0) ||
        _la === CqlParser.K_USERS ||
        _la === CqlParser.K_VECTOR
      ) {
        this.state = 1400;
        this.tableOptions();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  clusteringOrderColumns() {
    let localctx = new ClusteringOrderColumnsContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 138, CqlParser.RULE_clusteringOrderColumns);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1403;
      this.column();
      this.state = 1405;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_ASC || _la === CqlParser.K_DESC) {
        this.state = 1404;
        this.orderDirection();
      }

      this.state = 1414;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1407;
        this.syntaxComma();
        this.state = 1408;
        this.column();
        this.state = 1410;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.K_ASC || _la === CqlParser.K_DESC) {
          this.state = 1409;
          this.orderDirection();
        }

        this.state = 1416;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  clusteringOrder() {
    let localctx = new ClusteringOrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CqlParser.RULE_clusteringOrder);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1417;
      this.kwClustering();
      this.state = 1418;
      this.kwOrder();
      this.state = 1419;
      this.kwBy();
      this.state = 1420;
      this.syntaxBracketLr();
      this.state = 1421;
      this.clusteringOrderColumns();
      this.state = 1422;
      this.syntaxBracketRr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableOptions() {
    let localctx = new TableOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CqlParser.RULE_tableOptions);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1424;
      this.tableOptionItem();
      this.state = 1430;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.K_AND) {
        this.state = 1425;
        this.kwAnd();
        this.state = 1426;
        this.tableOptionItem();
        this.state = 1432;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableOptionItem() {
    let localctx = new TableOptionItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CqlParser.RULE_tableOptionItem);
    try {
      this.state = 1442;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 91, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1433;
          this.tableOptionName();
          this.state = 1434;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 1435;
          this.tableOptionValue();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1437;
          this.tableOptionName();
          this.state = 1438;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 1439;
          this.optionHash();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1441;
          this.clusteringOrder();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableOptionName() {
    let localctx = new TableOptionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CqlParser.RULE_tableOptionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1444;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableOptionValue() {
    let localctx = new TableOptionValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CqlParser.RULE_tableOptionValue);
    try {
      this.state = 1449;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.STRING_LITERAL:
          this.enterOuterAlt(localctx, 1);
          this.state = 1446;
          this.stringLiteral();
          break;
        case CqlParser.DECIMAL_LITERAL:
        case CqlParser.FLOAT_LITERAL:
          this.enterOuterAlt(localctx, 2);
          this.state = 1447;
          this.floatLiteral();
          break;
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
        case CqlParser.K_VECTOR:
          this.enterOuterAlt(localctx, 3);
          this.state = 1448;
          this.id();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  optionHash() {
    let localctx = new OptionHashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CqlParser.RULE_optionHash);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1451;
      this.syntaxBracketLc();
      this.state = 1452;
      this.optionHashItem();
      this.state = 1458;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1453;
        this.syntaxComma();
        this.state = 1454;
        this.optionHashItem();
        this.state = 1460;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1461;
      this.syntaxBracketRc();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  optionHashItem() {
    let localctx = new OptionHashItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CqlParser.RULE_optionHashItem);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1463;
      this.optionHashKey();
      this.state = 1464;
      this.match(CqlParser.COLON);
      this.state = 1465;
      this.optionHashValue();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  optionHashKey() {
    let localctx = new OptionHashKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CqlParser.RULE_optionHashKey);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1467;
      this.stringLiteral();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  optionHashValue() {
    let localctx = new OptionHashValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CqlParser.RULE_optionHashValue);
    try {
      this.state = 1472;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.STRING_LITERAL:
          this.enterOuterAlt(localctx, 1);
          this.state = 1469;
          this.stringLiteral();
          break;
        case CqlParser.K_FALSE:
        case CqlParser.K_TRUE:
          this.enterOuterAlt(localctx, 2);
          this.state = 1470;
          this.booleanLiteral();
          break;
        case CqlParser.DECIMAL_LITERAL:
        case CqlParser.FLOAT_LITERAL:
          this.enterOuterAlt(localctx, 3);
          this.state = 1471;
          this.floatLiteral();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnDefinitionList() {
    let localctx = new ColumnDefinitionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CqlParser.RULE_columnDefinitionList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1474;
      this.columnDefinition();
      this.state = 1480;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 95, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1475;
          this.syntaxComma();
          this.state = 1476;
          this.columnDefinition();
        }
        this.state = 1482;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 95, this._ctx);
      }

      this.state = 1486;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.COMMA) {
        this.state = 1483;
        this.syntaxComma();
        this.state = 1484;
        this.primaryKeyElement();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnDefinition() {
    let localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CqlParser.RULE_columnDefinition);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1488;
      this.column();
      this.state = 1489;
      this.dataType();
      this.state = 1491;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_PRIMARY) {
        this.state = 1490;
        this.primaryKeyColumn();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  primaryKeyColumn() {
    let localctx = new PrimaryKeyColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CqlParser.RULE_primaryKeyColumn);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1493;
      this.kwPrimary();
      this.state = 1494;
      this.kwKey();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  primaryKeyElement() {
    let localctx = new PrimaryKeyElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CqlParser.RULE_primaryKeyElement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1496;
      this.kwPrimary();
      this.state = 1497;
      this.kwKey();
      this.state = 1498;
      this.syntaxBracketLr();
      this.state = 1499;
      this.primaryKeyDefinition();
      this.state = 1500;
      this.syntaxBracketRr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  primaryKeyDefinition() {
    let localctx = new PrimaryKeyDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CqlParser.RULE_primaryKeyDefinition);
    try {
      this.state = 1505;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1502;
          this.singlePrimaryKey();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1503;
          this.compoundKey();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1504;
          this.compositeKey();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  singlePrimaryKey() {
    let localctx = new SinglePrimaryKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CqlParser.RULE_singlePrimaryKey);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1507;
      this.column();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  compoundKey() {
    let localctx = new CompoundKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CqlParser.RULE_compoundKey);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1509;
      this.partitionKey();
      this.state = 1513;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.COMMA) {
        this.state = 1510;
        this.syntaxComma();
        this.state = 1511;
        this.clusteringKeyList();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  compositeKey() {
    let localctx = new CompositeKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CqlParser.RULE_compositeKey);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1515;
      this.syntaxBracketLr();
      this.state = 1516;
      this.partitionKeyList();
      this.state = 1517;
      this.syntaxBracketRr();
      this.state = 1521;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.COMMA) {
        this.state = 1518;
        this.syntaxComma();
        this.state = 1519;
        this.clusteringKeyList();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partitionKeyList() {
    let localctx = new PartitionKeyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CqlParser.RULE_partitionKeyList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1523;
      this.partitionKey();
      this.state = 1529;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1524;
        this.syntaxComma();
        this.state = 1525;
        this.partitionKey();
        this.state = 1531;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  clusteringKeyList() {
    let localctx = new ClusteringKeyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CqlParser.RULE_clusteringKeyList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1532;
      this.clusteringKey();
      this.state = 1538;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1533;
        this.syntaxComma();
        this.state = 1534;
        this.clusteringKey();
        this.state = 1540;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partitionKey() {
    let localctx = new PartitionKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CqlParser.RULE_partitionKey);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1541;
      this.column();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  clusteringKey() {
    let localctx = new ClusteringKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CqlParser.RULE_clusteringKey);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1543;
      this.column();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  applyBatch() {
    let localctx = new ApplyBatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CqlParser.RULE_applyBatch);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1545;
      this.kwApply();
      this.state = 1546;
      this.kwBatch();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  beginBatch() {
    let localctx = new BeginBatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CqlParser.RULE_beginBatch);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1548;
      this.kwBegin();
      this.state = 1550;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_LOGGED || _la === CqlParser.K_UNLOGGED) {
        this.state = 1549;
        this.batchType();
      }

      this.state = 1552;
      this.kwBatch();
      this.state = 1554;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_USING) {
        this.state = 1553;
        this.usingTimestampSpec();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  batchType() {
    let localctx = new BatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CqlParser.RULE_batchType);
    try {
      this.state = 1558;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_LOGGED:
          this.enterOuterAlt(localctx, 1);
          this.state = 1556;
          this.kwLogged();
          break;
        case CqlParser.K_UNLOGGED:
          this.enterOuterAlt(localctx, 2);
          this.state = 1557;
          this.kwUnlogged();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterKeyspace() {
    let localctx = new AlterKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CqlParser.RULE_alterKeyspace);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1560;
      this.kwAlter();
      this.state = 1561;
      this.kwKeyspace();
      this.state = 1562;
      this.keyspace();
      this.state = 1563;
      this.kwWith();
      this.state = 1564;
      this.kwReplication();
      this.state = 1565;
      this.match(CqlParser.OPERATOR_EQ);
      this.state = 1566;
      this.syntaxBracketLc();
      this.state = 1567;
      this.replicationList();
      this.state = 1568;
      this.syntaxBracketRc();
      this.state = 1572;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_AND) {
        this.state = 1569;
        this.kwAnd();
        this.state = 1570;
        this.durableWrites();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  replicationList() {
    let localctx = new ReplicationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CqlParser.RULE_replicationList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1574;
      this.replicationListItem();
      this.state = 1580;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1575;
        this.syntaxComma();
        this.state = 1576;
        this.replicationListItem();
        this.state = 1582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  replicationListItem() {
    let localctx = new ReplicationListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CqlParser.RULE_replicationListItem);
    try {
      this.state = 1589;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 108, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1583;
          this.match(CqlParser.STRING_LITERAL);
          this.state = 1584;
          this.match(CqlParser.COLON);
          this.state = 1585;
          this.match(CqlParser.STRING_LITERAL);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1586;
          this.match(CqlParser.STRING_LITERAL);
          this.state = 1587;
          this.match(CqlParser.COLON);
          this.state = 1588;
          this.match(CqlParser.DECIMAL_LITERAL);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  durableWrites() {
    let localctx = new DurableWritesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CqlParser.RULE_durableWrites);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1591;
      this.kwDurableWrites();
      this.state = 1592;
      this.match(CqlParser.OPERATOR_EQ);
      this.state = 1593;
      this.booleanLiteral();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  use() {
    let localctx = new UseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CqlParser.RULE_use);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1595;
      this.kwUse();
      this.state = 1596;
      this.keyspace();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  truncate() {
    let localctx = new TruncateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CqlParser.RULE_truncate);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1598;
      this.kwTruncate();
      this.state = 1600;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 109, this._ctx);
      if (la_ === 1) {
        this.state = 1599;
        this.kwTable();
      }
      this.state = 1605;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 110, this._ctx);
      if (la_ === 1) {
        this.state = 1602;
        this.keyspace();
        this.state = 1603;
        this.match(CqlParser.DOT);
      }
      this.state = 1607;
      this.table();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createIndex() {
    let localctx = new CreateIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CqlParser.RULE_createIndex);
    var _la = 0; // Token type
    try {
      this.state = 1666;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 120, this._ctx);
      switch (la_) {
        case 1:
          localctx = new SecondaryIndexContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 1609;
          this.kwCreate();
          this.state = 1610;
          this.kwIndex();
          this.state = 1612;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 111, this._ctx);
          if (la_ === 1) {
            this.state = 1611;
            this.ifNotExist();
          }
          this.state = 1615;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 112, this._ctx);
          if (la_ === 1) {
            this.state = 1614;
            this.indexName();
          }
          this.state = 1617;
          this.kwOn();
          this.state = 1621;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 113, this._ctx);
          if (la_ === 1) {
            this.state = 1618;
            this.keyspace();
            this.state = 1619;
            this.match(CqlParser.DOT);
          }
          this.state = 1623;
          this.table();
          this.state = 1624;
          this.syntaxBracketLr();
          this.state = 1625;
          this.indexColumnSpec();
          this.state = 1626;
          this.syntaxBracketRr();
          break;

        case 2:
          localctx = new CustomIndexContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 1628;
          this.kwCreate();
          this.state = 1629;
          this.kwCustom();
          this.state = 1630;
          this.kwIndex();
          this.state = 1632;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 114, this._ctx);
          if (la_ === 1) {
            this.state = 1631;
            this.ifNotExist();
          }
          this.state = 1635;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 115, this._ctx);
          if (la_ === 1) {
            this.state = 1634;
            this.indexName();
          }
          this.state = 1637;
          this.kwOn();
          this.state = 1641;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 116, this._ctx);
          if (la_ === 1) {
            this.state = 1638;
            this.keyspace();
            this.state = 1639;
            this.match(CqlParser.DOT);
          }
          this.state = 1643;
          this.table();
          this.state = 1644;
          this.syntaxBracketLr();
          this.state = 1645;
          this.indexColumnSpec();
          this.state = 1646;
          this.syntaxBracketRr();
          this.state = 1647;
          this.kwUsing();
          this.state = 1651;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CqlParser.K_STORAGE_ATTACHED_INDEX:
              this.state = 1648;
              this.kwStorageAttachedIndex();
              break;
            case CqlParser.K_SASI_INDEX:
              this.state = 1649;
              this.kwSASIIndex();
              break;
            case CqlParser.K_SOLR_INDEX:
              this.state = 1650;
              this.kwSolrIndex();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          this.state = 1664;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.K_WITH) {
            this.state = 1653;
            this.kwWith();
            this.state = 1654;
            this.kwOptions();
            this.state = 1655;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1656;
            this.match(CqlParser.LC_BRACKET);
            this.state = 1658;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
              this.state = 1657;
              this.customIndexOption();
              this.state = 1660;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            } while (
              ((_la - 145) & ~0x1f) == 0 &&
              ((1 << (_la - 145)) &
                ((1 << (CqlParser.K_ASCII - 145)) |
                  (1 << (CqlParser.K_CASE_SENITIVE - 145)) |
                  (1 << (CqlParser.K_NORMALIZE - 145)) |
                  (1 << (CqlParser.K_ANALYZED - 145)) |
                  (1 << (CqlParser.K_IS_LITERAL - 145)) |
                  (1 << (CqlParser.K_MAX_COMPACTION_FLUSH_MEMORY_IN_MB - 145)) |
                  (1 << (CqlParser.K_TOKENIZATION_ENABLE_STEMMING - 145)) |
                  (1 << (CqlParser.K_TOKENIZATION_SKIP_STOP_WORDS - 145)) |
                  (1 << (CqlParser.K_TOKENIZATION_LOCALE - 145)) |
                  (1 << (CqlParser.K_TOKENIZATION_NORMALIZE_LOWERCASE - 145)) |
                  (1 << (CqlParser.K_TOKENIZATION_NORMALIZE_UPPERCASE - 145)) |
                  (1 << (CqlParser.K_NORMALIZE_LOWERCASE - 145)) |
                  (1 << (CqlParser.K_NORMALIZE_UPPERCASE - 145)) |
                  (1 << (CqlParser.K_MODE - 145)) |
                  (1 << (CqlParser.K_ANALYZER_CLASS - 145)))) !==
                0
            );
            this.state = 1662;
            this.match(CqlParser.RC_BRACKET);
          }

          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  customIndexOption() {
    let localctx = new CustomIndexOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CqlParser.RULE_customIndexOption);
    var _la = 0; // Token type
    try {
      this.state = 1758;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_CASE_SENITIVE:
          this.enterOuterAlt(localctx, 1);
          this.state = 1668;
          this.kwCaseSensitive();
          this.state = 1669;
          this.match(CqlParser.COLON);
          this.state = 1670;
          localctx.caseSensitiveOption = this.booleanLiteral();
          this.state = 1672;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1671;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_NORMALIZE:
          this.enterOuterAlt(localctx, 2);
          this.state = 1674;
          this.kwNormalize();
          this.state = 1675;
          this.match(CqlParser.COLON);
          this.state = 1676;
          localctx.normalizeOption = this.booleanLiteral();
          this.state = 1678;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1677;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_ASCII:
          this.enterOuterAlt(localctx, 3);
          this.state = 1680;
          this.kwAscii();
          this.state = 1681;
          this.match(CqlParser.COLON);
          this.state = 1682;
          localctx.asciiOption = this.booleanLiteral();
          this.state = 1684;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1683;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_ANALYZED:
          this.enterOuterAlt(localctx, 4);
          this.state = 1686;
          this.kwAnalyzed();
          this.state = 1687;
          this.match(CqlParser.COLON);
          this.state = 1688;
          localctx.analyzedOption = this.booleanLiteral();
          this.state = 1690;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1689;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_IS_LITERAL:
          this.enterOuterAlt(localctx, 5);
          this.state = 1692;
          this.kwIsLiteral();
          this.state = 1693;
          this.match(CqlParser.COLON);
          this.state = 1694;
          localctx.isLiteralOption = this.booleanLiteral();
          this.state = 1696;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1695;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_TOKENIZATION_ENABLE_STEMMING:
          this.enterOuterAlt(localctx, 6);
          this.state = 1698;
          this.kwTokenizationEnableStemming();
          this.state = 1699;
          this.match(CqlParser.COLON);
          this.state = 1700;
          localctx.tokenizationEnableStemmingOption = this.booleanLiteral();
          this.state = 1702;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1701;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_TOKENIZATION_NORMALIZE_LOWERCASE:
          this.enterOuterAlt(localctx, 7);
          this.state = 1704;
          this.kwTokenizationNormalizeLowercase();
          this.state = 1705;
          this.match(CqlParser.COLON);
          this.state = 1706;
          localctx.tokenizationNormalizeLowercaseOption = this.booleanLiteral();
          this.state = 1708;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1707;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_TOKENIZATION_NORMALIZE_UPPERCASE:
          this.enterOuterAlt(localctx, 8);
          this.state = 1710;
          this.kwTokenizationNormalizeUppercase();
          this.state = 1711;
          this.match(CqlParser.COLON);
          this.state = 1712;
          localctx.tokenizationNormalizeUppercaseOption = this.booleanLiteral();
          this.state = 1714;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1713;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_NORMALIZE_UPPERCASE:
          this.enterOuterAlt(localctx, 9);
          this.state = 1716;
          this.kwNormalizeUppercase();
          this.state = 1717;
          this.match(CqlParser.COLON);
          this.state = 1718;
          localctx.normalizeUppercaseOption = this.booleanLiteral();
          this.state = 1720;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1719;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_NORMALIZE_LOWERCASE:
          this.enterOuterAlt(localctx, 10);
          this.state = 1722;
          this.kwNormalizeLowercase();
          this.state = 1723;
          this.match(CqlParser.COLON);
          this.state = 1724;
          localctx.normalizeLowercaseOption = this.booleanLiteral();
          this.state = 1726;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1725;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_MAX_COMPACTION_FLUSH_MEMORY_IN_MB:
          this.enterOuterAlt(localctx, 11);
          this.state = 1728;
          this.kwMaxCompactionFlushMemoryInMb();
          this.state = 1729;
          this.match(CqlParser.COLON);
          this.state = 1730;
          localctx.maxCompactionFlushMemoryInMbOption = this.stringLiteral();
          this.state = 1732;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1731;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_MODE:
          this.enterOuterAlt(localctx, 12);
          this.state = 1734;
          this.kwMode();
          this.state = 1735;
          this.match(CqlParser.COLON);
          this.state = 1736;
          localctx.modeOption = this.stringLiteral();
          this.state = 1738;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1737;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_ANALYZER_CLASS:
          this.enterOuterAlt(localctx, 13);
          this.state = 1740;
          this.kwAnalyzerClass();
          this.state = 1741;
          this.match(CqlParser.COLON);
          this.state = 1742;
          localctx.analyzerClassOption = this.stringLiteral();
          this.state = 1744;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1743;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_TOKENIZATION_LOCALE:
          this.enterOuterAlt(localctx, 14);
          this.state = 1746;
          this.kwTokenizationLocale();
          this.state = 1747;
          this.match(CqlParser.COLON);
          this.state = 1748;
          localctx.tokenizationLocaleOption = this.stringLiteral();
          this.state = 1750;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1749;
            this.match(CqlParser.COMMA);
          }

          break;
        case CqlParser.K_TOKENIZATION_SKIP_STOP_WORDS:
          this.enterOuterAlt(localctx, 15);
          this.state = 1752;
          this.kwTokenizationSkipStopWords();
          this.state = 1753;
          this.match(CqlParser.COLON);
          this.state = 1754;
          localctx.tokenizationSkipStopWordsOption = this.stringLiteral();
          this.state = 1756;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.COMMA) {
            this.state = 1755;
            this.match(CqlParser.COMMA);
          }

          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createSearchIndex() {
    let localctx = new CreateSearchIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CqlParser.RULE_createSearchIndex);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1760;
      this.kwCreate();
      this.state = 1761;
      this.kwSearch();
      this.state = 1762;
      this.kwIndex();
      this.state = 1764;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_IF) {
        this.state = 1763;
        this.ifNotExist();
      }

      this.state = 1766;
      this.kwOn();
      this.state = 1770;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 138, this._ctx);
      if (la_ === 1) {
        this.state = 1767;
        this.keyspace();
        this.state = 1768;
        this.match(CqlParser.DOT);
      }
      this.state = 1772;
      this.table();
      this.state = 1799;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_WITH) {
        this.state = 1773;
        this.match(CqlParser.K_WITH);
        this.state = 1777;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.K_COLUMNS) {
          this.state = 1774;
          this.kwColumns();
          this.state = 1775;
          this.searchIndexColumnList();
        }

        this.state = 1785;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 141, this._ctx);
        if (la_ === 1) {
          this.state = 1780;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.K_AND) {
            this.state = 1779;
            this.kwAnd();
          }

          this.state = 1782;
          this.kwProfiles();
          this.state = 1783;
          this.searchIndexProfiles();
        }
        this.state = 1791;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 143, this._ctx);
        if (la_ === 1) {
          this.state = 1788;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.K_AND) {
            this.state = 1787;
            this.kwAnd();
          }

          this.state = 1790;
          this.searchIndexConfigs();
        }
        this.state = 1797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.K_AND || _la === CqlParser.K_OPTIONS) {
          this.state = 1794;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.K_AND) {
            this.state = 1793;
            this.kwAnd();
          }

          this.state = 1796;
          this.searchIndexOptions();
        }
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  searchIndexConfigs() {
    let localctx = new SearchIndexConfigsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CqlParser.RULE_searchIndexConfigs);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1801;
      this.kwConfig();
      this.state = 1802;
      this.match(CqlParser.LC_BRACKET);
      this.state = 1807;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_AUTOCOMMIT_TIME) {
        this.state = 1803;
        this.kwAutoCommitTime();
        this.state = 1804;
        this.match(CqlParser.COLON);
        this.state = 1805;
        localctx.autoCommitTimeConfig = this.decimalLiteral();
      }

      this.state = 1816;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 149, this._ctx);
      if (la_ === 1) {
        this.state = 1810;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1809;
          this.syntaxComma();
        }

        this.state = 1812;
        this.kwDefaultQueryField();
        this.state = 1813;
        this.match(CqlParser.COLON);
        this.state = 1814;
        localctx.defaultQueryFieldConfig = this.stringLiteral();
      }
      this.state = 1825;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 151, this._ctx);
      if (la_ === 1) {
        this.state = 1819;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1818;
          this.syntaxComma();
        }

        this.state = 1821;
        this.kwDirectoryFactory();
        this.state = 1822;
        this.match(CqlParser.COLON);
        this.state = 1823;
        localctx.directoryFactoryConfig = this.directoryFactory();
      }
      this.state = 1834;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 153, this._ctx);
      if (la_ === 1) {
        this.state = 1828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1827;
          this.syntaxComma();
        }

        this.state = 1830;
        this.kwFilterCacheLowWaterMark();
        this.state = 1831;
        this.match(CqlParser.COLON);
        this.state = 1832;
        localctx.filterCacheLowWaterMarkConfig = this.decimalLiteral();
      }
      this.state = 1843;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 155, this._ctx);
      if (la_ === 1) {
        this.state = 1837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1836;
          this.syntaxComma();
        }

        this.state = 1839;
        this.kwFilterCacheHighWaterMark();
        this.state = 1840;
        this.match(CqlParser.COLON);
        this.state = 1841;
        localctx.filterCacheHighWaterMarkConfig = this.decimalLiteral();
      }
      this.state = 1852;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 157, this._ctx);
      if (la_ === 1) {
        this.state = 1846;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1845;
          this.syntaxComma();
        }

        this.state = 1848;
        this.kwDirectoryFactoryClass();
        this.state = 1849;
        this.match(CqlParser.COLON);
        this.state = 1850;
        localctx.directoryFactoryClassConfig = this.stringLiteral();
      }
      this.state = 1861;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 159, this._ctx);
      if (la_ === 1) {
        this.state = 1855;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1854;
          this.syntaxComma();
        }

        this.state = 1857;
        this.kwMergeMaxThreadCount();
        this.state = 1858;
        this.match(CqlParser.COLON);
        this.state = 1859;
        localctx.mergeMaxThreadCountConfig = this.decimalLiteral();
      }
      this.state = 1870;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 161, this._ctx);
      if (la_ === 1) {
        this.state = 1864;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1863;
          this.syntaxComma();
        }

        this.state = 1866;
        this.kwMergeMaxMergeCount();
        this.state = 1867;
        this.match(CqlParser.COLON);
        this.state = 1868;
        localctx.mergeMaxMergeCountConfig = this.decimalLiteral();
      }
      this.state = 1879;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 163, this._ctx);
      if (la_ === 1) {
        this.state = 1873;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1872;
          this.syntaxComma();
        }

        this.state = 1875;
        this.kwRamBufferSize();
        this.state = 1876;
        this.match(CqlParser.COLON);
        this.state = 1877;
        localctx.ramBufferSizeConfig = this.decimalLiteral();
      }
      this.state = 1888;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.COMMA || _la === CqlParser.K_REALTIME) {
        this.state = 1882;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1881;
          this.syntaxComma();
        }

        this.state = 1884;
        this.kwRealtime();
        this.state = 1885;
        this.match(CqlParser.COLON);
        this.state = 1886;
        localctx.realtimeConfig = this.booleanLiteral();
      }

      this.state = 1890;
      this.match(CqlParser.RC_BRACKET);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  directoryFactory() {
    let localctx = new DirectoryFactoryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CqlParser.RULE_directoryFactory);
    try {
      this.state = 1894;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_STANDARD:
          this.enterOuterAlt(localctx, 1);
          this.state = 1892;
          this.kwStandard();
          break;
        case CqlParser.K_ENCRYPTED:
          this.enterOuterAlt(localctx, 2);
          this.state = 1893;
          this.kwEncrypted();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  searchIndexOptions() {
    let localctx = new SearchIndexOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CqlParser.RULE_searchIndexOptions);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1896;
      this.kwOptions();
      this.state = 1897;
      this.match(CqlParser.LC_BRACKET);
      this.state = 1902;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_RECOVERY) {
        this.state = 1898;
        this.kwRecovery();
        this.state = 1899;
        this.match(CqlParser.COLON);
        this.state = 1900;
        localctx.recoveryOption = this.booleanLiteral();
      }

      this.state = 1911;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 169, this._ctx);
      if (la_ === 1) {
        this.state = 1905;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1904;
          this.syntaxComma();
        }

        this.state = 1907;
        this.kwReindex();
        this.state = 1908;
        this.match(CqlParser.COLON);
        this.state = 1909;
        localctx.reindexOption = this.booleanLiteral();
      }
      this.state = 1920;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.COMMA || _la === CqlParser.K_LENIENT) {
        this.state = 1914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CqlParser.COMMA) {
          this.state = 1913;
          this.syntaxComma();
        }

        this.state = 1916;
        this.kwLenient();
        this.state = 1917;
        this.match(CqlParser.COLON);
        this.state = 1918;
        localctx.lenientOption = this.booleanLiteral();
      }

      this.state = 1922;
      this.match(CqlParser.RC_BRACKET);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  searchIndexProfile() {
    let localctx = new SearchIndexProfileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CqlParser.RULE_searchIndexProfile);
    try {
      this.state = 1928;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_SPACE_SAVING_ALL:
          this.enterOuterAlt(localctx, 1);
          this.state = 1924;
          this.kwSpaceSavingAll();
          break;
        case CqlParser.K_SPACE_SAVING_NO_JOIN:
          this.enterOuterAlt(localctx, 2);
          this.state = 1925;
          this.kwSpaceSavingNoJoin();
          break;
        case CqlParser.K_SPACE_SAVING_SLOW_TRIE_PRECISION:
          this.enterOuterAlt(localctx, 3);
          this.state = 1926;
          this.kwSpaceSavingSlowTriePrecision();
          break;
        case CqlParser.K_SPACE_SAVING_NO_TEXT_FIELD:
          this.enterOuterAlt(localctx, 4);
          this.state = 1927;
          this.kwSpaceSavingNoTextField();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  searchIndexProfiles() {
    let localctx = new SearchIndexProfilesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CqlParser.RULE_searchIndexProfiles);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1930;
      this.searchIndexProfile();
      this.state = 1936;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1931;
        this.syntaxComma();
        this.state = 1932;
        this.searchIndexProfile();
        this.state = 1938;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  searchIndexColumnList() {
    let localctx = new SearchIndexColumnListContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 216, CqlParser.RULE_searchIndexColumnList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1939;
      this.searchIndexColumn();
      this.state = 1945;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 1940;
        this.syntaxComma();
        this.state = 1941;
        this.searchIndexColumn();
        this.state = 1947;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  searchIndexColumn() {
    let localctx = new SearchIndexColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CqlParser.RULE_searchIndexColumn);
    var _la = 0; // Token type
    try {
      this.state = 2042;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.DQUOTE:
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
        case CqlParser.K_VECTOR:
          this.enterOuterAlt(localctx, 1);
          this.state = 1948;
          this.column();
          this.state = 1993;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.LC_BRACKET) {
            this.state = 1949;
            this.match(CqlParser.LC_BRACKET);
            this.state = 1954;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CqlParser.K_COPY_FIELD) {
              this.state = 1950;
              this.kwCopyField();
              this.state = 1951;
              this.match(CqlParser.COLON);
              this.state = 1952;
              localctx.copyFieldOption = this.booleanLiteral();
            }

            this.state = 1963;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 177, this._ctx);
            if (la_ === 1) {
              this.state = 1957;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CqlParser.COMMA) {
                this.state = 1956;
                this.syntaxComma();
              }

              this.state = 1959;
              this.kwDocValues();
              this.state = 1960;
              this.match(CqlParser.COLON);
              this.state = 1961;
              localctx.docValuesOption = this.booleanLiteral();
            }
            this.state = 1972;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 179, this._ctx);
            if (la_ === 1) {
              this.state = 1966;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CqlParser.COMMA) {
                this.state = 1965;
                this.syntaxComma();
              }

              this.state = 1968;
              this.kwExcluded();
              this.state = 1969;
              this.match(CqlParser.COLON);
              this.state = 1970;
              localctx.excludedOption = this.booleanLiteral();
            }
            this.state = 1981;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 181, this._ctx);
            if (la_ === 1) {
              this.state = 1975;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CqlParser.COMMA) {
                this.state = 1974;
                this.syntaxComma();
              }

              this.state = 1977;
              this.kwIndexed();
              this.state = 1978;
              this.match(CqlParser.COLON);
              this.state = 1979;
              localctx.indexedOption = this.booleanLiteral();
            }
            this.state = 1990;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CqlParser.COMMA || _la === CqlParser.K_LOWERCASE) {
              this.state = 1984;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CqlParser.COMMA) {
                this.state = 1983;
                this.syntaxComma();
              }

              this.state = 1986;
              this.kwLowerCase();
              this.state = 1987;
              this.match(CqlParser.COLON);
              this.state = 1988;
              localctx.lowerCase = this.booleanLiteral();
            }

            this.state = 1992;
            this.match(CqlParser.RC_BRACKET);
          }

          break;
        case CqlParser.STAR:
          this.enterOuterAlt(localctx, 2);
          this.state = 1995;
          localctx.star = this.match(CqlParser.STAR);
          this.state = 2040;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.LC_BRACKET) {
            this.state = 1996;
            this.match(CqlParser.LC_BRACKET);
            this.state = 2001;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CqlParser.K_COPY_FIELD) {
              this.state = 1997;
              this.kwCopyField();
              this.state = 1998;
              this.match(CqlParser.COLON);
              this.state = 1999;
              localctx.copyFieldOption = this.booleanLiteral();
            }

            this.state = 2010;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 187, this._ctx);
            if (la_ === 1) {
              this.state = 2004;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CqlParser.COMMA) {
                this.state = 2003;
                this.syntaxComma();
              }

              this.state = 2006;
              this.kwDocValues();
              this.state = 2007;
              this.match(CqlParser.COLON);
              this.state = 2008;
              localctx.docValuesOption = this.booleanLiteral();
            }
            this.state = 2019;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 189, this._ctx);
            if (la_ === 1) {
              this.state = 2013;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CqlParser.COMMA) {
                this.state = 2012;
                this.syntaxComma();
              }

              this.state = 2015;
              this.kwExcluded();
              this.state = 2016;
              this.match(CqlParser.COLON);
              this.state = 2017;
              localctx.excludedOption = this.booleanLiteral();
            }
            this.state = 2028;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 191, this._ctx);
            if (la_ === 1) {
              this.state = 2022;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CqlParser.COMMA) {
                this.state = 2021;
                this.syntaxComma();
              }

              this.state = 2024;
              this.kwIndexed();
              this.state = 2025;
              this.match(CqlParser.COLON);
              this.state = 2026;
              localctx.indexedOption = this.booleanLiteral();
            }
            this.state = 2037;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CqlParser.COMMA || _la === CqlParser.K_LOWERCASE) {
              this.state = 2031;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CqlParser.COMMA) {
                this.state = 2030;
                this.syntaxComma();
              }

              this.state = 2033;
              this.kwLowerCase();
              this.state = 2034;
              this.match(CqlParser.COLON);
              this.state = 2035;
              localctx.lowerCase = this.booleanLiteral();
            }

            this.state = 2039;
            this.match(CqlParser.RC_BRACKET);
          }

          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  indexName() {
    let localctx = new IndexNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CqlParser.RULE_indexName);
    try {
      this.state = 2046;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
        case CqlParser.K_VECTOR:
          this.enterOuterAlt(localctx, 1);
          this.state = 2044;
          this.id();
          break;
        case CqlParser.STRING_LITERAL:
          this.enterOuterAlt(localctx, 2);
          this.state = 2045;
          this.stringLiteral();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  indexColumnSpec() {
    let localctx = new IndexColumnSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CqlParser.RULE_indexColumnSpec);
    try {
      this.state = 2053;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 197, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2048;
          this.column();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2049;
          this.indexKeysSpec();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2050;
          this.indexEntriesSSpec();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2051;
          this.indexFullSpec();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2052;
          this.indexValuesSpec();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  indexKeysSpec() {
    let localctx = new IndexKeysSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CqlParser.RULE_indexKeysSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2055;
      this.kwKeys();
      this.state = 2056;
      this.syntaxBracketLr();
      this.state = 2057;
      this.column();
      this.state = 2058;
      this.syntaxBracketRr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  indexEntriesSSpec() {
    let localctx = new IndexEntriesSSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CqlParser.RULE_indexEntriesSSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2060;
      this.kwEntries();
      this.state = 2061;
      this.syntaxBracketLr();
      this.state = 2062;
      this.column();
      this.state = 2063;
      this.syntaxBracketRr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  indexFullSpec() {
    let localctx = new IndexFullSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CqlParser.RULE_indexFullSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2065;
      this.kwFull();
      this.state = 2066;
      this.syntaxBracketLr();
      this.state = 2067;
      this.column();
      this.state = 2068;
      this.syntaxBracketRr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  indexValuesSpec() {
    let localctx = new IndexValuesSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, CqlParser.RULE_indexValuesSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2070;
      this.kwValues();
      this.state = 2071;
      this.syntaxBracketLr();
      this.state = 2072;
      this.column();
      this.state = 2073;
      this.syntaxBracketRr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  deleteStatement() {
    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CqlParser.RULE_deleteStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2076;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_BEGIN) {
        this.state = 2075;
        this.beginBatch();
      }

      this.state = 2078;
      this.kwDelete();
      this.state = 2080;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 199, this._ctx);
      if (la_ === 1) {
        this.state = 2079;
        this.deleteColumnList();
      }
      this.state = 2082;
      this.fromSpec();
      this.state = 2084;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_USING) {
        this.state = 2083;
        this.usingTimestampSpec();
      }

      this.state = 2086;
      this.whereSpec();
      this.state = 2089;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 201, this._ctx);
      if (la_ === 1) {
        this.state = 2087;
        this.ifExist();
      } else if (la_ === 2) {
        this.state = 2088;
        this.ifSpec();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  deleteColumnList() {
    let localctx = new DeleteColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CqlParser.RULE_deleteColumnList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2091;
      this.deleteColumnItem();
      this.state = 2097;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 2092;
        this.syntaxComma();
        this.state = 2093;
        this.deleteColumnItem();
        this.state = 2099;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  deleteColumnItem() {
    let localctx = new DeleteColumnItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CqlParser.RULE_deleteColumnItem);
    try {
      this.state = 2109;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 204, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2100;
          this.id();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2101;
          this.id();
          this.state = 2102;
          this.match(CqlParser.LS_BRACKET);
          this.state = 2105;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CqlParser.STRING_LITERAL:
              this.state = 2103;
              this.stringLiteral();
              break;
            case CqlParser.DECIMAL_LITERAL:
              this.state = 2104;
              this.decimalLiteral();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          this.state = 2107;
          this.match(CqlParser.RS_BRACKET);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  update() {
    let localctx = new UpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CqlParser.RULE_update);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2112;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_BEGIN) {
        this.state = 2111;
        this.beginBatch();
      }

      this.state = 2114;
      this.kwUpdate();
      this.state = 2118;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 206, this._ctx);
      if (la_ === 1) {
        this.state = 2115;
        this.keyspace();
        this.state = 2116;
        this.match(CqlParser.DOT);
      }
      this.state = 2120;
      this.table();
      this.state = 2122;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_USING) {
        this.state = 2121;
        this.usingTtlTimestamp();
      }

      this.state = 2124;
      this.kwSet();
      this.state = 2125;
      this.assignments();
      this.state = 2126;
      this.whereSpec();
      this.state = 2129;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 208, this._ctx);
      if (la_ === 1) {
        this.state = 2127;
        this.ifExist();
      } else if (la_ === 2) {
        this.state = 2128;
        this.ifSpec();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ifSpec() {
    let localctx = new IfSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CqlParser.RULE_ifSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2131;
      this.kwIf();
      this.state = 2132;
      this.ifConditionList();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ifConditionList() {
    let localctx = new IfConditionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CqlParser.RULE_ifConditionList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2134;
      this.ifCondition();
      this.state = 2140;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.K_AND) {
        this.state = 2135;
        this.kwAnd();
        this.state = 2136;
        this.ifCondition();
        this.state = 2142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ifCondition() {
    let localctx = new IfConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CqlParser.RULE_ifCondition);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2143;
      this.id();
      this.state = 2144;
      this.match(CqlParser.OPERATOR_EQ);
      this.state = 2145;
      this.constant();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  assignments() {
    let localctx = new AssignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CqlParser.RULE_assignments);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2147;
      this.assignmentElement();
      this.state = 2153;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 2148;
        this.syntaxComma();
        this.state = 2149;
        this.assignmentElement();
        this.state = 2155;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  assignmentElement() {
    let localctx = new AssignmentElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CqlParser.RULE_assignmentElement);
    var _la = 0; // Token type
    try {
      this.state = 2213;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 212, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2156;
          this.id();
          this.state = 2157;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 2162;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 211, this._ctx);
          switch (la_) {
            case 1:
              this.state = 2158;
              this.constant();
              break;

            case 2:
              this.state = 2159;
              this.assignmentMap();
              break;

            case 3:
              this.state = 2160;
              this.assignmentSet();
              break;

            case 4:
              this.state = 2161;
              this.assignmentList();
              break;
          }
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2164;
          this.id();
          this.state = 2165;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 2166;
          this.id();
          this.state = 2167;
          _la = this._input.LA(1);
          if (!(_la === CqlParser.PLUS || _la === CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2168;
          this.decimalLiteral();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2170;
          this.id();
          this.state = 2171;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 2172;
          this.id();
          this.state = 2173;
          _la = this._input.LA(1);
          if (!(_la === CqlParser.PLUS || _la === CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2174;
          this.assignmentSet();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2176;
          this.id();
          this.state = 2177;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 2178;
          this.assignmentSet();
          this.state = 2179;
          _la = this._input.LA(1);
          if (!(_la === CqlParser.PLUS || _la === CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2180;
          this.id();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2182;
          this.id();
          this.state = 2183;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 2184;
          this.id();
          this.state = 2185;
          _la = this._input.LA(1);
          if (!(_la === CqlParser.PLUS || _la === CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2186;
          this.assignmentMap();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 2188;
          this.id();
          this.state = 2189;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 2190;
          this.assignmentMap();
          this.state = 2191;
          _la = this._input.LA(1);
          if (!(_la === CqlParser.PLUS || _la === CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2192;
          this.id();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 2194;
          this.id();
          this.state = 2195;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 2196;
          this.id();
          this.state = 2197;
          _la = this._input.LA(1);
          if (!(_la === CqlParser.PLUS || _la === CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2198;
          this.assignmentList();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 2200;
          this.id();
          this.state = 2201;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 2202;
          this.assignmentList();
          this.state = 2203;
          _la = this._input.LA(1);
          if (!(_la === CqlParser.PLUS || _la === CqlParser.MINUS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2204;
          this.id();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 2206;
          this.id();
          this.state = 2207;
          this.syntaxBracketLs();
          this.state = 2208;
          this.decimalLiteral();
          this.state = 2209;
          this.syntaxBracketRs();
          this.state = 2210;
          this.match(CqlParser.OPERATOR_EQ);
          this.state = 2211;
          this.constant();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  assignmentSet() {
    let localctx = new AssignmentSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CqlParser.RULE_assignmentSet);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2215;
      this.syntaxBracketLc();
      this.state = 2225;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        (((_la - 23) & ~0x1f) == 0 &&
          ((1 << (_la - 23)) &
            ((1 << (CqlParser.K_ADD - 23)) |
              (1 << (CqlParser.K_ALL - 23)) |
              (1 << (CqlParser.K_ALLOW - 23)) |
              (1 << (CqlParser.K_ALTER - 23)) |
              (1 << (CqlParser.K_AND - 23)) |
              (1 << (CqlParser.K_ANY - 23)) |
              (1 << (CqlParser.K_APPLY - 23)) |
              (1 << (CqlParser.K_AS - 23)) |
              (1 << (CqlParser.K_ASC - 23)) |
              (1 << (CqlParser.K_AUTHORIZE - 23)) |
              (1 << (CqlParser.K_BATCH - 23)) |
              (1 << (CqlParser.K_BEGIN - 23)) |
              (1 << (CqlParser.K_BY - 23)) |
              (1 << (CqlParser.K_CALLED - 23)) |
              (1 << (CqlParser.K_CLUSTERING - 23)) |
              (1 << (CqlParser.K_COLUMNFAMILY - 23)) |
              (1 << (CqlParser.K_COMPACT - 23)) |
              (1 << (CqlParser.K_CONSISTENCY - 23)) |
              (1 << (CqlParser.K_CONTAINS - 23)) |
              (1 << (CqlParser.K_CREATE - 23)) |
              (1 << (CqlParser.K_CUSTOM - 23)) |
              (1 << (CqlParser.K_DELETE - 23)) |
              (1 << (CqlParser.K_DESC - 23)) |
              (1 << (CqlParser.K_DESCRIBE - 23)) |
              (1 << (CqlParser.K_DISTINCT - 23)) |
              (1 << (CqlParser.K_DROP - 23)) |
              (1 << (CqlParser.K_DURABLE_WRITES - 23)) |
              (1 << (CqlParser.K_EACH_QUORUM - 23)) |
              (1 << (CqlParser.K_ENTRIES - 23)) |
              (1 << (CqlParser.K_EXECUTE - 23)))) !==
            0) ||
        (((_la - 55) & ~0x1f) == 0 &&
          ((1 << (_la - 55)) &
            ((1 << (CqlParser.K_EXISTS - 55)) |
              (1 << (CqlParser.K_FALSE - 55)) |
              (1 << (CqlParser.K_FILTERING - 55)) |
              (1 << (CqlParser.K_FINALFUNC - 55)) |
              (1 << (CqlParser.K_FROM - 55)) |
              (1 << (CqlParser.K_FULL - 55)) |
              (1 << (CqlParser.K_FUNCTION - 55)) |
              (1 << (CqlParser.K_FUNCTIONS - 55)) |
              (1 << (CqlParser.K_GRANT - 55)) |
              (1 << (CqlParser.K_IF - 55)) |
              (1 << (CqlParser.K_IN - 55)) |
              (1 << (CqlParser.K_INDEX - 55)) |
              (1 << (CqlParser.K_INFINITY - 55)) |
              (1 << (CqlParser.K_INITCOND - 55)) |
              (1 << (CqlParser.K_INPUT - 55)) |
              (1 << (CqlParser.K_INSERT - 55)) |
              (1 << (CqlParser.K_INTO - 55)) |
              (1 << (CqlParser.K_IS - 55)) |
              (1 << (CqlParser.K_JSON - 55)) |
              (1 << (CqlParser.K_KEY - 55)) |
              (1 << (CqlParser.K_KEYS - 55)) |
              (1 << (CqlParser.K_KEYSPACE - 55)) |
              (1 << (CqlParser.K_KEYSPACES - 55)) |
              (1 << (CqlParser.K_LANGUAGE - 55)) |
              (1 << (CqlParser.K_LEVEL - 55)) |
              (1 << (CqlParser.K_LIMIT - 55)) |
              (1 << (CqlParser.K_LOCAL_ONE - 55)) |
              (1 << (CqlParser.K_LOCAL_QUORUM - 55)) |
              (1 << (CqlParser.K_LOGGED - 55)) |
              (1 << (CqlParser.K_LOGIN - 55)) |
              (1 << (CqlParser.K_MATERIALIZED - 55)) |
              (1 << (CqlParser.K_MODIFY - 55)))) !==
            0) ||
        (((_la - 87) & ~0x1f) == 0 &&
          ((1 << (_la - 87)) &
            ((1 << (CqlParser.K_NAN - 87)) |
              (1 << (CqlParser.K_NORECURSIVE - 87)) |
              (1 << (CqlParser.K_NOSUPERUSER - 87)) |
              (1 << (CqlParser.K_NOT - 87)) |
              (1 << (CqlParser.K_NULL - 87)) |
              (1 << (CqlParser.K_OF - 87)) |
              (1 << (CqlParser.K_ON - 87)) |
              (1 << (CqlParser.K_ONE - 87)) |
              (1 << (CqlParser.K_OPTIONS - 87)) |
              (1 << (CqlParser.K_OR - 87)) |
              (1 << (CqlParser.K_ORDER - 87)) |
              (1 << (CqlParser.K_PARTITION - 87)) |
              (1 << (CqlParser.K_PASSWORD - 87)) |
              (1 << (CqlParser.K_PER - 87)) |
              (1 << (CqlParser.K_PERMISSION - 87)) |
              (1 << (CqlParser.K_PERMISSIONS - 87)) |
              (1 << (CqlParser.K_PRIMARY - 87)) |
              (1 << (CqlParser.K_QUORUM - 87)) |
              (1 << (CqlParser.K_RENAME - 87)) |
              (1 << (CqlParser.K_REPLACE - 87)) |
              (1 << (CqlParser.K_REPLICATION - 87)) |
              (1 << (CqlParser.K_RETURNS - 87)) |
              (1 << (CqlParser.K_REVOKE - 87)) |
              (1 << (CqlParser.K_ROLE - 87)) |
              (1 << (CqlParser.K_ROLES - 87)) |
              (1 << (CqlParser.K_SCHEMA - 87)) |
              (1 << (CqlParser.K_SELECT - 87)) |
              (1 << (CqlParser.K_SET - 87)) |
              (1 << (CqlParser.K_SFUNC - 87)))) !==
            0) ||
        (((_la - 119) & ~0x1f) == 0 &&
          ((1 << (_la - 119)) &
            ((1 << (CqlParser.K_STATIC - 119)) |
              (1 << (CqlParser.K_STORAGE - 119)) |
              (1 << (CqlParser.K_STYPE - 119)) |
              (1 << (CqlParser.K_SUPERUSER - 119)) |
              (1 << (CqlParser.K_TABLE - 119)) |
              (1 << (CqlParser.K_THREE - 119)) |
              (1 << (CqlParser.K_TIMESTAMP - 119)) |
              (1 << (CqlParser.K_TO - 119)) |
              (1 << (CqlParser.K_TOKEN - 119)) |
              (1 << (CqlParser.K_TRIGGER - 119)) |
              (1 << (CqlParser.K_TRUE - 119)) |
              (1 << (CqlParser.K_TRUNCATE - 119)) |
              (1 << (CqlParser.K_TTL - 119)) |
              (1 << (CqlParser.K_TWO - 119)) |
              (1 << (CqlParser.K_TYPE - 119)) |
              (1 << (CqlParser.K_UNLOGGED - 119)) |
              (1 << (CqlParser.K_UPDATE - 119)) |
              (1 << (CqlParser.K_USE - 119)) |
              (1 << (CqlParser.K_USER - 119)) |
              (1 << (CqlParser.K_USING - 119)) |
              (1 << (CqlParser.K_UUID - 119)) |
              (1 << (CqlParser.K_VALUES - 119)) |
              (1 << (CqlParser.K_VIEW - 119)) |
              (1 << (CqlParser.K_WHERE - 119)) |
              (1 << (CqlParser.K_WITH - 119)) |
              (1 << (CqlParser.K_WRITETIME - 119)) |
              (1 << (CqlParser.K_ASCII - 119)))) !==
            0) ||
        (((_la - 190) & ~0x1f) == 0 &&
          ((1 << (_la - 190)) &
            ((1 << (CqlParser.K_BIGINT - 190)) |
              (1 << (CqlParser.K_BLOB - 190)) |
              (1 << (CqlParser.K_BOOLEAN - 190)) |
              (1 << (CqlParser.K_COUNTER - 190)) |
              (1 << (CqlParser.K_DATE - 190)) |
              (1 << (CqlParser.K_DECIMAL - 190)) |
              (1 << (CqlParser.K_DOUBLE - 190)) |
              (1 << (CqlParser.K_FLOAT - 190)) |
              (1 << (CqlParser.K_FROZEN - 190)) |
              (1 << (CqlParser.K_INET - 190)) |
              (1 << (CqlParser.K_INT - 190)) |
              (1 << (CqlParser.K_LIST - 190)) |
              (1 << (CqlParser.K_MAP - 190)) |
              (1 << (CqlParser.K_SMALLINT - 190)) |
              (1 << (CqlParser.K_TEXT - 190)) |
              (1 << (CqlParser.K_TIMEUUID - 190)) |
              (1 << (CqlParser.K_TIME - 190)) |
              (1 << (CqlParser.K_TINYINT - 190)) |
              (1 << (CqlParser.K_TUPLE - 190)) |
              (1 << (CqlParser.K_VARCHAR - 190)) |
              (1 << (CqlParser.K_VARINT - 190)) |
              (1 << (CqlParser.CODE_BLOCK - 190)) |
              (1 << (CqlParser.STRING_LITERAL - 190)) |
              (1 << (CqlParser.DECIMAL_LITERAL - 190)) |
              (1 << (CqlParser.FLOAT_LITERAL - 190)) |
              (1 << (CqlParser.HEXADECIMAL_LITERAL - 190)) |
              (1 << (CqlParser.OBJECT_NAME - 190)) |
              (1 << (CqlParser.UUID - 190)))) !==
            0) ||
        _la === CqlParser.K_USERS ||
        _la === CqlParser.K_VECTOR
      ) {
        this.state = 2216;
        this.constant();
        this.state = 2222;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === CqlParser.COMMA) {
          this.state = 2217;
          this.syntaxComma();
          this.state = 2218;
          this.expression();
          this.state = 2224;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }

      this.state = 2227;
      this.syntaxBracketRc();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  assignmentMap() {
    let localctx = new AssignmentMapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, CqlParser.RULE_assignmentMap);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2229;
      this.syntaxBracketLc();

      this.state = 2230;
      this.constant();
      this.state = 2231;
      this.syntaxColon();
      this.state = 2232;
      this.expression();
      this.state = 2241;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 2234;
        this.syntaxComma();
        this.state = 2235;
        this.constant();
        this.state = 2236;
        this.syntaxColon();
        this.state = 2237;
        this.expression();
        this.state = 2243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 2244;
      this.syntaxBracketRc();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  assignmentMapExpression() {
    let localctx = new AssignmentMapExpressionContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 254, CqlParser.RULE_assignmentMapExpression);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2246;
      this.syntaxBracketLc();
      this.state = 2247;
      this.expression();
      this.state = 2253;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 2248;
        this.syntaxComma();
        this.state = 2249;
        this.expression();
        this.state = 2255;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 2256;
      this.syntaxBracketRc();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  assignmentList() {
    let localctx = new AssignmentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, CqlParser.RULE_assignmentList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2258;
      this.syntaxBracketLs();
      this.state = 2259;
      this.constant();
      this.state = 2265;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 2260;
        this.syntaxComma();
        this.state = 2261;
        this.expression();
        this.state = 2267;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 2268;
      this.syntaxBracketRs();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  assignmentTuple() {
    let localctx = new AssignmentTupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CqlParser.RULE_assignmentTuple);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2270;
      this.syntaxBracketLr();
      this.state = 2299;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 222, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2271;
          this.expression();
          this.state = 2288;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 220, this._ctx);
          switch (la_) {
            case 1:
              this.state = 2277;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === CqlParser.COMMA) {
                this.state = 2272;
                this.syntaxComma();
                this.state = 2273;
                this.expression();
                this.state = 2279;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
              break;

            case 2:
              this.state = 2285;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === CqlParser.COMMA) {
                this.state = 2280;
                this.syntaxComma();
                this.state = 2281;
                this.assignmentTuple();
                this.state = 2287;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
              break;
          }
          break;

        case 2:
          this.state = 2290;
          this.assignmentTuple();
          this.state = 2296;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CqlParser.COMMA) {
            this.state = 2291;
            this.syntaxComma();
            this.state = 2292;
            this.assignmentTuple();
            this.state = 2298;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
      }
      this.state = 2301;
      this.syntaxBracketRr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  insert() {
    let localctx = new InsertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CqlParser.RULE_insert);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2304;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_BEGIN) {
        this.state = 2303;
        this.beginBatch();
      }

      this.state = 2306;
      this.kwInsert();
      this.state = 2307;
      this.kwInto();
      this.state = 2311;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 224, this._ctx);
      if (la_ === 1) {
        this.state = 2308;
        this.keyspace();
        this.state = 2309;
        this.match(CqlParser.DOT);
      }
      this.state = 2313;
      this.table();
      this.state = 2315;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.LR_BRACKET) {
        this.state = 2314;
        this.insertColumnSpec();
      }

      this.state = 2317;
      this.insertValuesSpec();
      this.state = 2319;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_IF) {
        this.state = 2318;
        this.ifNotExist();
      }

      this.state = 2322;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_USING) {
        this.state = 2321;
        this.usingTtlTimestamp();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  usingTtlTimestamp() {
    let localctx = new UsingTtlTimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CqlParser.RULE_usingTtlTimestamp);
    try {
      this.state = 2340;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 228, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2324;
          this.kwUsing();
          this.state = 2325;
          this.ttl();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2327;
          this.kwUsing();
          this.state = 2328;
          this.ttl();
          this.state = 2329;
          this.kwAnd();
          this.state = 2330;
          this.timestamp();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2332;
          this.kwUsing();
          this.state = 2333;
          this.timestamp();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2335;
          this.kwUsing();
          this.state = 2336;
          this.timestamp();
          this.state = 2337;
          this.kwAnd();
          this.state = 2338;
          this.ttl();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  timestamp() {
    let localctx = new TimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CqlParser.RULE_timestamp);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2342;
      this.kwTimestamp();
      this.state = 2343;
      this.decimalLiteral();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ttl() {
    let localctx = new TtlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CqlParser.RULE_ttl);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2345;
      this.kwTtl();
      this.state = 2346;
      this.decimalLiteral();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  usingTimestampSpec() {
    let localctx = new UsingTimestampSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, CqlParser.RULE_usingTimestampSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2348;
      this.kwUsing();
      this.state = 2349;
      this.timestamp();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ifNotExist() {
    let localctx = new IfNotExistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, CqlParser.RULE_ifNotExist);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2351;
      this.kwIf();
      this.state = 2352;
      this.kwNot();
      this.state = 2353;
      this.kwExists();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ifExist() {
    let localctx = new IfExistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, CqlParser.RULE_ifExist);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2355;
      this.kwIf();
      this.state = 2356;
      this.kwExists();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  insertValuesSpec() {
    let localctx = new InsertValuesSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CqlParser.RULE_insertValuesSpec);
    try {
      this.state = 2366;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_VALUES:
          this.enterOuterAlt(localctx, 1);
          this.state = 2358;
          this.kwValues();
          this.state = 2359;
          this.match(CqlParser.LR_BRACKET);
          this.state = 2360;
          this.expressionList();
          this.state = 2361;
          this.match(CqlParser.RR_BRACKET);
          break;
        case CqlParser.K_JSON:
          this.enterOuterAlt(localctx, 2);
          this.state = 2363;
          this.kwJson();
          this.state = 2364;
          this.constant();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  insertColumnSpec() {
    let localctx = new InsertColumnSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CqlParser.RULE_insertColumnSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2368;
      this.match(CqlParser.LR_BRACKET);
      this.state = 2369;
      this.columnList();
      this.state = 2370;
      this.match(CqlParser.RR_BRACKET);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnList() {
    let localctx = new ColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CqlParser.RULE_columnList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2372;
      this.column();
      this.state = 2378;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 2373;
        this.syntaxComma();
        this.state = 2374;
        this.column();
        this.state = 2380;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  expressionList() {
    let localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, CqlParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2381;
      this.expression();
      this.state = 2387;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 2382;
        this.syntaxComma();
        this.state = 2383;
        this.expression();
        this.state = 2389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  expression() {
    let localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, CqlParser.RULE_expression);
    try {
      this.state = 2396;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 232, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2390;
          this.constant();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2391;
          this.assignmentMap();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2392;
          this.assignmentSet();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2393;
          this.assignmentList();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2394;
          this.assignmentTuple();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 2395;
          this.assignmentMapExpression();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  select() {
    let localctx = new SelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CqlParser.RULE_select);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2398;
      this.kwSelect();
      this.state = 2400;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 233, this._ctx);
      if (la_ === 1) {
        this.state = 2399;
        this.distinctSpec();
      }
      this.state = 2403;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 234, this._ctx);
      if (la_ === 1) {
        this.state = 2402;
        this.kwJson();
      }
      this.state = 2405;
      this.selectElements();
      this.state = 2406;
      this.fromSpec();
      this.state = 2408;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_WHERE) {
        this.state = 2407;
        this.whereSpec();
      }

      this.state = 2411;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_ORDER) {
        this.state = 2410;
        this.orderSpec();
      }

      this.state = 2414;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_LIMIT) {
        this.state = 2413;
        this.limitSpec();
      }

      this.state = 2417;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.K_ALLOW) {
        this.state = 2416;
        this.allowFilteringSpec();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  allowFilteringSpec() {
    let localctx = new AllowFilteringSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, CqlParser.RULE_allowFilteringSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2419;
      this.kwAllow();
      this.state = 2420;
      this.kwFiltering();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  limitSpec() {
    let localctx = new LimitSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CqlParser.RULE_limitSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2422;
      this.kwLimit();
      this.state = 2423;
      this.decimalLiteral();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  fromSpec() {
    let localctx = new FromSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CqlParser.RULE_fromSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2425;
      this.kwFrom();
      this.state = 2426;
      this.fromSpecElement();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  fromSpecElement() {
    let localctx = new FromSpecElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CqlParser.RULE_fromSpecElement);
    try {
      this.state = 2433;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 239, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2428;
          this.id();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2429;
          this.id();
          this.state = 2430;
          this.match(CqlParser.DOT);
          this.state = 2431;
          this.id();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  orderSpec() {
    let localctx = new OrderSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CqlParser.RULE_orderSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2435;
      this.kwOrder();
      this.state = 2436;
      this.kwBy();
      this.state = 2437;
      this.orderSpecElement();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  orderSpecElement() {
    let localctx = new OrderSpecElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CqlParser.RULE_orderSpecElement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2439;
      this.id();
      this.state = 2442;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_ASC:
          this.state = 2440;
          this.kwAsc();
          break;
        case CqlParser.K_DESC:
          this.state = 2441;
          this.kwDesc();
          break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_ALLOW:
        case CqlParser.K_LIMIT:
          break;
        default:
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  whereSpec() {
    let localctx = new WhereSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CqlParser.RULE_whereSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2444;
      this.kwWhere();
      this.state = 2445;
      this.relationElements();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  distinctSpec() {
    let localctx = new DistinctSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CqlParser.RULE_distinctSpec);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2447;
      this.kwDistinct();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  selectElements() {
    let localctx = new SelectElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, CqlParser.RULE_selectElements);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2451;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.STAR:
          this.state = 2449;
          localctx.star = this.match(CqlParser.STAR);
          break;
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
        case CqlParser.K_VECTOR:
          this.state = 2450;
          this.selectElement();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 2458;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 2453;
        this.syntaxComma();
        this.state = 2454;
        this.selectElement();
        this.state = 2460;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  selectElement() {
    let localctx = new SelectElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, CqlParser.RULE_selectElement);
    var _la = 0; // Token type
    try {
      this.state = 2477;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 245, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2461;
          this.id();
          this.state = 2462;
          this.match(CqlParser.DOT);
          this.state = 2463;
          this.match(CqlParser.STAR);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2465;
          this.id();
          this.state = 2469;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.K_AS) {
            this.state = 2466;
            this.kwAs();
            this.state = 2467;
            this.id();
          }

          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2471;
          this.functionCall();
          this.state = 2475;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CqlParser.K_AS) {
            this.state = 2472;
            this.kwAs();
            this.state = 2473;
            this.id();
          }

          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  relationElements() {
    let localctx = new RelationElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, CqlParser.RULE_relationElements);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2479;
      this.relationElement();
      this.state = 2485;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.K_AND) {
        this.state = 2480;
        this.kwAnd();
        this.state = 2481;
        this.relationElement();
        this.state = 2487;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  relationElement() {
    let localctx = new RelationElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, CqlParser.RULE_relationElement);
    var _la = 0; // Token type
    try {
      this.state = 2561;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 252, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2488;
          this.id();
          this.state = 2489;
          _la = this._input.LA(1);
          if (
            !(
              ((_la - 219) & ~0x1f) == 0 &&
              ((1 << (_la - 219)) &
                ((1 << (CqlParser.OPERATOR_EQ - 219)) |
                  (1 << (CqlParser.OPERATOR_LT - 219)) |
                  (1 << (CqlParser.OPERATOR_GT - 219)) |
                  (1 << (CqlParser.OPERATOR_LTE - 219)) |
                  (1 << (CqlParser.OPERATOR_GTE - 219)))) !==
                0
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2490;
          this.constant();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2492;
          this.id();
          this.state = 2493;
          this.match(CqlParser.DOT);
          this.state = 2494;
          this.id();
          this.state = 2495;
          _la = this._input.LA(1);
          if (
            !(
              ((_la - 219) & ~0x1f) == 0 &&
              ((1 << (_la - 219)) &
                ((1 << (CqlParser.OPERATOR_EQ - 219)) |
                  (1 << (CqlParser.OPERATOR_LT - 219)) |
                  (1 << (CqlParser.OPERATOR_GT - 219)) |
                  (1 << (CqlParser.OPERATOR_LTE - 219)) |
                  (1 << (CqlParser.OPERATOR_GTE - 219)))) !==
                0
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2496;
          this.constant();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2498;
          this.functionCall();
          this.state = 2499;
          _la = this._input.LA(1);
          if (
            !(
              ((_la - 219) & ~0x1f) == 0 &&
              ((1 << (_la - 219)) &
                ((1 << (CqlParser.OPERATOR_EQ - 219)) |
                  (1 << (CqlParser.OPERATOR_LT - 219)) |
                  (1 << (CqlParser.OPERATOR_GT - 219)) |
                  (1 << (CqlParser.OPERATOR_LTE - 219)) |
                  (1 << (CqlParser.OPERATOR_GTE - 219)))) !==
                0
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2500;
          this.constant();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2502;
          this.functionCall();
          this.state = 2503;
          _la = this._input.LA(1);
          if (
            !(
              ((_la - 219) & ~0x1f) == 0 &&
              ((1 << (_la - 219)) &
                ((1 << (CqlParser.OPERATOR_EQ - 219)) |
                  (1 << (CqlParser.OPERATOR_LT - 219)) |
                  (1 << (CqlParser.OPERATOR_GT - 219)) |
                  (1 << (CqlParser.OPERATOR_LTE - 219)) |
                  (1 << (CqlParser.OPERATOR_GTE - 219)))) !==
                0
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2504;
          this.functionCall();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2506;
          this.id();
          this.state = 2507;
          this.kwIn();
          this.state = 2508;
          this.match(CqlParser.LR_BRACKET);
          this.state = 2510;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (
            (((_la - 23) & ~0x1f) == 0 &&
              ((1 << (_la - 23)) &
                ((1 << (CqlParser.K_ADD - 23)) |
                  (1 << (CqlParser.K_ALL - 23)) |
                  (1 << (CqlParser.K_ALLOW - 23)) |
                  (1 << (CqlParser.K_ALTER - 23)) |
                  (1 << (CqlParser.K_AND - 23)) |
                  (1 << (CqlParser.K_ANY - 23)) |
                  (1 << (CqlParser.K_APPLY - 23)) |
                  (1 << (CqlParser.K_AS - 23)) |
                  (1 << (CqlParser.K_ASC - 23)) |
                  (1 << (CqlParser.K_AUTHORIZE - 23)) |
                  (1 << (CqlParser.K_BATCH - 23)) |
                  (1 << (CqlParser.K_BEGIN - 23)) |
                  (1 << (CqlParser.K_BY - 23)) |
                  (1 << (CqlParser.K_CALLED - 23)) |
                  (1 << (CqlParser.K_CLUSTERING - 23)) |
                  (1 << (CqlParser.K_COLUMNFAMILY - 23)) |
                  (1 << (CqlParser.K_COMPACT - 23)) |
                  (1 << (CqlParser.K_CONSISTENCY - 23)) |
                  (1 << (CqlParser.K_CONTAINS - 23)) |
                  (1 << (CqlParser.K_CREATE - 23)) |
                  (1 << (CqlParser.K_CUSTOM - 23)) |
                  (1 << (CqlParser.K_DELETE - 23)) |
                  (1 << (CqlParser.K_DESC - 23)) |
                  (1 << (CqlParser.K_DESCRIBE - 23)) |
                  (1 << (CqlParser.K_DISTINCT - 23)) |
                  (1 << (CqlParser.K_DROP - 23)) |
                  (1 << (CqlParser.K_DURABLE_WRITES - 23)) |
                  (1 << (CqlParser.K_EACH_QUORUM - 23)) |
                  (1 << (CqlParser.K_ENTRIES - 23)) |
                  (1 << (CqlParser.K_EXECUTE - 23)))) !==
                0) ||
            (((_la - 55) & ~0x1f) == 0 &&
              ((1 << (_la - 55)) &
                ((1 << (CqlParser.K_EXISTS - 55)) |
                  (1 << (CqlParser.K_FALSE - 55)) |
                  (1 << (CqlParser.K_FILTERING - 55)) |
                  (1 << (CqlParser.K_FINALFUNC - 55)) |
                  (1 << (CqlParser.K_FROM - 55)) |
                  (1 << (CqlParser.K_FULL - 55)) |
                  (1 << (CqlParser.K_FUNCTION - 55)) |
                  (1 << (CqlParser.K_FUNCTIONS - 55)) |
                  (1 << (CqlParser.K_GRANT - 55)) |
                  (1 << (CqlParser.K_IF - 55)) |
                  (1 << (CqlParser.K_IN - 55)) |
                  (1 << (CqlParser.K_INDEX - 55)) |
                  (1 << (CqlParser.K_INFINITY - 55)) |
                  (1 << (CqlParser.K_INITCOND - 55)) |
                  (1 << (CqlParser.K_INPUT - 55)) |
                  (1 << (CqlParser.K_INSERT - 55)) |
                  (1 << (CqlParser.K_INTO - 55)) |
                  (1 << (CqlParser.K_IS - 55)) |
                  (1 << (CqlParser.K_JSON - 55)) |
                  (1 << (CqlParser.K_KEY - 55)) |
                  (1 << (CqlParser.K_KEYS - 55)) |
                  (1 << (CqlParser.K_KEYSPACE - 55)) |
                  (1 << (CqlParser.K_KEYSPACES - 55)) |
                  (1 << (CqlParser.K_LANGUAGE - 55)) |
                  (1 << (CqlParser.K_LEVEL - 55)) |
                  (1 << (CqlParser.K_LIMIT - 55)) |
                  (1 << (CqlParser.K_LOCAL_ONE - 55)) |
                  (1 << (CqlParser.K_LOCAL_QUORUM - 55)) |
                  (1 << (CqlParser.K_LOGGED - 55)) |
                  (1 << (CqlParser.K_LOGIN - 55)) |
                  (1 << (CqlParser.K_MATERIALIZED - 55)) |
                  (1 << (CqlParser.K_MODIFY - 55)))) !==
                0) ||
            (((_la - 87) & ~0x1f) == 0 &&
              ((1 << (_la - 87)) &
                ((1 << (CqlParser.K_NAN - 87)) |
                  (1 << (CqlParser.K_NORECURSIVE - 87)) |
                  (1 << (CqlParser.K_NOSUPERUSER - 87)) |
                  (1 << (CqlParser.K_NOT - 87)) |
                  (1 << (CqlParser.K_NULL - 87)) |
                  (1 << (CqlParser.K_OF - 87)) |
                  (1 << (CqlParser.K_ON - 87)) |
                  (1 << (CqlParser.K_ONE - 87)) |
                  (1 << (CqlParser.K_OPTIONS - 87)) |
                  (1 << (CqlParser.K_OR - 87)) |
                  (1 << (CqlParser.K_ORDER - 87)) |
                  (1 << (CqlParser.K_PARTITION - 87)) |
                  (1 << (CqlParser.K_PASSWORD - 87)) |
                  (1 << (CqlParser.K_PER - 87)) |
                  (1 << (CqlParser.K_PERMISSION - 87)) |
                  (1 << (CqlParser.K_PERMISSIONS - 87)) |
                  (1 << (CqlParser.K_PRIMARY - 87)) |
                  (1 << (CqlParser.K_QUORUM - 87)) |
                  (1 << (CqlParser.K_RENAME - 87)) |
                  (1 << (CqlParser.K_REPLACE - 87)) |
                  (1 << (CqlParser.K_REPLICATION - 87)) |
                  (1 << (CqlParser.K_RETURNS - 87)) |
                  (1 << (CqlParser.K_REVOKE - 87)) |
                  (1 << (CqlParser.K_ROLE - 87)) |
                  (1 << (CqlParser.K_ROLES - 87)) |
                  (1 << (CqlParser.K_SCHEMA - 87)) |
                  (1 << (CqlParser.K_SELECT - 87)) |
                  (1 << (CqlParser.K_SET - 87)) |
                  (1 << (CqlParser.K_SFUNC - 87)))) !==
                0) ||
            (((_la - 119) & ~0x1f) == 0 &&
              ((1 << (_la - 119)) &
                ((1 << (CqlParser.K_STATIC - 119)) |
                  (1 << (CqlParser.K_STORAGE - 119)) |
                  (1 << (CqlParser.K_STYPE - 119)) |
                  (1 << (CqlParser.K_SUPERUSER - 119)) |
                  (1 << (CqlParser.K_TABLE - 119)) |
                  (1 << (CqlParser.K_THREE - 119)) |
                  (1 << (CqlParser.K_TIMESTAMP - 119)) |
                  (1 << (CqlParser.K_TO - 119)) |
                  (1 << (CqlParser.K_TOKEN - 119)) |
                  (1 << (CqlParser.K_TRIGGER - 119)) |
                  (1 << (CqlParser.K_TRUE - 119)) |
                  (1 << (CqlParser.K_TRUNCATE - 119)) |
                  (1 << (CqlParser.K_TTL - 119)) |
                  (1 << (CqlParser.K_TWO - 119)) |
                  (1 << (CqlParser.K_TYPE - 119)) |
                  (1 << (CqlParser.K_UNLOGGED - 119)) |
                  (1 << (CqlParser.K_UPDATE - 119)) |
                  (1 << (CqlParser.K_USE - 119)) |
                  (1 << (CqlParser.K_USER - 119)) |
                  (1 << (CqlParser.K_USING - 119)) |
                  (1 << (CqlParser.K_UUID - 119)) |
                  (1 << (CqlParser.K_VALUES - 119)) |
                  (1 << (CqlParser.K_VIEW - 119)) |
                  (1 << (CqlParser.K_WHERE - 119)) |
                  (1 << (CqlParser.K_WITH - 119)) |
                  (1 << (CqlParser.K_WRITETIME - 119)) |
                  (1 << (CqlParser.K_ASCII - 119)))) !==
                0) ||
            (((_la - 190) & ~0x1f) == 0 &&
              ((1 << (_la - 190)) &
                ((1 << (CqlParser.K_BIGINT - 190)) |
                  (1 << (CqlParser.K_BLOB - 190)) |
                  (1 << (CqlParser.K_BOOLEAN - 190)) |
                  (1 << (CqlParser.K_COUNTER - 190)) |
                  (1 << (CqlParser.K_DATE - 190)) |
                  (1 << (CqlParser.K_DECIMAL - 190)) |
                  (1 << (CqlParser.K_DOUBLE - 190)) |
                  (1 << (CqlParser.K_FLOAT - 190)) |
                  (1 << (CqlParser.K_FROZEN - 190)) |
                  (1 << (CqlParser.K_INET - 190)) |
                  (1 << (CqlParser.K_INT - 190)) |
                  (1 << (CqlParser.K_LIST - 190)) |
                  (1 << (CqlParser.K_MAP - 190)) |
                  (1 << (CqlParser.K_SMALLINT - 190)) |
                  (1 << (CqlParser.K_TEXT - 190)) |
                  (1 << (CqlParser.K_TIMEUUID - 190)) |
                  (1 << (CqlParser.K_TIME - 190)) |
                  (1 << (CqlParser.K_TINYINT - 190)) |
                  (1 << (CqlParser.K_TUPLE - 190)) |
                  (1 << (CqlParser.K_VARCHAR - 190)) |
                  (1 << (CqlParser.K_VARINT - 190)) |
                  (1 << (CqlParser.CODE_BLOCK - 190)) |
                  (1 << (CqlParser.STRING_LITERAL - 190)) |
                  (1 << (CqlParser.DECIMAL_LITERAL - 190)) |
                  (1 << (CqlParser.FLOAT_LITERAL - 190)) |
                  (1 << (CqlParser.HEXADECIMAL_LITERAL - 190)) |
                  (1 << (CqlParser.OBJECT_NAME - 190)) |
                  (1 << (CqlParser.UUID - 190)))) !==
                0) ||
            _la === CqlParser.K_USERS ||
            _la === CqlParser.K_VECTOR
          ) {
            this.state = 2509;
            this.functionArgs();
          }

          this.state = 2512;
          this.match(CqlParser.RR_BRACKET);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 2514;
          this.match(CqlParser.LR_BRACKET);
          this.state = 2515;
          this.id();
          this.state = 2521;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CqlParser.COMMA) {
            this.state = 2516;
            this.syntaxComma();
            this.state = 2517;
            this.id();
            this.state = 2523;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2524;
          this.match(CqlParser.RR_BRACKET);
          this.state = 2525;
          this.kwIn();
          this.state = 2526;
          this.match(CqlParser.LR_BRACKET);
          this.state = 2527;
          this.assignmentTuple();
          this.state = 2533;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CqlParser.COMMA) {
            this.state = 2528;
            this.syntaxComma();
            this.state = 2529;
            this.assignmentTuple();
            this.state = 2535;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2536;
          this.match(CqlParser.RR_BRACKET);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 2538;
          this.match(CqlParser.LR_BRACKET);
          this.state = 2539;
          this.id();
          this.state = 2545;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CqlParser.COMMA) {
            this.state = 2540;
            this.syntaxComma();
            this.state = 2541;
            this.id();
            this.state = 2547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2548;
          this.match(CqlParser.RR_BRACKET);
          this.state = 2549;
          _la = this._input.LA(1);
          if (
            !(
              ((_la - 219) & ~0x1f) == 0 &&
              ((1 << (_la - 219)) &
                ((1 << (CqlParser.OPERATOR_EQ - 219)) |
                  (1 << (CqlParser.OPERATOR_LT - 219)) |
                  (1 << (CqlParser.OPERATOR_GT - 219)) |
                  (1 << (CqlParser.OPERATOR_LTE - 219)) |
                  (1 << (CqlParser.OPERATOR_GTE - 219)))) !==
                0
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }

          this.state = 2550;
          this.assignmentTuple();
          this.state = 2556;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CqlParser.COMMA) {
            this.state = 2551;
            this.syntaxComma();
            this.state = 2552;
            this.assignmentTuple();
            this.state = 2558;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 2559;
          this.relalationContainsKey();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 2560;
          this.relalationContains();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  relalationContains() {
    let localctx = new RelalationContainsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, CqlParser.RULE_relalationContains);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2563;
      this.id();
      this.state = 2564;
      this.kwContains();
      this.state = 2565;
      this.constant();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  relalationContainsKey() {
    let localctx = new RelalationContainsKeyContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 312, CqlParser.RULE_relalationContainsKey);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2567;
      this.id();

      this.state = 2568;
      this.kwContains();
      this.state = 2569;
      this.kwKey();
      this.state = 2571;
      this.constant();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  functionCall() {
    let localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CqlParser.RULE_functionCall);
    var _la = 0; // Token type
    try {
      this.state = 2585;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 254, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2573;
          this.id();
          this.state = 2574;
          this.match(CqlParser.LR_BRACKET);
          this.state = 2575;
          this.match(CqlParser.STAR);
          this.state = 2576;
          this.match(CqlParser.RR_BRACKET);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2578;
          this.id();
          this.state = 2579;
          this.match(CqlParser.LR_BRACKET);
          this.state = 2581;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (
            (((_la - 23) & ~0x1f) == 0 &&
              ((1 << (_la - 23)) &
                ((1 << (CqlParser.K_ADD - 23)) |
                  (1 << (CqlParser.K_ALL - 23)) |
                  (1 << (CqlParser.K_ALLOW - 23)) |
                  (1 << (CqlParser.K_ALTER - 23)) |
                  (1 << (CqlParser.K_AND - 23)) |
                  (1 << (CqlParser.K_ANY - 23)) |
                  (1 << (CqlParser.K_APPLY - 23)) |
                  (1 << (CqlParser.K_AS - 23)) |
                  (1 << (CqlParser.K_ASC - 23)) |
                  (1 << (CqlParser.K_AUTHORIZE - 23)) |
                  (1 << (CqlParser.K_BATCH - 23)) |
                  (1 << (CqlParser.K_BEGIN - 23)) |
                  (1 << (CqlParser.K_BY - 23)) |
                  (1 << (CqlParser.K_CALLED - 23)) |
                  (1 << (CqlParser.K_CLUSTERING - 23)) |
                  (1 << (CqlParser.K_COLUMNFAMILY - 23)) |
                  (1 << (CqlParser.K_COMPACT - 23)) |
                  (1 << (CqlParser.K_CONSISTENCY - 23)) |
                  (1 << (CqlParser.K_CONTAINS - 23)) |
                  (1 << (CqlParser.K_CREATE - 23)) |
                  (1 << (CqlParser.K_CUSTOM - 23)) |
                  (1 << (CqlParser.K_DELETE - 23)) |
                  (1 << (CqlParser.K_DESC - 23)) |
                  (1 << (CqlParser.K_DESCRIBE - 23)) |
                  (1 << (CqlParser.K_DISTINCT - 23)) |
                  (1 << (CqlParser.K_DROP - 23)) |
                  (1 << (CqlParser.K_DURABLE_WRITES - 23)) |
                  (1 << (CqlParser.K_EACH_QUORUM - 23)) |
                  (1 << (CqlParser.K_ENTRIES - 23)) |
                  (1 << (CqlParser.K_EXECUTE - 23)))) !==
                0) ||
            (((_la - 55) & ~0x1f) == 0 &&
              ((1 << (_la - 55)) &
                ((1 << (CqlParser.K_EXISTS - 55)) |
                  (1 << (CqlParser.K_FALSE - 55)) |
                  (1 << (CqlParser.K_FILTERING - 55)) |
                  (1 << (CqlParser.K_FINALFUNC - 55)) |
                  (1 << (CqlParser.K_FROM - 55)) |
                  (1 << (CqlParser.K_FULL - 55)) |
                  (1 << (CqlParser.K_FUNCTION - 55)) |
                  (1 << (CqlParser.K_FUNCTIONS - 55)) |
                  (1 << (CqlParser.K_GRANT - 55)) |
                  (1 << (CqlParser.K_IF - 55)) |
                  (1 << (CqlParser.K_IN - 55)) |
                  (1 << (CqlParser.K_INDEX - 55)) |
                  (1 << (CqlParser.K_INFINITY - 55)) |
                  (1 << (CqlParser.K_INITCOND - 55)) |
                  (1 << (CqlParser.K_INPUT - 55)) |
                  (1 << (CqlParser.K_INSERT - 55)) |
                  (1 << (CqlParser.K_INTO - 55)) |
                  (1 << (CqlParser.K_IS - 55)) |
                  (1 << (CqlParser.K_JSON - 55)) |
                  (1 << (CqlParser.K_KEY - 55)) |
                  (1 << (CqlParser.K_KEYS - 55)) |
                  (1 << (CqlParser.K_KEYSPACE - 55)) |
                  (1 << (CqlParser.K_KEYSPACES - 55)) |
                  (1 << (CqlParser.K_LANGUAGE - 55)) |
                  (1 << (CqlParser.K_LEVEL - 55)) |
                  (1 << (CqlParser.K_LIMIT - 55)) |
                  (1 << (CqlParser.K_LOCAL_ONE - 55)) |
                  (1 << (CqlParser.K_LOCAL_QUORUM - 55)) |
                  (1 << (CqlParser.K_LOGGED - 55)) |
                  (1 << (CqlParser.K_LOGIN - 55)) |
                  (1 << (CqlParser.K_MATERIALIZED - 55)) |
                  (1 << (CqlParser.K_MODIFY - 55)))) !==
                0) ||
            (((_la - 87) & ~0x1f) == 0 &&
              ((1 << (_la - 87)) &
                ((1 << (CqlParser.K_NAN - 87)) |
                  (1 << (CqlParser.K_NORECURSIVE - 87)) |
                  (1 << (CqlParser.K_NOSUPERUSER - 87)) |
                  (1 << (CqlParser.K_NOT - 87)) |
                  (1 << (CqlParser.K_NULL - 87)) |
                  (1 << (CqlParser.K_OF - 87)) |
                  (1 << (CqlParser.K_ON - 87)) |
                  (1 << (CqlParser.K_ONE - 87)) |
                  (1 << (CqlParser.K_OPTIONS - 87)) |
                  (1 << (CqlParser.K_OR - 87)) |
                  (1 << (CqlParser.K_ORDER - 87)) |
                  (1 << (CqlParser.K_PARTITION - 87)) |
                  (1 << (CqlParser.K_PASSWORD - 87)) |
                  (1 << (CqlParser.K_PER - 87)) |
                  (1 << (CqlParser.K_PERMISSION - 87)) |
                  (1 << (CqlParser.K_PERMISSIONS - 87)) |
                  (1 << (CqlParser.K_PRIMARY - 87)) |
                  (1 << (CqlParser.K_QUORUM - 87)) |
                  (1 << (CqlParser.K_RENAME - 87)) |
                  (1 << (CqlParser.K_REPLACE - 87)) |
                  (1 << (CqlParser.K_REPLICATION - 87)) |
                  (1 << (CqlParser.K_RETURNS - 87)) |
                  (1 << (CqlParser.K_REVOKE - 87)) |
                  (1 << (CqlParser.K_ROLE - 87)) |
                  (1 << (CqlParser.K_ROLES - 87)) |
                  (1 << (CqlParser.K_SCHEMA - 87)) |
                  (1 << (CqlParser.K_SELECT - 87)) |
                  (1 << (CqlParser.K_SET - 87)) |
                  (1 << (CqlParser.K_SFUNC - 87)))) !==
                0) ||
            (((_la - 119) & ~0x1f) == 0 &&
              ((1 << (_la - 119)) &
                ((1 << (CqlParser.K_STATIC - 119)) |
                  (1 << (CqlParser.K_STORAGE - 119)) |
                  (1 << (CqlParser.K_STYPE - 119)) |
                  (1 << (CqlParser.K_SUPERUSER - 119)) |
                  (1 << (CqlParser.K_TABLE - 119)) |
                  (1 << (CqlParser.K_THREE - 119)) |
                  (1 << (CqlParser.K_TIMESTAMP - 119)) |
                  (1 << (CqlParser.K_TO - 119)) |
                  (1 << (CqlParser.K_TOKEN - 119)) |
                  (1 << (CqlParser.K_TRIGGER - 119)) |
                  (1 << (CqlParser.K_TRUE - 119)) |
                  (1 << (CqlParser.K_TRUNCATE - 119)) |
                  (1 << (CqlParser.K_TTL - 119)) |
                  (1 << (CqlParser.K_TWO - 119)) |
                  (1 << (CqlParser.K_TYPE - 119)) |
                  (1 << (CqlParser.K_UNLOGGED - 119)) |
                  (1 << (CqlParser.K_UPDATE - 119)) |
                  (1 << (CqlParser.K_USE - 119)) |
                  (1 << (CqlParser.K_USER - 119)) |
                  (1 << (CqlParser.K_USING - 119)) |
                  (1 << (CqlParser.K_UUID - 119)) |
                  (1 << (CqlParser.K_VALUES - 119)) |
                  (1 << (CqlParser.K_VIEW - 119)) |
                  (1 << (CqlParser.K_WHERE - 119)) |
                  (1 << (CqlParser.K_WITH - 119)) |
                  (1 << (CqlParser.K_WRITETIME - 119)) |
                  (1 << (CqlParser.K_ASCII - 119)))) !==
                0) ||
            (((_la - 190) & ~0x1f) == 0 &&
              ((1 << (_la - 190)) &
                ((1 << (CqlParser.K_BIGINT - 190)) |
                  (1 << (CqlParser.K_BLOB - 190)) |
                  (1 << (CqlParser.K_BOOLEAN - 190)) |
                  (1 << (CqlParser.K_COUNTER - 190)) |
                  (1 << (CqlParser.K_DATE - 190)) |
                  (1 << (CqlParser.K_DECIMAL - 190)) |
                  (1 << (CqlParser.K_DOUBLE - 190)) |
                  (1 << (CqlParser.K_FLOAT - 190)) |
                  (1 << (CqlParser.K_FROZEN - 190)) |
                  (1 << (CqlParser.K_INET - 190)) |
                  (1 << (CqlParser.K_INT - 190)) |
                  (1 << (CqlParser.K_LIST - 190)) |
                  (1 << (CqlParser.K_MAP - 190)) |
                  (1 << (CqlParser.K_SMALLINT - 190)) |
                  (1 << (CqlParser.K_TEXT - 190)) |
                  (1 << (CqlParser.K_TIMEUUID - 190)) |
                  (1 << (CqlParser.K_TIME - 190)) |
                  (1 << (CqlParser.K_TINYINT - 190)) |
                  (1 << (CqlParser.K_TUPLE - 190)) |
                  (1 << (CqlParser.K_VARCHAR - 190)) |
                  (1 << (CqlParser.K_VARINT - 190)) |
                  (1 << (CqlParser.CODE_BLOCK - 190)) |
                  (1 << (CqlParser.STRING_LITERAL - 190)) |
                  (1 << (CqlParser.DECIMAL_LITERAL - 190)) |
                  (1 << (CqlParser.FLOAT_LITERAL - 190)) |
                  (1 << (CqlParser.HEXADECIMAL_LITERAL - 190)) |
                  (1 << (CqlParser.OBJECT_NAME - 190)) |
                  (1 << (CqlParser.UUID - 190)))) !==
                0) ||
            _la === CqlParser.K_USERS ||
            _la === CqlParser.K_VECTOR
          ) {
            this.state = 2580;
            this.functionArgs();
          }

          this.state = 2583;
          this.match(CqlParser.RR_BRACKET);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  functionArgs() {
    let localctx = new FunctionArgsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CqlParser.RULE_functionArgs);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2590;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 255, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2587;
          this.constant();
          break;

        case 2:
          this.state = 2588;
          this.id();
          break;

        case 3:
          this.state = 2589;
          this.functionCall();
          break;
      }
      this.state = 2600;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 2592;
        this.syntaxComma();
        this.state = 2596;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 256, this._ctx);
        switch (la_) {
          case 1:
            this.state = 2593;
            this.constant();
            break;

          case 2:
            this.state = 2594;
            this.id();
            break;

          case 3:
            this.state = 2595;
            this.functionCall();
            break;
        }
        this.state = 2602;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  constant() {
    let localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, CqlParser.RULE_constant);
    try {
      this.state = 2612;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 258, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2603;
          this.match(CqlParser.UUID);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2604;
          this.stringLiteral();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2605;
          this.decimalLiteral();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2606;
          this.floatLiteral();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2607;
          this.hexadecimalLiteral();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 2608;
          this.booleanLiteral();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 2609;
          this.codeBlock();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 2610;
          this.kwNull();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 2611;
          this.id();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  decimalLiteral() {
    let localctx = new DecimalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CqlParser.RULE_decimalLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2614;
      this.match(CqlParser.DECIMAL_LITERAL);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  floatLiteral() {
    let localctx = new FloatLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CqlParser.RULE_floatLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2616;
      _la = this._input.LA(1);
      if (
        !(_la === CqlParser.DECIMAL_LITERAL || _la === CqlParser.FLOAT_LITERAL)
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  stringLiteral() {
    let localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CqlParser.RULE_stringLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2618;
      this.match(CqlParser.STRING_LITERAL);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  booleanLiteral() {
    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CqlParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2620;
      _la = this._input.LA(1);
      if (!(_la === CqlParser.K_FALSE || _la === CqlParser.K_TRUE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  hexadecimalLiteral() {
    let localctx = new HexadecimalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CqlParser.RULE_hexadecimalLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2622;
      this.match(CqlParser.HEXADECIMAL_LITERAL);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  keyspace() {
    let localctx = new KeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CqlParser.RULE_keyspace);
    try {
      this.state = 2629;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
        case CqlParser.K_VECTOR:
          this.enterOuterAlt(localctx, 1);
          this.state = 2624;
          this.id();
          break;
        case CqlParser.DQUOTE:
          this.enterOuterAlt(localctx, 2);
          this.state = 2625;
          this.match(CqlParser.DQUOTE);
          this.state = 2626;
          this.id();
          this.state = 2627;
          this.match(CqlParser.DQUOTE);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  table() {
    let localctx = new TableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CqlParser.RULE_table);
    try {
      this.state = 2636;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
        case CqlParser.K_VECTOR:
          this.enterOuterAlt(localctx, 1);
          this.state = 2631;
          this.id();
          break;
        case CqlParser.DQUOTE:
          this.enterOuterAlt(localctx, 2);
          this.state = 2632;
          this.match(CqlParser.DQUOTE);
          this.state = 2633;
          this.id();
          this.state = 2634;
          this.match(CqlParser.DQUOTE);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  column() {
    let localctx = new ColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CqlParser.RULE_column);
    try {
      this.state = 2643;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_ADD:
        case CqlParser.K_ALL:
        case CqlParser.K_ALLOW:
        case CqlParser.K_ALTER:
        case CqlParser.K_AND:
        case CqlParser.K_ANY:
        case CqlParser.K_APPLY:
        case CqlParser.K_AS:
        case CqlParser.K_ASC:
        case CqlParser.K_AUTHORIZE:
        case CqlParser.K_BATCH:
        case CqlParser.K_BEGIN:
        case CqlParser.K_BY:
        case CqlParser.K_CALLED:
        case CqlParser.K_CLUSTERING:
        case CqlParser.K_COLUMNFAMILY:
        case CqlParser.K_COMPACT:
        case CqlParser.K_CONSISTENCY:
        case CqlParser.K_CONTAINS:
        case CqlParser.K_CREATE:
        case CqlParser.K_CUSTOM:
        case CqlParser.K_DELETE:
        case CqlParser.K_DESC:
        case CqlParser.K_DESCRIBE:
        case CqlParser.K_DISTINCT:
        case CqlParser.K_DROP:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_EACH_QUORUM:
        case CqlParser.K_ENTRIES:
        case CqlParser.K_EXECUTE:
        case CqlParser.K_EXISTS:
        case CqlParser.K_FALSE:
        case CqlParser.K_FILTERING:
        case CqlParser.K_FINALFUNC:
        case CqlParser.K_FROM:
        case CqlParser.K_FULL:
        case CqlParser.K_FUNCTION:
        case CqlParser.K_FUNCTIONS:
        case CqlParser.K_GRANT:
        case CqlParser.K_IF:
        case CqlParser.K_IN:
        case CqlParser.K_INDEX:
        case CqlParser.K_INFINITY:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_INSERT:
        case CqlParser.K_INTO:
        case CqlParser.K_IS:
        case CqlParser.K_JSON:
        case CqlParser.K_KEY:
        case CqlParser.K_KEYS:
        case CqlParser.K_KEYSPACE:
        case CqlParser.K_KEYSPACES:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_LIMIT:
        case CqlParser.K_LOCAL_ONE:
        case CqlParser.K_LOCAL_QUORUM:
        case CqlParser.K_LOGGED:
        case CqlParser.K_LOGIN:
        case CqlParser.K_MATERIALIZED:
        case CqlParser.K_MODIFY:
        case CqlParser.K_NAN:
        case CqlParser.K_NORECURSIVE:
        case CqlParser.K_NOSUPERUSER:
        case CqlParser.K_NOT:
        case CqlParser.K_NULL:
        case CqlParser.K_OF:
        case CqlParser.K_ON:
        case CqlParser.K_ONE:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_OR:
        case CqlParser.K_ORDER:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PASSWORD:
        case CqlParser.K_PER:
        case CqlParser.K_PERMISSION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_PRIMARY:
        case CqlParser.K_QUORUM:
        case CqlParser.K_RENAME:
        case CqlParser.K_REPLACE:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_RETURNS:
        case CqlParser.K_REVOKE:
        case CqlParser.K_ROLE:
        case CqlParser.K_ROLES:
        case CqlParser.K_SCHEMA:
        case CqlParser.K_SELECT:
        case CqlParser.K_SET:
        case CqlParser.K_SFUNC:
        case CqlParser.K_STATIC:
        case CqlParser.K_STORAGE:
        case CqlParser.K_STYPE:
        case CqlParser.K_SUPERUSER:
        case CqlParser.K_TABLE:
        case CqlParser.K_THREE:
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_TO:
        case CqlParser.K_TOKEN:
        case CqlParser.K_TRIGGER:
        case CqlParser.K_TRUE:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_TTL:
        case CqlParser.K_TWO:
        case CqlParser.K_TYPE:
        case CqlParser.K_UNLOGGED:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_USER:
        case CqlParser.K_USING:
        case CqlParser.K_UUID:
        case CqlParser.K_VALUES:
        case CqlParser.K_VIEW:
        case CqlParser.K_WHERE:
        case CqlParser.K_WITH:
        case CqlParser.K_WRITETIME:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_FROZEN:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_TUPLE:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
        case CqlParser.K_USERS:
        case CqlParser.K_VECTOR:
          this.enterOuterAlt(localctx, 1);
          this.state = 2638;
          this.id();
          break;
        case CqlParser.DQUOTE:
          this.enterOuterAlt(localctx, 2);
          this.state = 2639;
          this.match(CqlParser.DQUOTE);
          this.state = 2640;
          this.id();
          this.state = 2641;
          this.match(CqlParser.DQUOTE);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dataType() {
    let localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CqlParser.RULE_dataType);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2645;
      this.dataTypeName();
      this.state = 2647;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CqlParser.OPERATOR_LT) {
        this.state = 2646;
        this.dataTypeDefinition();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dataTypeName() {
    let localctx = new DataTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CqlParser.RULE_dataTypeName);
    try {
      this.state = 2683;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 264, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2652;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 263, this._ctx);
          if (la_ === 1) {
            this.state = 2649;
            this.keyspace();
            this.state = 2650;
            this.match(CqlParser.DOT);
          }
          this.state = 2654;
          this.type();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2655;
          this.match(CqlParser.STRING_LITERAL);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2656;
          this.match(CqlParser.K_TIMESTAMP);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2657;
          this.match(CqlParser.K_SET);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2658;
          this.match(CqlParser.K_ASCII);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 2659;
          this.match(CqlParser.K_BIGINT);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 2660;
          this.match(CqlParser.K_BLOB);
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 2661;
          this.match(CqlParser.K_BOOLEAN);
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 2662;
          this.match(CqlParser.K_COUNTER);
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 2663;
          this.match(CqlParser.K_DATE);
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 2664;
          this.match(CqlParser.K_DECIMAL);
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 2665;
          this.match(CqlParser.K_DOUBLE);
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 2666;
          this.match(CqlParser.K_FLOAT);
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 2667;
          this.match(CqlParser.K_FROZEN);
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 2668;
          this.match(CqlParser.K_INET);
          break;

        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 2669;
          this.match(CqlParser.K_INT);
          break;

        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 2670;
          this.match(CqlParser.K_LIST);
          break;

        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 2671;
          this.match(CqlParser.K_MAP);
          break;

        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 2672;
          this.match(CqlParser.K_SMALLINT);
          break;

        case 20:
          this.enterOuterAlt(localctx, 20);
          this.state = 2673;
          this.match(CqlParser.K_TEXT);
          break;

        case 21:
          this.enterOuterAlt(localctx, 21);
          this.state = 2674;
          this.match(CqlParser.K_TIME);
          break;

        case 22:
          this.enterOuterAlt(localctx, 22);
          this.state = 2675;
          this.match(CqlParser.K_TIMEUUID);
          break;

        case 23:
          this.enterOuterAlt(localctx, 23);
          this.state = 2676;
          this.match(CqlParser.K_TINYINT);
          break;

        case 24:
          this.enterOuterAlt(localctx, 24);
          this.state = 2677;
          this.match(CqlParser.K_TUPLE);
          break;

        case 25:
          this.enterOuterAlt(localctx, 25);
          this.state = 2678;
          this.match(CqlParser.K_VARCHAR);
          break;

        case 26:
          this.enterOuterAlt(localctx, 26);
          this.state = 2679;
          this.match(CqlParser.K_VARINT);
          break;

        case 27:
          this.enterOuterAlt(localctx, 27);
          this.state = 2680;
          this.match(CqlParser.K_TIMESTAMP);
          break;

        case 28:
          this.enterOuterAlt(localctx, 28);
          this.state = 2681;
          this.match(CqlParser.K_UUID);
          break;

        case 29:
          this.enterOuterAlt(localctx, 29);
          this.state = 2682;
          this.match(CqlParser.K_VECTOR);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dataTypeDefinition() {
    let localctx = new DataTypeDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CqlParser.RULE_dataTypeDefinition);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2685;
      this.syntaxBracketLa();
      this.state = 2686;
      this.dataType();
      this.state = 2694;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CqlParser.COMMA) {
        this.state = 2687;
        this.syntaxComma();
        this.state = 2690;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CqlParser.DQUOTE:
          case CqlParser.K_ADD:
          case CqlParser.K_ALL:
          case CqlParser.K_ALLOW:
          case CqlParser.K_ALTER:
          case CqlParser.K_AND:
          case CqlParser.K_ANY:
          case CqlParser.K_APPLY:
          case CqlParser.K_AS:
          case CqlParser.K_ASC:
          case CqlParser.K_AUTHORIZE:
          case CqlParser.K_BATCH:
          case CqlParser.K_BEGIN:
          case CqlParser.K_BY:
          case CqlParser.K_CALLED:
          case CqlParser.K_CLUSTERING:
          case CqlParser.K_COLUMNFAMILY:
          case CqlParser.K_COMPACT:
          case CqlParser.K_CONSISTENCY:
          case CqlParser.K_CONTAINS:
          case CqlParser.K_CREATE:
          case CqlParser.K_CUSTOM:
          case CqlParser.K_DELETE:
          case CqlParser.K_DESC:
          case CqlParser.K_DESCRIBE:
          case CqlParser.K_DISTINCT:
          case CqlParser.K_DROP:
          case CqlParser.K_DURABLE_WRITES:
          case CqlParser.K_EACH_QUORUM:
          case CqlParser.K_ENTRIES:
          case CqlParser.K_EXECUTE:
          case CqlParser.K_EXISTS:
          case CqlParser.K_FALSE:
          case CqlParser.K_FILTERING:
          case CqlParser.K_FINALFUNC:
          case CqlParser.K_FROM:
          case CqlParser.K_FULL:
          case CqlParser.K_FUNCTION:
          case CqlParser.K_FUNCTIONS:
          case CqlParser.K_GRANT:
          case CqlParser.K_IF:
          case CqlParser.K_IN:
          case CqlParser.K_INDEX:
          case CqlParser.K_INFINITY:
          case CqlParser.K_INITCOND:
          case CqlParser.K_INPUT:
          case CqlParser.K_INSERT:
          case CqlParser.K_INTO:
          case CqlParser.K_IS:
          case CqlParser.K_JSON:
          case CqlParser.K_KEY:
          case CqlParser.K_KEYS:
          case CqlParser.K_KEYSPACE:
          case CqlParser.K_KEYSPACES:
          case CqlParser.K_LANGUAGE:
          case CqlParser.K_LEVEL:
          case CqlParser.K_LIMIT:
          case CqlParser.K_LOCAL_ONE:
          case CqlParser.K_LOCAL_QUORUM:
          case CqlParser.K_LOGGED:
          case CqlParser.K_LOGIN:
          case CqlParser.K_MATERIALIZED:
          case CqlParser.K_MODIFY:
          case CqlParser.K_NAN:
          case CqlParser.K_NORECURSIVE:
          case CqlParser.K_NOSUPERUSER:
          case CqlParser.K_NOT:
          case CqlParser.K_NULL:
          case CqlParser.K_OF:
          case CqlParser.K_ON:
          case CqlParser.K_ONE:
          case CqlParser.K_OPTIONS:
          case CqlParser.K_OR:
          case CqlParser.K_ORDER:
          case CqlParser.K_PARTITION:
          case CqlParser.K_PASSWORD:
          case CqlParser.K_PER:
          case CqlParser.K_PERMISSION:
          case CqlParser.K_PERMISSIONS:
          case CqlParser.K_PRIMARY:
          case CqlParser.K_QUORUM:
          case CqlParser.K_RENAME:
          case CqlParser.K_REPLACE:
          case CqlParser.K_REPLICATION:
          case CqlParser.K_RETURNS:
          case CqlParser.K_REVOKE:
          case CqlParser.K_ROLE:
          case CqlParser.K_ROLES:
          case CqlParser.K_SCHEMA:
          case CqlParser.K_SELECT:
          case CqlParser.K_SET:
          case CqlParser.K_SFUNC:
          case CqlParser.K_STATIC:
          case CqlParser.K_STORAGE:
          case CqlParser.K_STYPE:
          case CqlParser.K_SUPERUSER:
          case CqlParser.K_TABLE:
          case CqlParser.K_THREE:
          case CqlParser.K_TIMESTAMP:
          case CqlParser.K_TO:
          case CqlParser.K_TOKEN:
          case CqlParser.K_TRIGGER:
          case CqlParser.K_TRUE:
          case CqlParser.K_TRUNCATE:
          case CqlParser.K_TTL:
          case CqlParser.K_TWO:
          case CqlParser.K_TYPE:
          case CqlParser.K_UNLOGGED:
          case CqlParser.K_UPDATE:
          case CqlParser.K_USE:
          case CqlParser.K_USER:
          case CqlParser.K_USING:
          case CqlParser.K_UUID:
          case CqlParser.K_VALUES:
          case CqlParser.K_VIEW:
          case CqlParser.K_WHERE:
          case CqlParser.K_WITH:
          case CqlParser.K_WRITETIME:
          case CqlParser.K_ASCII:
          case CqlParser.K_BIGINT:
          case CqlParser.K_BLOB:
          case CqlParser.K_BOOLEAN:
          case CqlParser.K_COUNTER:
          case CqlParser.K_DATE:
          case CqlParser.K_DECIMAL:
          case CqlParser.K_DOUBLE:
          case CqlParser.K_FLOAT:
          case CqlParser.K_FROZEN:
          case CqlParser.K_INET:
          case CqlParser.K_INT:
          case CqlParser.K_LIST:
          case CqlParser.K_MAP:
          case CqlParser.K_SMALLINT:
          case CqlParser.K_TEXT:
          case CqlParser.K_TIMEUUID:
          case CqlParser.K_TIME:
          case CqlParser.K_TINYINT:
          case CqlParser.K_TUPLE:
          case CqlParser.K_VARCHAR:
          case CqlParser.K_VARINT:
          case CqlParser.STRING_LITERAL:
          case CqlParser.OBJECT_NAME:
          case CqlParser.K_USERS:
          case CqlParser.K_VECTOR:
            this.state = 2688;
            this.dataType();
            break;
          case CqlParser.DECIMAL_LITERAL:
            this.state = 2689;
            this.decimalLiteral();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2696;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 2697;
      this.syntaxBracketRa();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  orderDirection() {
    let localctx = new OrderDirectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, CqlParser.RULE_orderDirection);
    try {
      this.state = 2701;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.K_ASC:
          this.enterOuterAlt(localctx, 1);
          this.state = 2699;
          this.kwAsc();
          break;
        case CqlParser.K_DESC:
          this.enterOuterAlt(localctx, 2);
          this.state = 2700;
          this.kwDesc();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  role() {
    let localctx = new RoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CqlParser.RULE_role);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2703;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  trigger() {
    let localctx = new TriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CqlParser.RULE_trigger);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2705;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  triggerClass() {
    let localctx = new TriggerClassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, CqlParser.RULE_triggerClass);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2707;
      this.stringLiteral();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  materializedView() {
    let localctx = new MaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CqlParser.RULE_materializedView);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2709;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  type() {
    let localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CqlParser.RULE_type);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2711;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  aggregate() {
    let localctx = new AggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, CqlParser.RULE_aggregate);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2713;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  functionStatement() {
    let localctx = new FunctionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, CqlParser.RULE_functionStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2715;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  language() {
    let localctx = new LanguageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, CqlParser.RULE_language);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2717;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  user() {
    let localctx = new UserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, CqlParser.RULE_user);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2719;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  password() {
    let localctx = new PasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CqlParser.RULE_password);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2721;
      this.stringLiteral();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  hashKey() {
    let localctx = new HashKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CqlParser.RULE_hashKey);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2723;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  param() {
    let localctx = new ParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, CqlParser.RULE_param);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2725;
      this.paramName();
      this.state = 2726;
      this.dataType();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  paramName() {
    let localctx = new ParamNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, CqlParser.RULE_paramName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2728;
      this.id();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAdd() {
    let localctx = new KwAddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CqlParser.RULE_kwAdd);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2730;
      this.match(CqlParser.K_ADD);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAggregate() {
    let localctx = new KwAggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CqlParser.RULE_kwAggregate);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2732;
      this.match(CqlParser.K_AGGREGATE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAll() {
    let localctx = new KwAllContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CqlParser.RULE_kwAll);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2734;
      this.match(CqlParser.K_ALL);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAllPermissions() {
    let localctx = new KwAllPermissionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CqlParser.RULE_kwAllPermissions);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2736;
      this.match(CqlParser.K_ALL);
      this.state = 2737;
      this.match(CqlParser.K_PERMISSIONS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAllow() {
    let localctx = new KwAllowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CqlParser.RULE_kwAllow);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2739;
      this.match(CqlParser.K_ALLOW);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAlter() {
    let localctx = new KwAlterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CqlParser.RULE_kwAlter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2741;
      this.match(CqlParser.K_ALTER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAnd() {
    let localctx = new KwAndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, CqlParser.RULE_kwAnd);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2743;
      this.match(CqlParser.K_AND);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwApply() {
    let localctx = new KwApplyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, CqlParser.RULE_kwApply);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2745;
      this.match(CqlParser.K_APPLY);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAs() {
    let localctx = new KwAsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, CqlParser.RULE_kwAs);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2747;
      this.match(CqlParser.K_AS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAsc() {
    let localctx = new KwAscContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, CqlParser.RULE_kwAsc);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2749;
      this.match(CqlParser.K_ASC);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAuthorize() {
    let localctx = new KwAuthorizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, CqlParser.RULE_kwAuthorize);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2751;
      this.match(CqlParser.K_AUTHORIZE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwBatch() {
    let localctx = new KwBatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, CqlParser.RULE_kwBatch);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2753;
      this.match(CqlParser.K_BATCH);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwBegin() {
    let localctx = new KwBeginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, CqlParser.RULE_kwBegin);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2755;
      this.match(CqlParser.K_BEGIN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwBy() {
    let localctx = new KwByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, CqlParser.RULE_kwBy);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2757;
      this.match(CqlParser.K_BY);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwCalled() {
    let localctx = new KwCalledContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, CqlParser.RULE_kwCalled);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2759;
      this.match(CqlParser.K_CALLED);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwClustering() {
    let localctx = new KwClusteringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, CqlParser.RULE_kwClustering);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2761;
      this.match(CqlParser.K_CLUSTERING);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwCompact() {
    let localctx = new KwCompactContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, CqlParser.RULE_kwCompact);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2763;
      this.match(CqlParser.K_COMPACT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwContains() {
    let localctx = new KwContainsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, CqlParser.RULE_kwContains);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2765;
      this.match(CqlParser.K_CONTAINS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwCreate() {
    let localctx = new KwCreateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, CqlParser.RULE_kwCreate);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2767;
      this.match(CqlParser.K_CREATE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwDelete() {
    let localctx = new KwDeleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, CqlParser.RULE_kwDelete);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2769;
      this.match(CqlParser.K_DELETE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwDesc() {
    let localctx = new KwDescContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, CqlParser.RULE_kwDesc);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2771;
      this.match(CqlParser.K_DESC);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwDescibe() {
    let localctx = new KwDescibeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, CqlParser.RULE_kwDescibe);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2773;
      this.match(CqlParser.K_DESCRIBE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwDistinct() {
    let localctx = new KwDistinctContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, CqlParser.RULE_kwDistinct);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2775;
      this.match(CqlParser.K_DISTINCT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwDrop() {
    let localctx = new KwDropContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, CqlParser.RULE_kwDrop);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2777;
      this.match(CqlParser.K_DROP);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwDurableWrites() {
    let localctx = new KwDurableWritesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, CqlParser.RULE_kwDurableWrites);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2779;
      this.match(CqlParser.K_DURABLE_WRITES);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwEntries() {
    let localctx = new KwEntriesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, CqlParser.RULE_kwEntries);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2781;
      this.match(CqlParser.K_ENTRIES);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwExecute() {
    let localctx = new KwExecuteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, CqlParser.RULE_kwExecute);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2783;
      this.match(CqlParser.K_EXECUTE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwExists() {
    let localctx = new KwExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, CqlParser.RULE_kwExists);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2785;
      this.match(CqlParser.K_EXISTS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwFiltering() {
    let localctx = new KwFilteringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, CqlParser.RULE_kwFiltering);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2787;
      this.match(CqlParser.K_FILTERING);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwFinalfunc() {
    let localctx = new KwFinalfuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, CqlParser.RULE_kwFinalfunc);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2789;
      this.match(CqlParser.K_FINALFUNC);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwFrom() {
    let localctx = new KwFromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, CqlParser.RULE_kwFrom);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2791;
      this.match(CqlParser.K_FROM);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwFull() {
    let localctx = new KwFullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, CqlParser.RULE_kwFull);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2793;
      this.match(CqlParser.K_FULL);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwFunction() {
    let localctx = new KwFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, CqlParser.RULE_kwFunction);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2795;
      this.match(CqlParser.K_FUNCTION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwFunctions() {
    let localctx = new KwFunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, CqlParser.RULE_kwFunctions);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2797;
      this.match(CqlParser.K_FUNCTIONS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwGrant() {
    let localctx = new KwGrantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, CqlParser.RULE_kwGrant);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2799;
      this.match(CqlParser.K_GRANT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwIf() {
    let localctx = new KwIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, CqlParser.RULE_kwIf);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2801;
      this.match(CqlParser.K_IF);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwIn() {
    let localctx = new KwInContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, CqlParser.RULE_kwIn);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2803;
      this.match(CqlParser.K_IN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwIndex() {
    let localctx = new KwIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, CqlParser.RULE_kwIndex);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2805;
      this.match(CqlParser.K_INDEX);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwCustom() {
    let localctx = new KwCustomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, CqlParser.RULE_kwCustom);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2807;
      this.match(CqlParser.K_CUSTOM);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSearch() {
    let localctx = new KwSearchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, CqlParser.RULE_kwSearch);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2809;
      this.match(CqlParser.K_SEARCH);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAscii() {
    let localctx = new KwAsciiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, CqlParser.RULE_kwAscii);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2811;
      this.match(CqlParser.K_ASCII);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwNormalize() {
    let localctx = new KwNormalizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, CqlParser.RULE_kwNormalize);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2813;
      this.match(CqlParser.K_NORMALIZE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAnalyzed() {
    let localctx = new KwAnalyzedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, CqlParser.RULE_kwAnalyzed);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2815;
      this.match(CqlParser.K_ANALYZED);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwIsLiteral() {
    let localctx = new KwIsLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, CqlParser.RULE_kwIsLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2817;
      this.match(CqlParser.K_IS_LITERAL);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwMaxCompactionFlushMemoryInMb() {
    let localctx = new KwMaxCompactionFlushMemoryInMbContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(
      localctx,
      458,
      CqlParser.RULE_kwMaxCompactionFlushMemoryInMb,
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2819;
      this.match(CqlParser.K_MAX_COMPACTION_FLUSH_MEMORY_IN_MB);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTokenizationEnableStemming() {
    let localctx = new KwTokenizationEnableStemmingContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 460, CqlParser.RULE_kwTokenizationEnableStemming);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2821;
      this.match(CqlParser.K_TOKENIZATION_ENABLE_STEMMING);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTokenizationSkipStopWords() {
    let localctx = new KwTokenizationSkipStopWordsContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 462, CqlParser.RULE_kwTokenizationSkipStopWords);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2823;
      this.match(CqlParser.K_TOKENIZATION_SKIP_STOP_WORDS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTokenizationLocale() {
    let localctx = new KwTokenizationLocaleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, CqlParser.RULE_kwTokenizationLocale);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2825;
      this.match(CqlParser.K_TOKENIZATION_LOCALE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTokenizationNormalizeLowercase() {
    let localctx = new KwTokenizationNormalizeLowercaseContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(
      localctx,
      466,
      CqlParser.RULE_kwTokenizationNormalizeLowercase,
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2827;
      this.match(CqlParser.K_TOKENIZATION_NORMALIZE_LOWERCASE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTokenizationNormalizeUppercase() {
    let localctx = new KwTokenizationNormalizeUppercaseContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(
      localctx,
      468,
      CqlParser.RULE_kwTokenizationNormalizeUppercase,
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2829;
      this.match(CqlParser.K_TOKENIZATION_NORMALIZE_UPPERCASE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwNormalizeLowercase() {
    let localctx = new KwNormalizeLowercaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, CqlParser.RULE_kwNormalizeLowercase);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2831;
      this.match(CqlParser.K_NORMALIZE_LOWERCASE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwNormalizeUppercase() {
    let localctx = new KwNormalizeUppercaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, CqlParser.RULE_kwNormalizeUppercase);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2833;
      this.match(CqlParser.K_NORMALIZE_UPPERCASE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwMode() {
    let localctx = new KwModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, CqlParser.RULE_kwMode);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2835;
      this.match(CqlParser.K_MODE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAnalyzerClass() {
    let localctx = new KwAnalyzerClassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, CqlParser.RULE_kwAnalyzerClass);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2837;
      this.match(CqlParser.K_ANALYZER_CLASS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwStorageAttachedIndex() {
    let localctx = new KwStorageAttachedIndexContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 478, CqlParser.RULE_kwStorageAttachedIndex);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2839;
      this.match(CqlParser.K_STORAGE_ATTACHED_INDEX);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSolrIndex() {
    let localctx = new KwSolrIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, CqlParser.RULE_kwSolrIndex);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2841;
      this.match(CqlParser.K_SOLR_INDEX);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSASIIndex() {
    let localctx = new KwSASIIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, CqlParser.RULE_kwSASIIndex);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2843;
      this.match(CqlParser.K_SASI_INDEX);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSpaceSavingNoJoin() {
    let localctx = new KwSpaceSavingNoJoinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, CqlParser.RULE_kwSpaceSavingNoJoin);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2845;
      this.match(CqlParser.K_SPACE_SAVING_NO_JOIN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSpaceSavingAll() {
    let localctx = new KwSpaceSavingAllContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, CqlParser.RULE_kwSpaceSavingAll);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2847;
      this.match(CqlParser.K_SPACE_SAVING_ALL);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSpaceSavingSlowTriePrecision() {
    let localctx = new KwSpaceSavingSlowTriePrecisionContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(
      localctx,
      488,
      CqlParser.RULE_kwSpaceSavingSlowTriePrecision,
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2849;
      this.match(CqlParser.K_SPACE_SAVING_SLOW_TRIE_PRECISION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSpaceSavingNoTextField() {
    let localctx = new KwSpaceSavingNoTextFieldContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 490, CqlParser.RULE_kwSpaceSavingNoTextField);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2851;
      this.match(CqlParser.K_SPACE_SAVING_NO_TEXT_FIELD);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwCopyField() {
    let localctx = new KwCopyFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, CqlParser.RULE_kwCopyField);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2853;
      this.match(CqlParser.K_COPY_FIELD);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwDocValues() {
    let localctx = new KwDocValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, CqlParser.RULE_kwDocValues);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2855;
      this.match(CqlParser.K_DOC_VALUES);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwExcluded() {
    let localctx = new KwExcludedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, CqlParser.RULE_kwExcluded);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2857;
      this.match(CqlParser.K_EXCLUDED);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwIndexed() {
    let localctx = new KwIndexedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, CqlParser.RULE_kwIndexed);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2859;
      this.match(CqlParser.K_INDEXED);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwLowerCase() {
    let localctx = new KwLowerCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, CqlParser.RULE_kwLowerCase);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2861;
      this.match(CqlParser.K_LOWERCASE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwColumns() {
    let localctx = new KwColumnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, CqlParser.RULE_kwColumns);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2863;
      this.match(CqlParser.K_COLUMNS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwProfiles() {
    let localctx = new KwProfilesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, CqlParser.RULE_kwProfiles);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2865;
      this.match(CqlParser.K_PROFILES);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwConfig() {
    let localctx = new KwConfigContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, CqlParser.RULE_kwConfig);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2867;
      this.match(CqlParser.K_CONFIG);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwAutoCommitTime() {
    let localctx = new KwAutoCommitTimeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, CqlParser.RULE_kwAutoCommitTime);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2869;
      this.match(CqlParser.K_AUTOCOMMIT_TIME);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwDefaultQueryField() {
    let localctx = new KwDefaultQueryFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, CqlParser.RULE_kwDefaultQueryField);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2871;
      this.match(CqlParser.K_DEFAULT_QUERY_FIELD);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwDirectoryFactory() {
    let localctx = new KwDirectoryFactoryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, CqlParser.RULE_kwDirectoryFactory);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2873;
      this.match(CqlParser.K_DIRECTORY_FACTORY);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwFilterCacheLowWaterMark() {
    let localctx = new KwFilterCacheLowWaterMarkContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 514, CqlParser.RULE_kwFilterCacheLowWaterMark);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2875;
      this.match(CqlParser.K_FILTER_CACHE_LOW_WATERMARK);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwFilterCacheHighWaterMark() {
    let localctx = new KwFilterCacheHighWaterMarkContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 516, CqlParser.RULE_kwFilterCacheHighWaterMark);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2877;
      this.match(CqlParser.K_FILTER_CACHE_HIGH_WATERMARK);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwDirectoryFactoryClass() {
    let localctx = new KwDirectoryFactoryClassContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 518, CqlParser.RULE_kwDirectoryFactoryClass);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2879;
      this.match(CqlParser.K_DIRECTORY_FACTORY_CLASS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwMergeMaxThreadCount() {
    let localctx = new KwMergeMaxThreadCountContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 520, CqlParser.RULE_kwMergeMaxThreadCount);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2881;
      this.match(CqlParser.K_MERGE_MAX_THREAD_COUNT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwMergeMaxMergeCount() {
    let localctx = new KwMergeMaxMergeCountContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, CqlParser.RULE_kwMergeMaxMergeCount);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2883;
      this.match(CqlParser.K_MERGE_MAX_MERGE_COUNT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwRamBufferSize() {
    let localctx = new KwRamBufferSizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, CqlParser.RULE_kwRamBufferSize);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2885;
      this.match(CqlParser.K_RAM_BUFFER_SIZE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwRealtime() {
    let localctx = new KwRealtimeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, CqlParser.RULE_kwRealtime);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2887;
      this.match(CqlParser.K_REALTIME);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwRecovery() {
    let localctx = new KwRecoveryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, CqlParser.RULE_kwRecovery);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2889;
      this.match(CqlParser.K_RECOVERY);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwReindex() {
    let localctx = new KwReindexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, CqlParser.RULE_kwReindex);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2891;
      this.match(CqlParser.K_REINDEX);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwLenient() {
    let localctx = new KwLenientContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, CqlParser.RULE_kwLenient);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2893;
      this.match(CqlParser.K_LENIENT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwStandard() {
    let localctx = new KwStandardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, CqlParser.RULE_kwStandard);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2895;
      this.match(CqlParser.K_STANDARD);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwEncrypted() {
    let localctx = new KwEncryptedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, CqlParser.RULE_kwEncrypted);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2897;
      this.match(CqlParser.K_ENCRYPTED);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwCaseSensitive() {
    let localctx = new KwCaseSensitiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, CqlParser.RULE_kwCaseSensitive);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2899;
      this.match(CqlParser.K_CASE_SENITIVE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwInitcond() {
    let localctx = new KwInitcondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, CqlParser.RULE_kwInitcond);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2901;
      this.match(CqlParser.K_INITCOND);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwInput() {
    let localctx = new KwInputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, CqlParser.RULE_kwInput);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2903;
      this.match(CqlParser.K_INPUT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwInsert() {
    let localctx = new KwInsertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, CqlParser.RULE_kwInsert);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2905;
      this.match(CqlParser.K_INSERT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwInto() {
    let localctx = new KwIntoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, CqlParser.RULE_kwInto);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2907;
      this.match(CqlParser.K_INTO);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwIs() {
    let localctx = new KwIsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, CqlParser.RULE_kwIs);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2909;
      this.match(CqlParser.K_IS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwJson() {
    let localctx = new KwJsonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, CqlParser.RULE_kwJson);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2911;
      this.match(CqlParser.K_JSON);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwKey() {
    let localctx = new KwKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, CqlParser.RULE_kwKey);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2913;
      this.match(CqlParser.K_KEY);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwKeys() {
    let localctx = new KwKeysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, CqlParser.RULE_kwKeys);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2915;
      this.match(CqlParser.K_KEYS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwKeyspace() {
    let localctx = new KwKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, CqlParser.RULE_kwKeyspace);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2917;
      this.match(CqlParser.K_KEYSPACE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwKeyspaces() {
    let localctx = new KwKeyspacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, CqlParser.RULE_kwKeyspaces);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2919;
      this.match(CqlParser.K_KEYSPACES);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwLanguage() {
    let localctx = new KwLanguageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, CqlParser.RULE_kwLanguage);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2921;
      this.match(CqlParser.K_LANGUAGE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwLimit() {
    let localctx = new KwLimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, CqlParser.RULE_kwLimit);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2923;
      this.match(CqlParser.K_LIMIT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwList() {
    let localctx = new KwListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, CqlParser.RULE_kwList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2925;
      this.match(CqlParser.K_LIST);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwLogged() {
    let localctx = new KwLoggedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, CqlParser.RULE_kwLogged);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2927;
      this.match(CqlParser.K_LOGGED);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwLogin() {
    let localctx = new KwLoginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, CqlParser.RULE_kwLogin);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2929;
      this.match(CqlParser.K_LOGIN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwMaterialized() {
    let localctx = new KwMaterializedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, CqlParser.RULE_kwMaterialized);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2931;
      this.match(CqlParser.K_MATERIALIZED);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwModify() {
    let localctx = new KwModifyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, CqlParser.RULE_kwModify);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2933;
      this.match(CqlParser.K_MODIFY);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwNosuperuser() {
    let localctx = new KwNosuperuserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 574, CqlParser.RULE_kwNosuperuser);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2935;
      this.match(CqlParser.K_NOSUPERUSER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwNorecursive() {
    let localctx = new KwNorecursiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, CqlParser.RULE_kwNorecursive);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2937;
      this.match(CqlParser.K_NORECURSIVE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwNot() {
    let localctx = new KwNotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, CqlParser.RULE_kwNot);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2939;
      this.match(CqlParser.K_NOT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwNull() {
    let localctx = new KwNullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 580, CqlParser.RULE_kwNull);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2941;
      this.match(CqlParser.K_NULL);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwOf() {
    let localctx = new KwOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 582, CqlParser.RULE_kwOf);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2943;
      this.match(CqlParser.K_OF);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwOn() {
    let localctx = new KwOnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 584, CqlParser.RULE_kwOn);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2945;
      this.match(CqlParser.K_ON);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwOptions() {
    let localctx = new KwOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 586, CqlParser.RULE_kwOptions);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2947;
      this.match(CqlParser.K_OPTIONS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwOr() {
    let localctx = new KwOrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 588, CqlParser.RULE_kwOr);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2949;
      this.match(CqlParser.K_OR);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwOrder() {
    let localctx = new KwOrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, CqlParser.RULE_kwOrder);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2951;
      this.match(CqlParser.K_ORDER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwPassword() {
    let localctx = new KwPasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, CqlParser.RULE_kwPassword);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2953;
      this.match(CqlParser.K_PASSWORD);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwPrimary() {
    let localctx = new KwPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, CqlParser.RULE_kwPrimary);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2955;
      this.match(CqlParser.K_PRIMARY);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwRename() {
    let localctx = new KwRenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, CqlParser.RULE_kwRename);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2957;
      this.match(CqlParser.K_RENAME);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwReplace() {
    let localctx = new KwReplaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, CqlParser.RULE_kwReplace);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2959;
      this.match(CqlParser.K_REPLACE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwReplication() {
    let localctx = new KwReplicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 600, CqlParser.RULE_kwReplication);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2961;
      this.match(CqlParser.K_REPLICATION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwReturns() {
    let localctx = new KwReturnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 602, CqlParser.RULE_kwReturns);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2963;
      this.match(CqlParser.K_RETURNS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwRole() {
    let localctx = new KwRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 604, CqlParser.RULE_kwRole);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2965;
      this.match(CqlParser.K_ROLE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwInternal() {
    let localctx = new KwInternalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, CqlParser.RULE_kwInternal);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2967;
      this.match(CqlParser.K_INTERNAL);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwLdap() {
    let localctx = new KwLdapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, CqlParser.RULE_kwLdap);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2969;
      this.match(CqlParser.K_LDAP);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwScheme() {
    let localctx = new KwSchemeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, CqlParser.RULE_kwScheme);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2971;
      this.match(CqlParser.K_SCHEME);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwRoles() {
    let localctx = new KwRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, CqlParser.RULE_kwRoles);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2973;
      this.match(CqlParser.K_ROLES);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSelect() {
    let localctx = new KwSelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, CqlParser.RULE_kwSelect);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2975;
      this.match(CqlParser.K_SELECT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSet() {
    let localctx = new KwSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, CqlParser.RULE_kwSet);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2977;
      this.match(CqlParser.K_SET);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSfunc() {
    let localctx = new KwSfuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, CqlParser.RULE_kwSfunc);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2979;
      this.match(CqlParser.K_SFUNC);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwStorage() {
    let localctx = new KwStorageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, CqlParser.RULE_kwStorage);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2981;
      this.match(CqlParser.K_STORAGE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwStype() {
    let localctx = new KwStypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 622, CqlParser.RULE_kwStype);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2983;
      this.match(CqlParser.K_STYPE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwSuperuser() {
    let localctx = new KwSuperuserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, CqlParser.RULE_kwSuperuser);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2985;
      this.match(CqlParser.K_SUPERUSER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTable() {
    let localctx = new KwTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, CqlParser.RULE_kwTable);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2987;
      this.match(CqlParser.K_TABLE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTimestamp() {
    let localctx = new KwTimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 628, CqlParser.RULE_kwTimestamp);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2989;
      this.match(CqlParser.K_TIMESTAMP);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTo() {
    let localctx = new KwToContext(this, this._ctx, this.state);
    this.enterRule(localctx, 630, CqlParser.RULE_kwTo);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2991;
      this.match(CqlParser.K_TO);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTrigger() {
    let localctx = new KwTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 632, CqlParser.RULE_kwTrigger);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2993;
      this.match(CqlParser.K_TRIGGER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTruncate() {
    let localctx = new KwTruncateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 634, CqlParser.RULE_kwTruncate);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2995;
      this.match(CqlParser.K_TRUNCATE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwTtl() {
    let localctx = new KwTtlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 636, CqlParser.RULE_kwTtl);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2997;
      this.match(CqlParser.K_TTL);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwType() {
    let localctx = new KwTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 638, CqlParser.RULE_kwType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2999;
      this.match(CqlParser.K_TYPE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwUnlogged() {
    let localctx = new KwUnloggedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 640, CqlParser.RULE_kwUnlogged);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3001;
      this.match(CqlParser.K_UNLOGGED);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwUpdate() {
    let localctx = new KwUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 642, CqlParser.RULE_kwUpdate);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3003;
      this.match(CqlParser.K_UPDATE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwUse() {
    let localctx = new KwUseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 644, CqlParser.RULE_kwUse);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3005;
      this.match(CqlParser.K_USE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwUser() {
    let localctx = new KwUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 646, CqlParser.RULE_kwUser);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3007;
      this.match(CqlParser.K_USER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwUsers() {
    let localctx = new KwUsersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 648, CqlParser.RULE_kwUsers);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3009;
      this.match(CqlParser.K_USERS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwUsing() {
    let localctx = new KwUsingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 650, CqlParser.RULE_kwUsing);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3011;
      this.match(CqlParser.K_USING);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwValues() {
    let localctx = new KwValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 652, CqlParser.RULE_kwValues);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3013;
      this.match(CqlParser.K_VALUES);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwView() {
    let localctx = new KwViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 654, CqlParser.RULE_kwView);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3015;
      this.match(CqlParser.K_VIEW);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwWhere() {
    let localctx = new KwWhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 656, CqlParser.RULE_kwWhere);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3017;
      this.match(CqlParser.K_WHERE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwWith() {
    let localctx = new KwWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 658, CqlParser.RULE_kwWith);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3019;
      this.match(CqlParser.K_WITH);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  kwRevoke() {
    let localctx = new KwRevokeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 660, CqlParser.RULE_kwRevoke);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3021;
      this.match(CqlParser.K_REVOKE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  eof() {
    let localctx = new EofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 662, CqlParser.RULE_eof);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3023;
      this.match(CqlParser.EOF);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  syntaxBracketLr() {
    let localctx = new SyntaxBracketLrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 664, CqlParser.RULE_syntaxBracketLr);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3025;
      this.match(CqlParser.LR_BRACKET);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  syntaxBracketRr() {
    let localctx = new SyntaxBracketRrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 666, CqlParser.RULE_syntaxBracketRr);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3027;
      this.match(CqlParser.RR_BRACKET);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  syntaxBracketLc() {
    let localctx = new SyntaxBracketLcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 668, CqlParser.RULE_syntaxBracketLc);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3029;
      this.match(CqlParser.LC_BRACKET);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  syntaxBracketRc() {
    let localctx = new SyntaxBracketRcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 670, CqlParser.RULE_syntaxBracketRc);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3031;
      this.match(CqlParser.RC_BRACKET);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  syntaxBracketLa() {
    let localctx = new SyntaxBracketLaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 672, CqlParser.RULE_syntaxBracketLa);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3033;
      this.match(CqlParser.OPERATOR_LT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  syntaxBracketRa() {
    let localctx = new SyntaxBracketRaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 674, CqlParser.RULE_syntaxBracketRa);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3035;
      this.match(CqlParser.OPERATOR_GT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  syntaxBracketLs() {
    let localctx = new SyntaxBracketLsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 676, CqlParser.RULE_syntaxBracketLs);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3037;
      this.match(CqlParser.LS_BRACKET);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  syntaxBracketRs() {
    let localctx = new SyntaxBracketRsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 678, CqlParser.RULE_syntaxBracketRs);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3039;
      this.match(CqlParser.RS_BRACKET);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  syntaxComma() {
    let localctx = new SyntaxCommaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 680, CqlParser.RULE_syntaxComma);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3041;
      this.match(CqlParser.COMMA);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  syntaxColon() {
    let localctx = new SyntaxColonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 682, CqlParser.RULE_syntaxColon);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3043;
      this.match(CqlParser.COLON);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  id() {
    let localctx = new IdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 684, CqlParser.RULE_id);
    try {
      this.state = 3188;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CqlParser.OBJECT_NAME:
          this.enterOuterAlt(localctx, 1);
          this.state = 3045;
          this.match(CqlParser.OBJECT_NAME);
          break;
        case CqlParser.K_ADD:
          this.enterOuterAlt(localctx, 2);
          this.state = 3046;
          this.match(CqlParser.K_ADD);
          this.state = 3047;
          this.match(CqlParser.K_AGGREGATE);
          break;
        case CqlParser.K_ALL:
          this.enterOuterAlt(localctx, 3);
          this.state = 3048;
          this.match(CqlParser.K_ALL);
          break;
        case CqlParser.K_ALLOW:
          this.enterOuterAlt(localctx, 4);
          this.state = 3049;
          this.match(CqlParser.K_ALLOW);
          break;
        case CqlParser.K_ALTER:
          this.enterOuterAlt(localctx, 5);
          this.state = 3050;
          this.match(CqlParser.K_ALTER);
          break;
        case CqlParser.K_AND:
          this.enterOuterAlt(localctx, 6);
          this.state = 3051;
          this.match(CqlParser.K_AND);
          break;
        case CqlParser.K_ANY:
          this.enterOuterAlt(localctx, 7);
          this.state = 3052;
          this.match(CqlParser.K_ANY);
          break;
        case CqlParser.K_APPLY:
          this.enterOuterAlt(localctx, 8);
          this.state = 3053;
          this.match(CqlParser.K_APPLY);
          break;
        case CqlParser.K_AS:
          this.enterOuterAlt(localctx, 9);
          this.state = 3054;
          this.match(CqlParser.K_AS);
          break;
        case CqlParser.K_ASC:
          this.enterOuterAlt(localctx, 10);
          this.state = 3055;
          this.match(CqlParser.K_ASC);
          break;
        case CqlParser.K_AUTHORIZE:
          this.enterOuterAlt(localctx, 11);
          this.state = 3056;
          this.match(CqlParser.K_AUTHORIZE);
          break;
        case CqlParser.K_BATCH:
          this.enterOuterAlt(localctx, 12);
          this.state = 3057;
          this.match(CqlParser.K_BATCH);
          break;
        case CqlParser.K_BEGIN:
          this.enterOuterAlt(localctx, 13);
          this.state = 3058;
          this.match(CqlParser.K_BEGIN);
          break;
        case CqlParser.K_BY:
          this.enterOuterAlt(localctx, 14);
          this.state = 3059;
          this.match(CqlParser.K_BY);
          break;
        case CqlParser.K_CALLED:
          this.enterOuterAlt(localctx, 15);
          this.state = 3060;
          this.match(CqlParser.K_CALLED);
          break;
        case CqlParser.K_CLUSTERING:
          this.enterOuterAlt(localctx, 16);
          this.state = 3061;
          this.match(CqlParser.K_CLUSTERING);
          break;
        case CqlParser.K_COLUMNFAMILY:
          this.enterOuterAlt(localctx, 17);
          this.state = 3062;
          this.match(CqlParser.K_COLUMNFAMILY);
          break;
        case CqlParser.K_COMPACT:
          this.enterOuterAlt(localctx, 18);
          this.state = 3063;
          this.match(CqlParser.K_COMPACT);
          break;
        case CqlParser.K_CONSISTENCY:
          this.enterOuterAlt(localctx, 19);
          this.state = 3064;
          this.match(CqlParser.K_CONSISTENCY);
          break;
        case CqlParser.K_CONTAINS:
          this.enterOuterAlt(localctx, 20);
          this.state = 3065;
          this.match(CqlParser.K_CONTAINS);
          break;
        case CqlParser.K_CREATE:
          this.enterOuterAlt(localctx, 21);
          this.state = 3066;
          this.match(CqlParser.K_CREATE);
          break;
        case CqlParser.K_CUSTOM:
          this.enterOuterAlt(localctx, 22);
          this.state = 3067;
          this.match(CqlParser.K_CUSTOM);
          break;
        case CqlParser.K_DELETE:
          this.enterOuterAlt(localctx, 23);
          this.state = 3068;
          this.match(CqlParser.K_DELETE);
          break;
        case CqlParser.K_DESC:
          this.enterOuterAlt(localctx, 24);
          this.state = 3069;
          this.match(CqlParser.K_DESC);
          break;
        case CqlParser.K_DESCRIBE:
          this.enterOuterAlt(localctx, 25);
          this.state = 3070;
          this.match(CqlParser.K_DESCRIBE);
          break;
        case CqlParser.K_DISTINCT:
          this.enterOuterAlt(localctx, 26);
          this.state = 3071;
          this.match(CqlParser.K_DISTINCT);
          break;
        case CqlParser.K_DROP:
          this.enterOuterAlt(localctx, 27);
          this.state = 3072;
          this.match(CqlParser.K_DROP);
          break;
        case CqlParser.K_DURABLE_WRITES:
          this.enterOuterAlt(localctx, 28);
          this.state = 3073;
          this.match(CqlParser.K_DURABLE_WRITES);
          break;
        case CqlParser.K_EACH_QUORUM:
          this.enterOuterAlt(localctx, 29);
          this.state = 3074;
          this.match(CqlParser.K_EACH_QUORUM);
          break;
        case CqlParser.K_ENTRIES:
          this.enterOuterAlt(localctx, 30);
          this.state = 3075;
          this.match(CqlParser.K_ENTRIES);
          break;
        case CqlParser.K_EXECUTE:
          this.enterOuterAlt(localctx, 31);
          this.state = 3076;
          this.match(CqlParser.K_EXECUTE);
          break;
        case CqlParser.K_EXISTS:
          this.enterOuterAlt(localctx, 32);
          this.state = 3077;
          this.match(CqlParser.K_EXISTS);
          break;
        case CqlParser.K_FALSE:
          this.enterOuterAlt(localctx, 33);
          this.state = 3078;
          this.match(CqlParser.K_FALSE);
          break;
        case CqlParser.K_FILTERING:
          this.enterOuterAlt(localctx, 34);
          this.state = 3079;
          this.match(CqlParser.K_FILTERING);
          break;
        case CqlParser.K_FINALFUNC:
          this.enterOuterAlt(localctx, 35);
          this.state = 3080;
          this.match(CqlParser.K_FINALFUNC);
          break;
        case CqlParser.K_FROM:
          this.enterOuterAlt(localctx, 36);
          this.state = 3081;
          this.match(CqlParser.K_FROM);
          break;
        case CqlParser.K_FULL:
          this.enterOuterAlt(localctx, 37);
          this.state = 3082;
          this.match(CqlParser.K_FULL);
          break;
        case CqlParser.K_FUNCTION:
          this.enterOuterAlt(localctx, 38);
          this.state = 3083;
          this.match(CqlParser.K_FUNCTION);
          break;
        case CqlParser.K_FUNCTIONS:
          this.enterOuterAlt(localctx, 39);
          this.state = 3084;
          this.match(CqlParser.K_FUNCTIONS);
          break;
        case CqlParser.K_GRANT:
          this.enterOuterAlt(localctx, 40);
          this.state = 3085;
          this.match(CqlParser.K_GRANT);
          break;
        case CqlParser.K_IF:
          this.enterOuterAlt(localctx, 41);
          this.state = 3086;
          this.match(CqlParser.K_IF);
          break;
        case CqlParser.K_IN:
          this.enterOuterAlt(localctx, 42);
          this.state = 3087;
          this.match(CqlParser.K_IN);
          break;
        case CqlParser.K_INDEX:
          this.enterOuterAlt(localctx, 43);
          this.state = 3088;
          this.match(CqlParser.K_INDEX);
          break;
        case CqlParser.K_INFINITY:
          this.enterOuterAlt(localctx, 44);
          this.state = 3089;
          this.match(CqlParser.K_INFINITY);
          break;
        case CqlParser.K_INITCOND:
          this.enterOuterAlt(localctx, 45);
          this.state = 3090;
          this.match(CqlParser.K_INITCOND);
          break;
        case CqlParser.K_INPUT:
          this.enterOuterAlt(localctx, 46);
          this.state = 3091;
          this.match(CqlParser.K_INPUT);
          break;
        case CqlParser.K_INSERT:
          this.enterOuterAlt(localctx, 47);
          this.state = 3092;
          this.match(CqlParser.K_INSERT);
          break;
        case CqlParser.K_INTO:
          this.enterOuterAlt(localctx, 48);
          this.state = 3093;
          this.match(CqlParser.K_INTO);
          break;
        case CqlParser.K_IS:
          this.enterOuterAlt(localctx, 49);
          this.state = 3094;
          this.match(CqlParser.K_IS);
          break;
        case CqlParser.K_JSON:
          this.enterOuterAlt(localctx, 50);
          this.state = 3095;
          this.match(CqlParser.K_JSON);
          break;
        case CqlParser.K_KEY:
          this.enterOuterAlt(localctx, 51);
          this.state = 3096;
          this.match(CqlParser.K_KEY);
          break;
        case CqlParser.K_KEYS:
          this.enterOuterAlt(localctx, 52);
          this.state = 3097;
          this.match(CqlParser.K_KEYS);
          break;
        case CqlParser.K_KEYSPACE:
          this.enterOuterAlt(localctx, 53);
          this.state = 3098;
          this.match(CqlParser.K_KEYSPACE);
          break;
        case CqlParser.K_KEYSPACES:
          this.enterOuterAlt(localctx, 54);
          this.state = 3099;
          this.match(CqlParser.K_KEYSPACES);
          break;
        case CqlParser.K_LANGUAGE:
          this.enterOuterAlt(localctx, 55);
          this.state = 3100;
          this.match(CqlParser.K_LANGUAGE);
          break;
        case CqlParser.K_LEVEL:
          this.enterOuterAlt(localctx, 56);
          this.state = 3101;
          this.match(CqlParser.K_LEVEL);
          break;
        case CqlParser.K_LIMIT:
          this.enterOuterAlt(localctx, 57);
          this.state = 3102;
          this.match(CqlParser.K_LIMIT);
          break;
        case CqlParser.K_LOCAL_ONE:
          this.enterOuterAlt(localctx, 58);
          this.state = 3103;
          this.match(CqlParser.K_LOCAL_ONE);
          break;
        case CqlParser.K_LOCAL_QUORUM:
          this.enterOuterAlt(localctx, 59);
          this.state = 3104;
          this.match(CqlParser.K_LOCAL_QUORUM);
          break;
        case CqlParser.K_LOGGED:
          this.enterOuterAlt(localctx, 60);
          this.state = 3105;
          this.match(CqlParser.K_LOGGED);
          break;
        case CqlParser.K_LOGIN:
          this.enterOuterAlt(localctx, 61);
          this.state = 3106;
          this.match(CqlParser.K_LOGIN);
          break;
        case CqlParser.K_MATERIALIZED:
          this.enterOuterAlt(localctx, 62);
          this.state = 3107;
          this.match(CqlParser.K_MATERIALIZED);
          break;
        case CqlParser.K_MODIFY:
          this.enterOuterAlt(localctx, 63);
          this.state = 3108;
          this.match(CqlParser.K_MODIFY);
          break;
        case CqlParser.K_NAN:
          this.enterOuterAlt(localctx, 64);
          this.state = 3109;
          this.match(CqlParser.K_NAN);
          break;
        case CqlParser.K_NORECURSIVE:
          this.enterOuterAlt(localctx, 65);
          this.state = 3110;
          this.match(CqlParser.K_NORECURSIVE);
          break;
        case CqlParser.K_NOSUPERUSER:
          this.enterOuterAlt(localctx, 66);
          this.state = 3111;
          this.match(CqlParser.K_NOSUPERUSER);
          break;
        case CqlParser.K_NOT:
          this.enterOuterAlt(localctx, 67);
          this.state = 3112;
          this.match(CqlParser.K_NOT);
          break;
        case CqlParser.K_NULL:
          this.enterOuterAlt(localctx, 68);
          this.state = 3113;
          this.match(CqlParser.K_NULL);
          break;
        case CqlParser.K_OF:
          this.enterOuterAlt(localctx, 69);
          this.state = 3114;
          this.match(CqlParser.K_OF);
          break;
        case CqlParser.K_ON:
          this.enterOuterAlt(localctx, 70);
          this.state = 3115;
          this.match(CqlParser.K_ON);
          break;
        case CqlParser.K_ONE:
          this.enterOuterAlt(localctx, 71);
          this.state = 3116;
          this.match(CqlParser.K_ONE);
          break;
        case CqlParser.K_OPTIONS:
          this.enterOuterAlt(localctx, 72);
          this.state = 3117;
          this.match(CqlParser.K_OPTIONS);
          break;
        case CqlParser.K_OR:
          this.enterOuterAlt(localctx, 73);
          this.state = 3118;
          this.match(CqlParser.K_OR);
          break;
        case CqlParser.K_ORDER:
          this.enterOuterAlt(localctx, 74);
          this.state = 3119;
          this.match(CqlParser.K_ORDER);
          break;
        case CqlParser.K_PARTITION:
          this.enterOuterAlt(localctx, 75);
          this.state = 3120;
          this.match(CqlParser.K_PARTITION);
          break;
        case CqlParser.K_PASSWORD:
          this.enterOuterAlt(localctx, 76);
          this.state = 3121;
          this.match(CqlParser.K_PASSWORD);
          break;
        case CqlParser.K_PER:
          this.enterOuterAlt(localctx, 77);
          this.state = 3122;
          this.match(CqlParser.K_PER);
          break;
        case CqlParser.K_PERMISSION:
          this.enterOuterAlt(localctx, 78);
          this.state = 3123;
          this.match(CqlParser.K_PERMISSION);
          break;
        case CqlParser.K_PERMISSIONS:
          this.enterOuterAlt(localctx, 79);
          this.state = 3124;
          this.match(CqlParser.K_PERMISSIONS);
          break;
        case CqlParser.K_PRIMARY:
          this.enterOuterAlt(localctx, 80);
          this.state = 3125;
          this.match(CqlParser.K_PRIMARY);
          break;
        case CqlParser.K_QUORUM:
          this.enterOuterAlt(localctx, 81);
          this.state = 3126;
          this.match(CqlParser.K_QUORUM);
          break;
        case CqlParser.K_RENAME:
          this.enterOuterAlt(localctx, 82);
          this.state = 3127;
          this.match(CqlParser.K_RENAME);
          break;
        case CqlParser.K_REPLACE:
          this.enterOuterAlt(localctx, 83);
          this.state = 3128;
          this.match(CqlParser.K_REPLACE);
          break;
        case CqlParser.K_REPLICATION:
          this.enterOuterAlt(localctx, 84);
          this.state = 3129;
          this.match(CqlParser.K_REPLICATION);
          break;
        case CqlParser.K_RETURNS:
          this.enterOuterAlt(localctx, 85);
          this.state = 3130;
          this.match(CqlParser.K_RETURNS);
          break;
        case CqlParser.K_REVOKE:
          this.enterOuterAlt(localctx, 86);
          this.state = 3131;
          this.match(CqlParser.K_REVOKE);
          break;
        case CqlParser.K_ROLE:
          this.enterOuterAlt(localctx, 87);
          this.state = 3132;
          this.match(CqlParser.K_ROLE);
          break;
        case CqlParser.K_ROLES:
          this.enterOuterAlt(localctx, 88);
          this.state = 3133;
          this.match(CqlParser.K_ROLES);
          break;
        case CqlParser.K_SCHEMA:
          this.enterOuterAlt(localctx, 89);
          this.state = 3134;
          this.match(CqlParser.K_SCHEMA);
          break;
        case CqlParser.K_SELECT:
          this.enterOuterAlt(localctx, 90);
          this.state = 3135;
          this.match(CqlParser.K_SELECT);
          break;
        case CqlParser.K_SET:
          this.enterOuterAlt(localctx, 91);
          this.state = 3136;
          this.match(CqlParser.K_SET);
          break;
        case CqlParser.K_SFUNC:
          this.enterOuterAlt(localctx, 92);
          this.state = 3137;
          this.match(CqlParser.K_SFUNC);
          break;
        case CqlParser.K_STATIC:
          this.enterOuterAlt(localctx, 93);
          this.state = 3138;
          this.match(CqlParser.K_STATIC);
          break;
        case CqlParser.K_STORAGE:
          this.enterOuterAlt(localctx, 94);
          this.state = 3139;
          this.match(CqlParser.K_STORAGE);
          break;
        case CqlParser.K_STYPE:
          this.enterOuterAlt(localctx, 95);
          this.state = 3140;
          this.match(CqlParser.K_STYPE);
          break;
        case CqlParser.K_SUPERUSER:
          this.enterOuterAlt(localctx, 96);
          this.state = 3141;
          this.match(CqlParser.K_SUPERUSER);
          break;
        case CqlParser.K_TABLE:
          this.enterOuterAlt(localctx, 97);
          this.state = 3142;
          this.match(CqlParser.K_TABLE);
          break;
        case CqlParser.K_THREE:
          this.enterOuterAlt(localctx, 98);
          this.state = 3143;
          this.match(CqlParser.K_THREE);
          break;
        case CqlParser.K_TIMESTAMP:
          this.enterOuterAlt(localctx, 99);
          this.state = 3144;
          this.match(CqlParser.K_TIMESTAMP);
          break;
        case CqlParser.K_TO:
          this.enterOuterAlt(localctx, 100);
          this.state = 3145;
          this.match(CqlParser.K_TO);
          break;
        case CqlParser.K_TOKEN:
          this.enterOuterAlt(localctx, 101);
          this.state = 3146;
          this.match(CqlParser.K_TOKEN);
          break;
        case CqlParser.K_TRIGGER:
          this.enterOuterAlt(localctx, 102);
          this.state = 3147;
          this.match(CqlParser.K_TRIGGER);
          break;
        case CqlParser.K_TRUE:
          this.enterOuterAlt(localctx, 103);
          this.state = 3148;
          this.match(CqlParser.K_TRUE);
          break;
        case CqlParser.K_TRUNCATE:
          this.enterOuterAlt(localctx, 104);
          this.state = 3149;
          this.match(CqlParser.K_TRUNCATE);
          break;
        case CqlParser.K_TTL:
          this.enterOuterAlt(localctx, 105);
          this.state = 3150;
          this.match(CqlParser.K_TTL);
          break;
        case CqlParser.K_TWO:
          this.enterOuterAlt(localctx, 106);
          this.state = 3151;
          this.match(CqlParser.K_TWO);
          break;
        case CqlParser.K_TYPE:
          this.enterOuterAlt(localctx, 107);
          this.state = 3152;
          this.match(CqlParser.K_TYPE);
          break;
        case CqlParser.K_UNLOGGED:
          this.enterOuterAlt(localctx, 108);
          this.state = 3153;
          this.match(CqlParser.K_UNLOGGED);
          break;
        case CqlParser.K_UPDATE:
          this.enterOuterAlt(localctx, 109);
          this.state = 3154;
          this.match(CqlParser.K_UPDATE);
          break;
        case CqlParser.K_USE:
          this.enterOuterAlt(localctx, 110);
          this.state = 3155;
          this.match(CqlParser.K_USE);
          break;
        case CqlParser.K_USER:
          this.enterOuterAlt(localctx, 111);
          this.state = 3156;
          this.match(CqlParser.K_USER);
          break;
        case CqlParser.K_USING:
          this.enterOuterAlt(localctx, 112);
          this.state = 3157;
          this.match(CqlParser.K_USING);
          break;
        case CqlParser.K_UUID:
          this.enterOuterAlt(localctx, 113);
          this.state = 3158;
          this.match(CqlParser.K_UUID);
          break;
        case CqlParser.K_VALUES:
          this.enterOuterAlt(localctx, 114);
          this.state = 3159;
          this.match(CqlParser.K_VALUES);
          break;
        case CqlParser.K_VIEW:
          this.enterOuterAlt(localctx, 115);
          this.state = 3160;
          this.match(CqlParser.K_VIEW);
          break;
        case CqlParser.K_WHERE:
          this.enterOuterAlt(localctx, 116);
          this.state = 3161;
          this.match(CqlParser.K_WHERE);
          break;
        case CqlParser.K_WITH:
          this.enterOuterAlt(localctx, 117);
          this.state = 3162;
          this.match(CqlParser.K_WITH);
          break;
        case CqlParser.K_WRITETIME:
          this.enterOuterAlt(localctx, 118);
          this.state = 3163;
          this.match(CqlParser.K_WRITETIME);
          break;
        case CqlParser.K_ASCII:
          this.enterOuterAlt(localctx, 119);
          this.state = 3164;
          this.match(CqlParser.K_ASCII);
          break;
        case CqlParser.K_BIGINT:
          this.enterOuterAlt(localctx, 120);
          this.state = 3165;
          this.match(CqlParser.K_BIGINT);
          break;
        case CqlParser.K_BLOB:
          this.enterOuterAlt(localctx, 121);
          this.state = 3166;
          this.match(CqlParser.K_BLOB);
          break;
        case CqlParser.K_BOOLEAN:
          this.enterOuterAlt(localctx, 122);
          this.state = 3167;
          this.match(CqlParser.K_BOOLEAN);
          break;
        case CqlParser.K_COUNTER:
          this.enterOuterAlt(localctx, 123);
          this.state = 3168;
          this.match(CqlParser.K_COUNTER);
          break;
        case CqlParser.K_DATE:
          this.enterOuterAlt(localctx, 124);
          this.state = 3169;
          this.match(CqlParser.K_DATE);
          break;
        case CqlParser.K_DECIMAL:
          this.enterOuterAlt(localctx, 125);
          this.state = 3170;
          this.match(CqlParser.K_DECIMAL);
          break;
        case CqlParser.K_DOUBLE:
          this.enterOuterAlt(localctx, 126);
          this.state = 3171;
          this.match(CqlParser.K_DOUBLE);
          break;
        case CqlParser.K_FLOAT:
          this.enterOuterAlt(localctx, 127);
          this.state = 3172;
          this.match(CqlParser.K_FLOAT);
          break;
        case CqlParser.K_FROZEN:
          this.enterOuterAlt(localctx, 128);
          this.state = 3173;
          this.match(CqlParser.K_FROZEN);
          break;
        case CqlParser.K_INET:
          this.enterOuterAlt(localctx, 129);
          this.state = 3174;
          this.match(CqlParser.K_INET);
          break;
        case CqlParser.K_INT:
          this.enterOuterAlt(localctx, 130);
          this.state = 3175;
          this.match(CqlParser.K_INT);
          break;
        case CqlParser.K_LIST:
          this.enterOuterAlt(localctx, 131);
          this.state = 3176;
          this.match(CqlParser.K_LIST);
          break;
        case CqlParser.K_MAP:
          this.enterOuterAlt(localctx, 132);
          this.state = 3177;
          this.match(CqlParser.K_MAP);
          break;
        case CqlParser.K_SMALLINT:
          this.enterOuterAlt(localctx, 133);
          this.state = 3178;
          this.match(CqlParser.K_SMALLINT);
          break;
        case CqlParser.K_TEXT:
          this.enterOuterAlt(localctx, 134);
          this.state = 3179;
          this.match(CqlParser.K_TEXT);
          break;
        case CqlParser.K_TIMEUUID:
          this.enterOuterAlt(localctx, 135);
          this.state = 3180;
          this.match(CqlParser.K_TIMEUUID);
          break;
        case CqlParser.K_TIME:
          this.enterOuterAlt(localctx, 136);
          this.state = 3181;
          this.match(CqlParser.K_TIME);
          break;
        case CqlParser.K_TINYINT:
          this.enterOuterAlt(localctx, 137);
          this.state = 3182;
          this.match(CqlParser.K_TINYINT);
          break;
        case CqlParser.K_TUPLE:
          this.enterOuterAlt(localctx, 138);
          this.state = 3183;
          this.match(CqlParser.K_TUPLE);
          break;
        case CqlParser.K_VARCHAR:
          this.enterOuterAlt(localctx, 139);
          this.state = 3184;
          this.match(CqlParser.K_VARCHAR);
          break;
        case CqlParser.K_VARINT:
          this.enterOuterAlt(localctx, 140);
          this.state = 3185;
          this.match(CqlParser.K_VARINT);
          break;
        case CqlParser.K_USERS:
          this.enterOuterAlt(localctx, 141);
          this.state = 3186;
          this.match(CqlParser.K_USERS);
          break;
        case CqlParser.K_VECTOR:
          this.enterOuterAlt(localctx, 142);
          this.state = 3187;
          this.match(CqlParser.K_VECTOR);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
}

CqlParser.EOF = antlr4.Token.EOF;
CqlParser.LR_BRACKET = 1;
CqlParser.RR_BRACKET = 2;
CqlParser.LC_BRACKET = 3;
CqlParser.RC_BRACKET = 4;
CqlParser.LS_BRACKET = 5;
CqlParser.RS_BRACKET = 6;
CqlParser.COMMA = 7;
CqlParser.SEMI = 8;
CqlParser.COLON = 9;
CqlParser.SPACE = 10;
CqlParser.SPEC_MYSQL_COMMENT = 11;
CqlParser.COMMENT_INPUT = 12;
CqlParser.LINE_COMMENT = 13;
CqlParser.DOT = 14;
CqlParser.STAR = 15;
CqlParser.DIVIDE = 16;
CqlParser.MODULE = 17;
CqlParser.PLUS = 18;
CqlParser.MINUSMINUS = 19;
CqlParser.MINUS = 20;
CqlParser.DQUOTE = 21;
CqlParser.SQUOTE = 22;
CqlParser.K_ADD = 23;
CqlParser.K_AGGREGATE = 24;
CqlParser.K_ALL = 25;
CqlParser.K_ALLOW = 26;
CqlParser.K_ALTER = 27;
CqlParser.K_AND = 28;
CqlParser.K_ANY = 29;
CqlParser.K_APPLY = 30;
CqlParser.K_AS = 31;
CqlParser.K_ASC = 32;
CqlParser.K_AUTHORIZE = 33;
CqlParser.K_BATCH = 34;
CqlParser.K_BEGIN = 35;
CqlParser.K_BY = 36;
CqlParser.K_CALLED = 37;
CqlParser.K_CLUSTERING = 38;
CqlParser.K_COLUMNFAMILY = 39;
CqlParser.K_COMPACT = 40;
CqlParser.K_CONSISTENCY = 41;
CqlParser.K_CONTAINS = 42;
CqlParser.K_CREATE = 43;
CqlParser.K_CUSTOM = 44;
CqlParser.K_SEARCH = 45;
CqlParser.K_DELETE = 46;
CqlParser.K_DESC = 47;
CqlParser.K_DESCRIBE = 48;
CqlParser.K_DISTINCT = 49;
CqlParser.K_DROP = 50;
CqlParser.K_DURABLE_WRITES = 51;
CqlParser.K_EACH_QUORUM = 52;
CqlParser.K_ENTRIES = 53;
CqlParser.K_EXECUTE = 54;
CqlParser.K_EXISTS = 55;
CqlParser.K_FALSE = 56;
CqlParser.K_FILTERING = 57;
CqlParser.K_FINALFUNC = 58;
CqlParser.K_FROM = 59;
CqlParser.K_FULL = 60;
CqlParser.K_FUNCTION = 61;
CqlParser.K_FUNCTIONS = 62;
CqlParser.K_GRANT = 63;
CqlParser.K_IF = 64;
CqlParser.K_IN = 65;
CqlParser.K_INDEX = 66;
CqlParser.K_INFINITY = 67;
CqlParser.K_INITCOND = 68;
CqlParser.K_INPUT = 69;
CqlParser.K_INSERT = 70;
CqlParser.K_INTO = 71;
CqlParser.K_IS = 72;
CqlParser.K_JSON = 73;
CqlParser.K_KEY = 74;
CqlParser.K_KEYS = 75;
CqlParser.K_KEYSPACE = 76;
CqlParser.K_KEYSPACES = 77;
CqlParser.K_LANGUAGE = 78;
CqlParser.K_LEVEL = 79;
CqlParser.K_LIMIT = 80;
CqlParser.K_LOCAL_ONE = 81;
CqlParser.K_LOCAL_QUORUM = 82;
CqlParser.K_LOGGED = 83;
CqlParser.K_LOGIN = 84;
CqlParser.K_MATERIALIZED = 85;
CqlParser.K_MODIFY = 86;
CqlParser.K_NAN = 87;
CqlParser.K_NORECURSIVE = 88;
CqlParser.K_NOSUPERUSER = 89;
CqlParser.K_NOT = 90;
CqlParser.K_NULL = 91;
CqlParser.K_OF = 92;
CqlParser.K_ON = 93;
CqlParser.K_ONE = 94;
CqlParser.K_OPTIONS = 95;
CqlParser.K_OR = 96;
CqlParser.K_ORDER = 97;
CqlParser.K_PARTITION = 98;
CqlParser.K_PASSWORD = 99;
CqlParser.K_PER = 100;
CqlParser.K_PERMISSION = 101;
CqlParser.K_PERMISSIONS = 102;
CqlParser.K_PRIMARY = 103;
CqlParser.K_QUORUM = 104;
CqlParser.K_RENAME = 105;
CqlParser.K_REPLACE = 106;
CqlParser.K_REPLICATION = 107;
CqlParser.K_RETURNS = 108;
CqlParser.K_REVOKE = 109;
CqlParser.K_ROLE = 110;
CqlParser.K_ROLES = 111;
CqlParser.K_INTERNAL = 112;
CqlParser.K_LDAP = 113;
CqlParser.K_SCHEME = 114;
CqlParser.K_SCHEMA = 115;
CqlParser.K_SELECT = 116;
CqlParser.K_SET = 117;
CqlParser.K_SFUNC = 118;
CqlParser.K_STATIC = 119;
CqlParser.K_STORAGE = 120;
CqlParser.K_STYPE = 121;
CqlParser.K_SUPERUSER = 122;
CqlParser.K_TABLE = 123;
CqlParser.K_THREE = 124;
CqlParser.K_TIMESTAMP = 125;
CqlParser.K_TO = 126;
CqlParser.K_TOKEN = 127;
CqlParser.K_TRIGGER = 128;
CqlParser.K_TRUE = 129;
CqlParser.K_TRUNCATE = 130;
CqlParser.K_TTL = 131;
CqlParser.K_TWO = 132;
CqlParser.K_TYPE = 133;
CqlParser.K_UNLOGGED = 134;
CqlParser.K_UPDATE = 135;
CqlParser.K_USE = 136;
CqlParser.K_USER = 137;
CqlParser.K_USING = 138;
CqlParser.K_UUID = 139;
CqlParser.K_VALUES = 140;
CqlParser.K_VIEW = 141;
CqlParser.K_WHERE = 142;
CqlParser.K_WITH = 143;
CqlParser.K_WRITETIME = 144;
CqlParser.K_ASCII = 145;
CqlParser.K_CASE_SENITIVE = 146;
CqlParser.K_NORMALIZE = 147;
CqlParser.K_ANALYZED = 148;
CqlParser.K_IS_LITERAL = 149;
CqlParser.K_MAX_COMPACTION_FLUSH_MEMORY_IN_MB = 150;
CqlParser.K_TOKENIZATION_ENABLE_STEMMING = 151;
CqlParser.K_TOKENIZATION_SKIP_STOP_WORDS = 152;
CqlParser.K_TOKENIZATION_LOCALE = 153;
CqlParser.K_TOKENIZATION_NORMALIZE_LOWERCASE = 154;
CqlParser.K_TOKENIZATION_NORMALIZE_UPPERCASE = 155;
CqlParser.K_NORMALIZE_LOWERCASE = 156;
CqlParser.K_NORMALIZE_UPPERCASE = 157;
CqlParser.K_MODE = 158;
CqlParser.K_ANALYZER_CLASS = 159;
CqlParser.K_STORAGE_ATTACHED_INDEX = 160;
CqlParser.K_SASI_INDEX = 161;
CqlParser.K_SOLR_INDEX = 162;
CqlParser.K_SPACE_SAVING_NO_JOIN = 163;
CqlParser.K_SPACE_SAVING_ALL = 164;
CqlParser.K_SPACE_SAVING_SLOW_TRIE_PRECISION = 165;
CqlParser.K_SPACE_SAVING_NO_TEXT_FIELD = 166;
CqlParser.K_DOC_VALUES = 167;
CqlParser.K_COPY_FIELD = 168;
CqlParser.K_EXCLUDED = 169;
CqlParser.K_INDEXED = 170;
CqlParser.K_LOWERCASE = 171;
CqlParser.K_COLUMNS = 172;
CqlParser.K_PROFILES = 173;
CqlParser.K_CONFIG = 174;
CqlParser.K_AUTOCOMMIT_TIME = 175;
CqlParser.K_DEFAULT_QUERY_FIELD = 176;
CqlParser.K_DIRECTORY_FACTORY = 177;
CqlParser.K_FILTER_CACHE_LOW_WATERMARK = 178;
CqlParser.K_FILTER_CACHE_HIGH_WATERMARK = 179;
CqlParser.K_DIRECTORY_FACTORY_CLASS = 180;
CqlParser.K_MERGE_MAX_THREAD_COUNT = 181;
CqlParser.K_MERGE_MAX_MERGE_COUNT = 182;
CqlParser.K_RAM_BUFFER_SIZE = 183;
CqlParser.K_REALTIME = 184;
CqlParser.K_RECOVERY = 185;
CqlParser.K_REINDEX = 186;
CqlParser.K_LENIENT = 187;
CqlParser.K_STANDARD = 188;
CqlParser.K_ENCRYPTED = 189;
CqlParser.K_BIGINT = 190;
CqlParser.K_BLOB = 191;
CqlParser.K_BOOLEAN = 192;
CqlParser.K_COUNTER = 193;
CqlParser.K_DATE = 194;
CqlParser.K_DECIMAL = 195;
CqlParser.K_DOUBLE = 196;
CqlParser.K_FLOAT = 197;
CqlParser.K_FROZEN = 198;
CqlParser.K_INET = 199;
CqlParser.K_INT = 200;
CqlParser.K_LIST = 201;
CqlParser.K_MAP = 202;
CqlParser.K_SMALLINT = 203;
CqlParser.K_TEXT = 204;
CqlParser.K_TIMEUUID = 205;
CqlParser.K_TIME = 206;
CqlParser.K_TINYINT = 207;
CqlParser.K_TUPLE = 208;
CqlParser.K_VARCHAR = 209;
CqlParser.K_VARINT = 210;
CqlParser.CODE_BLOCK = 211;
CqlParser.STRING_LITERAL = 212;
CqlParser.DECIMAL_LITERAL = 213;
CqlParser.FLOAT_LITERAL = 214;
CqlParser.HEXADECIMAL_LITERAL = 215;
CqlParser.REAL_LITERAL = 216;
CqlParser.OBJECT_NAME = 217;
CqlParser.UUID = 218;
CqlParser.OPERATOR_EQ = 219;
CqlParser.OPERATOR_LT = 220;
CqlParser.OPERATOR_GT = 221;
CqlParser.OPERATOR_LTE = 222;
CqlParser.OPERATOR_GTE = 223;
CqlParser.K_USERS = 224;
CqlParser.K_VECTOR = 225;

CqlParser.RULE_root = 0;
CqlParser.RULE_cqls = 1;
CqlParser.RULE_statementSeparator = 2;
CqlParser.RULE_empty = 3;
CqlParser.RULE_cql = 4;
CqlParser.RULE_revoke = 5;
CqlParser.RULE_listUsers = 6;
CqlParser.RULE_listRoles = 7;
CqlParser.RULE_listPermissions = 8;
CqlParser.RULE_grant = 9;
CqlParser.RULE_priviledge = 10;
CqlParser.RULE_resource = 11;
CqlParser.RULE_createUser = 12;
CqlParser.RULE_createRole = 13;
CqlParser.RULE_createType = 14;
CqlParser.RULE_typeMemberColumnList = 15;
CqlParser.RULE_createTrigger = 16;
CqlParser.RULE_createMaterializedView = 17;
CqlParser.RULE_materializedViewWhere = 18;
CqlParser.RULE_columnNotNullList = 19;
CqlParser.RULE_columnNotNull = 20;
CqlParser.RULE_materializedViewOptions = 21;
CqlParser.RULE_createKeyspace = 22;
CqlParser.RULE_createFunction = 23;
CqlParser.RULE_codeBlock = 24;
CqlParser.RULE_paramList = 25;
CqlParser.RULE_returnMode = 26;
CqlParser.RULE_createAggregate = 27;
CqlParser.RULE_initCondDefinition = 28;
CqlParser.RULE_initCondHash = 29;
CqlParser.RULE_initCondHashItem = 30;
CqlParser.RULE_initCondListNested = 31;
CqlParser.RULE_initCondList = 32;
CqlParser.RULE_orReplace = 33;
CqlParser.RULE_alterUser = 34;
CqlParser.RULE_userPassword = 35;
CqlParser.RULE_userSuperUser = 36;
CqlParser.RULE_alterType = 37;
CqlParser.RULE_alterTypeOperation = 38;
CqlParser.RULE_alterTypeRename = 39;
CqlParser.RULE_alterTypeRenameList = 40;
CqlParser.RULE_alterTypeRenameItem = 41;
CqlParser.RULE_alterTypeAdd = 42;
CqlParser.RULE_alterTypeAlterType = 43;
CqlParser.RULE_alterTable = 44;
CqlParser.RULE_alterTableOperation = 45;
CqlParser.RULE_alterTableWith = 46;
CqlParser.RULE_alterTableRename = 47;
CqlParser.RULE_alterTableDropCompactStorage = 48;
CqlParser.RULE_alterTableDropColumns = 49;
CqlParser.RULE_alterTableDropColumnList = 50;
CqlParser.RULE_alterTableAdd = 51;
CqlParser.RULE_alterTableColumnDefinition = 52;
CqlParser.RULE_alterRole = 53;
CqlParser.RULE_roleWith = 54;
CqlParser.RULE_roleWithOptions = 55;
CqlParser.RULE_alterMaterializedView = 56;
CqlParser.RULE_dropUser = 57;
CqlParser.RULE_dropType = 58;
CqlParser.RULE_dropMaterializedView = 59;
CqlParser.RULE_dropAggregate = 60;
CqlParser.RULE_dropFunction = 61;
CqlParser.RULE_dropTrigger = 62;
CqlParser.RULE_dropRole = 63;
CqlParser.RULE_dropTable = 64;
CqlParser.RULE_dropKeyspace = 65;
CqlParser.RULE_dropIndex = 66;
CqlParser.RULE_createTable = 67;
CqlParser.RULE_withElement = 68;
CqlParser.RULE_clusteringOrderColumns = 69;
CqlParser.RULE_clusteringOrder = 70;
CqlParser.RULE_tableOptions = 71;
CqlParser.RULE_tableOptionItem = 72;
CqlParser.RULE_tableOptionName = 73;
CqlParser.RULE_tableOptionValue = 74;
CqlParser.RULE_optionHash = 75;
CqlParser.RULE_optionHashItem = 76;
CqlParser.RULE_optionHashKey = 77;
CqlParser.RULE_optionHashValue = 78;
CqlParser.RULE_columnDefinitionList = 79;
CqlParser.RULE_columnDefinition = 80;
CqlParser.RULE_primaryKeyColumn = 81;
CqlParser.RULE_primaryKeyElement = 82;
CqlParser.RULE_primaryKeyDefinition = 83;
CqlParser.RULE_singlePrimaryKey = 84;
CqlParser.RULE_compoundKey = 85;
CqlParser.RULE_compositeKey = 86;
CqlParser.RULE_partitionKeyList = 87;
CqlParser.RULE_clusteringKeyList = 88;
CqlParser.RULE_partitionKey = 89;
CqlParser.RULE_clusteringKey = 90;
CqlParser.RULE_applyBatch = 91;
CqlParser.RULE_beginBatch = 92;
CqlParser.RULE_batchType = 93;
CqlParser.RULE_alterKeyspace = 94;
CqlParser.RULE_replicationList = 95;
CqlParser.RULE_replicationListItem = 96;
CqlParser.RULE_durableWrites = 97;
CqlParser.RULE_use = 98;
CqlParser.RULE_truncate = 99;
CqlParser.RULE_createIndex = 100;
CqlParser.RULE_customIndexOption = 101;
CqlParser.RULE_createSearchIndex = 102;
CqlParser.RULE_searchIndexConfigs = 103;
CqlParser.RULE_directoryFactory = 104;
CqlParser.RULE_searchIndexOptions = 105;
CqlParser.RULE_searchIndexProfile = 106;
CqlParser.RULE_searchIndexProfiles = 107;
CqlParser.RULE_searchIndexColumnList = 108;
CqlParser.RULE_searchIndexColumn = 109;
CqlParser.RULE_indexName = 110;
CqlParser.RULE_indexColumnSpec = 111;
CqlParser.RULE_indexKeysSpec = 112;
CqlParser.RULE_indexEntriesSSpec = 113;
CqlParser.RULE_indexFullSpec = 114;
CqlParser.RULE_indexValuesSpec = 115;
CqlParser.RULE_deleteStatement = 116;
CqlParser.RULE_deleteColumnList = 117;
CqlParser.RULE_deleteColumnItem = 118;
CqlParser.RULE_update = 119;
CqlParser.RULE_ifSpec = 120;
CqlParser.RULE_ifConditionList = 121;
CqlParser.RULE_ifCondition = 122;
CqlParser.RULE_assignments = 123;
CqlParser.RULE_assignmentElement = 124;
CqlParser.RULE_assignmentSet = 125;
CqlParser.RULE_assignmentMap = 126;
CqlParser.RULE_assignmentMapExpression = 127;
CqlParser.RULE_assignmentList = 128;
CqlParser.RULE_assignmentTuple = 129;
CqlParser.RULE_insert = 130;
CqlParser.RULE_usingTtlTimestamp = 131;
CqlParser.RULE_timestamp = 132;
CqlParser.RULE_ttl = 133;
CqlParser.RULE_usingTimestampSpec = 134;
CqlParser.RULE_ifNotExist = 135;
CqlParser.RULE_ifExist = 136;
CqlParser.RULE_insertValuesSpec = 137;
CqlParser.RULE_insertColumnSpec = 138;
CqlParser.RULE_columnList = 139;
CqlParser.RULE_expressionList = 140;
CqlParser.RULE_expression = 141;
CqlParser.RULE_select = 142;
CqlParser.RULE_allowFilteringSpec = 143;
CqlParser.RULE_limitSpec = 144;
CqlParser.RULE_fromSpec = 145;
CqlParser.RULE_fromSpecElement = 146;
CqlParser.RULE_orderSpec = 147;
CqlParser.RULE_orderSpecElement = 148;
CqlParser.RULE_whereSpec = 149;
CqlParser.RULE_distinctSpec = 150;
CqlParser.RULE_selectElements = 151;
CqlParser.RULE_selectElement = 152;
CqlParser.RULE_relationElements = 153;
CqlParser.RULE_relationElement = 154;
CqlParser.RULE_relalationContains = 155;
CqlParser.RULE_relalationContainsKey = 156;
CqlParser.RULE_functionCall = 157;
CqlParser.RULE_functionArgs = 158;
CqlParser.RULE_constant = 159;
CqlParser.RULE_decimalLiteral = 160;
CqlParser.RULE_floatLiteral = 161;
CqlParser.RULE_stringLiteral = 162;
CqlParser.RULE_booleanLiteral = 163;
CqlParser.RULE_hexadecimalLiteral = 164;
CqlParser.RULE_keyspace = 165;
CqlParser.RULE_table = 166;
CqlParser.RULE_column = 167;
CqlParser.RULE_dataType = 168;
CqlParser.RULE_dataTypeName = 169;
CqlParser.RULE_dataTypeDefinition = 170;
CqlParser.RULE_orderDirection = 171;
CqlParser.RULE_role = 172;
CqlParser.RULE_trigger = 173;
CqlParser.RULE_triggerClass = 174;
CqlParser.RULE_materializedView = 175;
CqlParser.RULE_type = 176;
CqlParser.RULE_aggregate = 177;
CqlParser.RULE_functionStatement = 178;
CqlParser.RULE_language = 179;
CqlParser.RULE_user = 180;
CqlParser.RULE_password = 181;
CqlParser.RULE_hashKey = 182;
CqlParser.RULE_param = 183;
CqlParser.RULE_paramName = 184;
CqlParser.RULE_kwAdd = 185;
CqlParser.RULE_kwAggregate = 186;
CqlParser.RULE_kwAll = 187;
CqlParser.RULE_kwAllPermissions = 188;
CqlParser.RULE_kwAllow = 189;
CqlParser.RULE_kwAlter = 190;
CqlParser.RULE_kwAnd = 191;
CqlParser.RULE_kwApply = 192;
CqlParser.RULE_kwAs = 193;
CqlParser.RULE_kwAsc = 194;
CqlParser.RULE_kwAuthorize = 195;
CqlParser.RULE_kwBatch = 196;
CqlParser.RULE_kwBegin = 197;
CqlParser.RULE_kwBy = 198;
CqlParser.RULE_kwCalled = 199;
CqlParser.RULE_kwClustering = 200;
CqlParser.RULE_kwCompact = 201;
CqlParser.RULE_kwContains = 202;
CqlParser.RULE_kwCreate = 203;
CqlParser.RULE_kwDelete = 204;
CqlParser.RULE_kwDesc = 205;
CqlParser.RULE_kwDescibe = 206;
CqlParser.RULE_kwDistinct = 207;
CqlParser.RULE_kwDrop = 208;
CqlParser.RULE_kwDurableWrites = 209;
CqlParser.RULE_kwEntries = 210;
CqlParser.RULE_kwExecute = 211;
CqlParser.RULE_kwExists = 212;
CqlParser.RULE_kwFiltering = 213;
CqlParser.RULE_kwFinalfunc = 214;
CqlParser.RULE_kwFrom = 215;
CqlParser.RULE_kwFull = 216;
CqlParser.RULE_kwFunction = 217;
CqlParser.RULE_kwFunctions = 218;
CqlParser.RULE_kwGrant = 219;
CqlParser.RULE_kwIf = 220;
CqlParser.RULE_kwIn = 221;
CqlParser.RULE_kwIndex = 222;
CqlParser.RULE_kwCustom = 223;
CqlParser.RULE_kwSearch = 224;
CqlParser.RULE_kwAscii = 225;
CqlParser.RULE_kwNormalize = 226;
CqlParser.RULE_kwAnalyzed = 227;
CqlParser.RULE_kwIsLiteral = 228;
CqlParser.RULE_kwMaxCompactionFlushMemoryInMb = 229;
CqlParser.RULE_kwTokenizationEnableStemming = 230;
CqlParser.RULE_kwTokenizationSkipStopWords = 231;
CqlParser.RULE_kwTokenizationLocale = 232;
CqlParser.RULE_kwTokenizationNormalizeLowercase = 233;
CqlParser.RULE_kwTokenizationNormalizeUppercase = 234;
CqlParser.RULE_kwNormalizeLowercase = 235;
CqlParser.RULE_kwNormalizeUppercase = 236;
CqlParser.RULE_kwMode = 237;
CqlParser.RULE_kwAnalyzerClass = 238;
CqlParser.RULE_kwStorageAttachedIndex = 239;
CqlParser.RULE_kwSolrIndex = 240;
CqlParser.RULE_kwSASIIndex = 241;
CqlParser.RULE_kwSpaceSavingNoJoin = 242;
CqlParser.RULE_kwSpaceSavingAll = 243;
CqlParser.RULE_kwSpaceSavingSlowTriePrecision = 244;
CqlParser.RULE_kwSpaceSavingNoTextField = 245;
CqlParser.RULE_kwCopyField = 246;
CqlParser.RULE_kwDocValues = 247;
CqlParser.RULE_kwExcluded = 248;
CqlParser.RULE_kwIndexed = 249;
CqlParser.RULE_kwLowerCase = 250;
CqlParser.RULE_kwColumns = 251;
CqlParser.RULE_kwProfiles = 252;
CqlParser.RULE_kwConfig = 253;
CqlParser.RULE_kwAutoCommitTime = 254;
CqlParser.RULE_kwDefaultQueryField = 255;
CqlParser.RULE_kwDirectoryFactory = 256;
CqlParser.RULE_kwFilterCacheLowWaterMark = 257;
CqlParser.RULE_kwFilterCacheHighWaterMark = 258;
CqlParser.RULE_kwDirectoryFactoryClass = 259;
CqlParser.RULE_kwMergeMaxThreadCount = 260;
CqlParser.RULE_kwMergeMaxMergeCount = 261;
CqlParser.RULE_kwRamBufferSize = 262;
CqlParser.RULE_kwRealtime = 263;
CqlParser.RULE_kwRecovery = 264;
CqlParser.RULE_kwReindex = 265;
CqlParser.RULE_kwLenient = 266;
CqlParser.RULE_kwStandard = 267;
CqlParser.RULE_kwEncrypted = 268;
CqlParser.RULE_kwCaseSensitive = 269;
CqlParser.RULE_kwInitcond = 270;
CqlParser.RULE_kwInput = 271;
CqlParser.RULE_kwInsert = 272;
CqlParser.RULE_kwInto = 273;
CqlParser.RULE_kwIs = 274;
CqlParser.RULE_kwJson = 275;
CqlParser.RULE_kwKey = 276;
CqlParser.RULE_kwKeys = 277;
CqlParser.RULE_kwKeyspace = 278;
CqlParser.RULE_kwKeyspaces = 279;
CqlParser.RULE_kwLanguage = 280;
CqlParser.RULE_kwLimit = 281;
CqlParser.RULE_kwList = 282;
CqlParser.RULE_kwLogged = 283;
CqlParser.RULE_kwLogin = 284;
CqlParser.RULE_kwMaterialized = 285;
CqlParser.RULE_kwModify = 286;
CqlParser.RULE_kwNosuperuser = 287;
CqlParser.RULE_kwNorecursive = 288;
CqlParser.RULE_kwNot = 289;
CqlParser.RULE_kwNull = 290;
CqlParser.RULE_kwOf = 291;
CqlParser.RULE_kwOn = 292;
CqlParser.RULE_kwOptions = 293;
CqlParser.RULE_kwOr = 294;
CqlParser.RULE_kwOrder = 295;
CqlParser.RULE_kwPassword = 296;
CqlParser.RULE_kwPrimary = 297;
CqlParser.RULE_kwRename = 298;
CqlParser.RULE_kwReplace = 299;
CqlParser.RULE_kwReplication = 300;
CqlParser.RULE_kwReturns = 301;
CqlParser.RULE_kwRole = 302;
CqlParser.RULE_kwInternal = 303;
CqlParser.RULE_kwLdap = 304;
CqlParser.RULE_kwScheme = 305;
CqlParser.RULE_kwRoles = 306;
CqlParser.RULE_kwSelect = 307;
CqlParser.RULE_kwSet = 308;
CqlParser.RULE_kwSfunc = 309;
CqlParser.RULE_kwStorage = 310;
CqlParser.RULE_kwStype = 311;
CqlParser.RULE_kwSuperuser = 312;
CqlParser.RULE_kwTable = 313;
CqlParser.RULE_kwTimestamp = 314;
CqlParser.RULE_kwTo = 315;
CqlParser.RULE_kwTrigger = 316;
CqlParser.RULE_kwTruncate = 317;
CqlParser.RULE_kwTtl = 318;
CqlParser.RULE_kwType = 319;
CqlParser.RULE_kwUnlogged = 320;
CqlParser.RULE_kwUpdate = 321;
CqlParser.RULE_kwUse = 322;
CqlParser.RULE_kwUser = 323;
CqlParser.RULE_kwUsers = 324;
CqlParser.RULE_kwUsing = 325;
CqlParser.RULE_kwValues = 326;
CqlParser.RULE_kwView = 327;
CqlParser.RULE_kwWhere = 328;
CqlParser.RULE_kwWith = 329;
CqlParser.RULE_kwRevoke = 330;
CqlParser.RULE_eof = 331;
CqlParser.RULE_syntaxBracketLr = 332;
CqlParser.RULE_syntaxBracketRr = 333;
CqlParser.RULE_syntaxBracketLc = 334;
CqlParser.RULE_syntaxBracketRc = 335;
CqlParser.RULE_syntaxBracketLa = 336;
CqlParser.RULE_syntaxBracketRa = 337;
CqlParser.RULE_syntaxBracketLs = 338;
CqlParser.RULE_syntaxBracketRs = 339;
CqlParser.RULE_syntaxComma = 340;
CqlParser.RULE_syntaxColon = 341;
CqlParser.RULE_id = 342;

class RootContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_root;
  }

  eof() {
    return this.getTypedRuleContext(EofContext, 0);
  }

  cqls() {
    return this.getTypedRuleContext(CqlsContext, 0);
  }

  MINUSMINUS() {
    return this.getToken(CqlParser.MINUSMINUS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitRoot(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CqlsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_cqls;
  }

  cql = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CqlContext);
    } else {
      return this.getTypedRuleContext(CqlContext, i);
    }
  };

  empty = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EmptyContext);
    } else {
      return this.getTypedRuleContext(EmptyContext, i);
    }
  };

  statementSeparator = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StatementSeparatorContext);
    } else {
      return this.getTypedRuleContext(StatementSeparatorContext, i);
    }
  };

  MINUSMINUS = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.MINUSMINUS);
    } else {
      return this.getToken(CqlParser.MINUSMINUS, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCqls(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StatementSeparatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_statementSeparator;
  }

  SEMI() {
    return this.getToken(CqlParser.SEMI, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitStatementSeparator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EmptyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_empty;
  }

  statementSeparator() {
    return this.getTypedRuleContext(StatementSeparatorContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitEmpty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CqlContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_cql;
  }

  alterKeyspace() {
    return this.getTypedRuleContext(AlterKeyspaceContext, 0);
  }

  alterMaterializedView() {
    return this.getTypedRuleContext(AlterMaterializedViewContext, 0);
  }

  alterRole() {
    return this.getTypedRuleContext(AlterRoleContext, 0);
  }

  alterTable() {
    return this.getTypedRuleContext(AlterTableContext, 0);
  }

  alterType() {
    return this.getTypedRuleContext(AlterTypeContext, 0);
  }

  alterUser() {
    return this.getTypedRuleContext(AlterUserContext, 0);
  }

  applyBatch() {
    return this.getTypedRuleContext(ApplyBatchContext, 0);
  }

  createAggregate() {
    return this.getTypedRuleContext(CreateAggregateContext, 0);
  }

  createFunction() {
    return this.getTypedRuleContext(CreateFunctionContext, 0);
  }

  createIndex() {
    return this.getTypedRuleContext(CreateIndexContext, 0);
  }

  createSearchIndex() {
    return this.getTypedRuleContext(CreateSearchIndexContext, 0);
  }

  createKeyspace() {
    return this.getTypedRuleContext(CreateKeyspaceContext, 0);
  }

  createMaterializedView() {
    return this.getTypedRuleContext(CreateMaterializedViewContext, 0);
  }

  createRole() {
    return this.getTypedRuleContext(CreateRoleContext, 0);
  }

  createTable() {
    return this.getTypedRuleContext(CreateTableContext, 0);
  }

  createTrigger() {
    return this.getTypedRuleContext(CreateTriggerContext, 0);
  }

  createType() {
    return this.getTypedRuleContext(CreateTypeContext, 0);
  }

  createUser() {
    return this.getTypedRuleContext(CreateUserContext, 0);
  }

  deleteStatement() {
    return this.getTypedRuleContext(DeleteStatementContext, 0);
  }

  dropAggregate() {
    return this.getTypedRuleContext(DropAggregateContext, 0);
  }

  dropFunction() {
    return this.getTypedRuleContext(DropFunctionContext, 0);
  }

  dropIndex() {
    return this.getTypedRuleContext(DropIndexContext, 0);
  }

  dropKeyspace() {
    return this.getTypedRuleContext(DropKeyspaceContext, 0);
  }

  dropMaterializedView() {
    return this.getTypedRuleContext(DropMaterializedViewContext, 0);
  }

  dropRole() {
    return this.getTypedRuleContext(DropRoleContext, 0);
  }

  dropTable() {
    return this.getTypedRuleContext(DropTableContext, 0);
  }

  dropTrigger() {
    return this.getTypedRuleContext(DropTriggerContext, 0);
  }

  dropType() {
    return this.getTypedRuleContext(DropTypeContext, 0);
  }

  dropUser() {
    return this.getTypedRuleContext(DropUserContext, 0);
  }

  grant() {
    return this.getTypedRuleContext(GrantContext, 0);
  }

  insert() {
    return this.getTypedRuleContext(InsertContext, 0);
  }

  listPermissions() {
    return this.getTypedRuleContext(ListPermissionsContext, 0);
  }

  listRoles() {
    return this.getTypedRuleContext(ListRolesContext, 0);
  }

  revoke() {
    return this.getTypedRuleContext(RevokeContext, 0);
  }

  select() {
    return this.getTypedRuleContext(SelectContext, 0);
  }

  truncate() {
    return this.getTypedRuleContext(TruncateContext, 0);
  }

  update() {
    return this.getTypedRuleContext(UpdateContext, 0);
  }

  use() {
    return this.getTypedRuleContext(UseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCql(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RevokeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_revoke;
  }

  kwRevoke() {
    return this.getTypedRuleContext(KwRevokeContext, 0);
  }

  priviledge() {
    return this.getTypedRuleContext(PriviledgeContext, 0);
  }

  kwOn() {
    return this.getTypedRuleContext(KwOnContext, 0);
  }

  resource() {
    return this.getTypedRuleContext(ResourceContext, 0);
  }

  kwFrom() {
    return this.getTypedRuleContext(KwFromContext, 0);
  }

  role() {
    return this.getTypedRuleContext(RoleContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitRevoke(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ListUsersContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_listUsers;
  }

  kwList() {
    return this.getTypedRuleContext(KwListContext, 0);
  }

  kwUsers() {
    return this.getTypedRuleContext(KwUsersContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitListUsers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ListRolesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_listRoles;
  }

  kwList() {
    return this.getTypedRuleContext(KwListContext, 0);
  }

  kwRoles() {
    return this.getTypedRuleContext(KwRolesContext, 0);
  }

  kwOf() {
    return this.getTypedRuleContext(KwOfContext, 0);
  }

  role() {
    return this.getTypedRuleContext(RoleContext, 0);
  }

  kwNorecursive() {
    return this.getTypedRuleContext(KwNorecursiveContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitListRoles(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ListPermissionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_listPermissions;
  }

  kwList() {
    return this.getTypedRuleContext(KwListContext, 0);
  }

  priviledge() {
    return this.getTypedRuleContext(PriviledgeContext, 0);
  }

  kwOn() {
    return this.getTypedRuleContext(KwOnContext, 0);
  }

  resource() {
    return this.getTypedRuleContext(ResourceContext, 0);
  }

  kwOf() {
    return this.getTypedRuleContext(KwOfContext, 0);
  }

  role() {
    return this.getTypedRuleContext(RoleContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitListPermissions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GrantContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_grant;
  }

  kwGrant() {
    return this.getTypedRuleContext(KwGrantContext, 0);
  }

  priviledge() {
    return this.getTypedRuleContext(PriviledgeContext, 0);
  }

  kwOn() {
    return this.getTypedRuleContext(KwOnContext, 0);
  }

  resource() {
    return this.getTypedRuleContext(ResourceContext, 0);
  }

  kwTo() {
    return this.getTypedRuleContext(KwToContext, 0);
  }

  role() {
    return this.getTypedRuleContext(RoleContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitGrant(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PriviledgeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_priviledge;
  }

  kwAll() {
    return this.getTypedRuleContext(KwAllContext, 0);
  }

  kwAllPermissions() {
    return this.getTypedRuleContext(KwAllPermissionsContext, 0);
  }

  kwAlter() {
    return this.getTypedRuleContext(KwAlterContext, 0);
  }

  kwAuthorize() {
    return this.getTypedRuleContext(KwAuthorizeContext, 0);
  }

  kwDescibe() {
    return this.getTypedRuleContext(KwDescibeContext, 0);
  }

  kwExecute() {
    return this.getTypedRuleContext(KwExecuteContext, 0);
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwModify() {
    return this.getTypedRuleContext(KwModifyContext, 0);
  }

  kwSelect() {
    return this.getTypedRuleContext(KwSelectContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitPriviledge(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ResourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_resource;
  }

  kwAll() {
    return this.getTypedRuleContext(KwAllContext, 0);
  }

  kwFunctions() {
    return this.getTypedRuleContext(KwFunctionsContext, 0);
  }

  kwIn() {
    return this.getTypedRuleContext(KwInContext, 0);
  }

  kwKeyspace() {
    return this.getTypedRuleContext(KwKeyspaceContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  kwFunction() {
    return this.getTypedRuleContext(KwFunctionContext, 0);
  }

  functionStatement() {
    return this.getTypedRuleContext(FunctionStatementContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  kwKeyspaces() {
    return this.getTypedRuleContext(KwKeyspacesContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  kwTable() {
    return this.getTypedRuleContext(KwTableContext, 0);
  }

  kwRoles() {
    return this.getTypedRuleContext(KwRolesContext, 0);
  }

  kwRole() {
    return this.getTypedRuleContext(KwRoleContext, 0);
  }

  role() {
    return this.getTypedRuleContext(RoleContext, 0);
  }

  kwScheme() {
    return this.getTypedRuleContext(KwSchemeContext, 0);
  }

  kwInternal() {
    return this.getTypedRuleContext(KwInternalContext, 0);
  }

  kwLdap() {
    return this.getTypedRuleContext(KwLdapContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitResource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateUserContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createUser;
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwUser() {
    return this.getTypedRuleContext(KwUserContext, 0);
  }

  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }

  kwWith() {
    return this.getTypedRuleContext(KwWithContext, 0);
  }

  kwPassword() {
    return this.getTypedRuleContext(KwPasswordContext, 0);
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  kwSuperuser() {
    return this.getTypedRuleContext(KwSuperuserContext, 0);
  }

  kwNosuperuser() {
    return this.getTypedRuleContext(KwNosuperuserContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCreateUser(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateRoleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createRole;
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwRole() {
    return this.getTypedRuleContext(KwRoleContext, 0);
  }

  role() {
    return this.getTypedRuleContext(RoleContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  roleWith() {
    return this.getTypedRuleContext(RoleWithContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCreateRole(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createType;
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwType() {
    return this.getTypedRuleContext(KwTypeContext, 0);
  }

  type() {
    return this.getTypedRuleContext(TypeContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  typeMemberColumnList() {
    return this.getTypedRuleContext(TypeMemberColumnListContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCreateType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypeMemberColumnListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_typeMemberColumnList;
  }

  column = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnContext);
    } else {
      return this.getTypedRuleContext(ColumnContext, i);
    }
  };

  dataType = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DataTypeContext);
    } else {
      return this.getTypedRuleContext(DataTypeContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTypeMemberColumnList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateTriggerContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createTrigger;
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwTrigger() {
    return this.getTypedRuleContext(KwTriggerContext, 0);
  }

  trigger() {
    return this.getTypedRuleContext(TriggerContext, 0);
  }

  kwUsing() {
    return this.getTypedRuleContext(KwUsingContext, 0);
  }

  triggerClass() {
    return this.getTypedRuleContext(TriggerClassContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCreateTrigger(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateMaterializedViewContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createMaterializedView;
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwMaterialized() {
    return this.getTypedRuleContext(KwMaterializedContext, 0);
  }

  kwView() {
    return this.getTypedRuleContext(KwViewContext, 0);
  }

  materializedView() {
    return this.getTypedRuleContext(MaterializedViewContext, 0);
  }

  kwAs() {
    return this.getTypedRuleContext(KwAsContext, 0);
  }

  kwSelect() {
    return this.getTypedRuleContext(KwSelectContext, 0);
  }

  columnList() {
    return this.getTypedRuleContext(ColumnListContext, 0);
  }

  kwFrom() {
    return this.getTypedRuleContext(KwFromContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  materializedViewWhere() {
    return this.getTypedRuleContext(MaterializedViewWhereContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  keyspace = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KeyspaceContext);
    } else {
      return this.getTypedRuleContext(KeyspaceContext, i);
    }
  };

  DOT = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.DOT);
    } else {
      return this.getToken(CqlParser.DOT, i);
    }
  };

  primaryKeyElement() {
    return this.getTypedRuleContext(PrimaryKeyElementContext, 0);
  }

  kwWith() {
    return this.getTypedRuleContext(KwWithContext, 0);
  }

  materializedViewOptions() {
    return this.getTypedRuleContext(MaterializedViewOptionsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCreateMaterializedView(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MaterializedViewWhereContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_materializedViewWhere;
  }

  kwWhere() {
    return this.getTypedRuleContext(KwWhereContext, 0);
  }

  columnNotNullList() {
    return this.getTypedRuleContext(ColumnNotNullListContext, 0);
  }

  kwAnd() {
    return this.getTypedRuleContext(KwAndContext, 0);
  }

  relationElements() {
    return this.getTypedRuleContext(RelationElementsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitMaterializedViewWhere(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNotNullListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnNotNullList;
  }

  columnNotNull = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnNotNullContext);
    } else {
      return this.getTypedRuleContext(ColumnNotNullContext, i);
    }
  };

  kwAnd = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KwAndContext);
    } else {
      return this.getTypedRuleContext(KwAndContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitColumnNotNullList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNotNullContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnNotNull;
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  kwIs() {
    return this.getTypedRuleContext(KwIsContext, 0);
  }

  kwNot() {
    return this.getTypedRuleContext(KwNotContext, 0);
  }

  kwNull() {
    return this.getTypedRuleContext(KwNullContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitColumnNotNull(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MaterializedViewOptionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_materializedViewOptions;
  }

  tableOptions() {
    return this.getTypedRuleContext(TableOptionsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitMaterializedViewOptions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateKeyspaceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createKeyspace;
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwKeyspace() {
    return this.getTypedRuleContext(KwKeyspaceContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  kwWith() {
    return this.getTypedRuleContext(KwWithContext, 0);
  }

  kwReplication() {
    return this.getTypedRuleContext(KwReplicationContext, 0);
  }

  OPERATOR_EQ() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
  }

  syntaxBracketLc() {
    return this.getTypedRuleContext(SyntaxBracketLcContext, 0);
  }

  replicationList() {
    return this.getTypedRuleContext(ReplicationListContext, 0);
  }

  syntaxBracketRc() {
    return this.getTypedRuleContext(SyntaxBracketRcContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  kwAnd() {
    return this.getTypedRuleContext(KwAndContext, 0);
  }

  durableWrites() {
    return this.getTypedRuleContext(DurableWritesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCreateKeyspace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateFunctionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createFunction;
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwFunction() {
    return this.getTypedRuleContext(KwFunctionContext, 0);
  }

  functionStatement() {
    return this.getTypedRuleContext(FunctionStatementContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  returnMode() {
    return this.getTypedRuleContext(ReturnModeContext, 0);
  }

  kwReturns() {
    return this.getTypedRuleContext(KwReturnsContext, 0);
  }

  dataType() {
    return this.getTypedRuleContext(DataTypeContext, 0);
  }

  kwLanguage() {
    return this.getTypedRuleContext(KwLanguageContext, 0);
  }

  language() {
    return this.getTypedRuleContext(LanguageContext, 0);
  }

  kwAs() {
    return this.getTypedRuleContext(KwAsContext, 0);
  }

  codeBlock() {
    return this.getTypedRuleContext(CodeBlockContext, 0);
  }

  orReplace() {
    return this.getTypedRuleContext(OrReplaceContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  paramList() {
    return this.getTypedRuleContext(ParamListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCreateFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CodeBlockContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_codeBlock;
  }

  CODE_BLOCK() {
    return this.getToken(CqlParser.CODE_BLOCK, 0);
  }

  STRING_LITERAL() {
    return this.getToken(CqlParser.STRING_LITERAL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCodeBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ParamListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_paramList;
  }

  param = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ParamContext);
    } else {
      return this.getTypedRuleContext(ParamContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitParamList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReturnModeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_returnMode;
  }

  kwOn() {
    return this.getTypedRuleContext(KwOnContext, 0);
  }

  kwNull = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KwNullContext);
    } else {
      return this.getTypedRuleContext(KwNullContext, i);
    }
  };

  kwInput() {
    return this.getTypedRuleContext(KwInputContext, 0);
  }

  kwCalled() {
    return this.getTypedRuleContext(KwCalledContext, 0);
  }

  kwReturns() {
    return this.getTypedRuleContext(KwReturnsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitReturnMode(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateAggregateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createAggregate;
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwAggregate() {
    return this.getTypedRuleContext(KwAggregateContext, 0);
  }

  aggregate() {
    return this.getTypedRuleContext(AggregateContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  dataType = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DataTypeContext);
    } else {
      return this.getTypedRuleContext(DataTypeContext, i);
    }
  };

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  kwSfunc() {
    return this.getTypedRuleContext(KwSfuncContext, 0);
  }

  functionStatement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(FunctionStatementContext);
    } else {
      return this.getTypedRuleContext(FunctionStatementContext, i);
    }
  };

  kwStype() {
    return this.getTypedRuleContext(KwStypeContext, 0);
  }

  kwFinalfunc() {
    return this.getTypedRuleContext(KwFinalfuncContext, 0);
  }

  kwInitcond() {
    return this.getTypedRuleContext(KwInitcondContext, 0);
  }

  initCondDefinition() {
    return this.getTypedRuleContext(InitCondDefinitionContext, 0);
  }

  orReplace() {
    return this.getTypedRuleContext(OrReplaceContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCreateAggregate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class InitCondDefinitionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondDefinition;
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  initCondList() {
    return this.getTypedRuleContext(InitCondListContext, 0);
  }

  initCondListNested() {
    return this.getTypedRuleContext(InitCondListNestedContext, 0);
  }

  initCondHash() {
    return this.getTypedRuleContext(InitCondHashContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitInitCondDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class InitCondHashContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondHash;
  }

  syntaxBracketLc() {
    return this.getTypedRuleContext(SyntaxBracketLcContext, 0);
  }

  initCondHashItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(InitCondHashItemContext);
    } else {
      return this.getTypedRuleContext(InitCondHashItemContext, i);
    }
  };

  syntaxBracketRc() {
    return this.getTypedRuleContext(SyntaxBracketRcContext, 0);
  }

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitInitCondHash(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class InitCondHashItemContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondHashItem;
  }

  hashKey() {
    return this.getTypedRuleContext(HashKeyContext, 0);
  }

  COLON() {
    return this.getToken(CqlParser.COLON, 0);
  }

  initCondDefinition() {
    return this.getTypedRuleContext(InitCondDefinitionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitInitCondHashItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class InitCondListNestedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondListNested;
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  initCondList = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(InitCondListContext);
    } else {
      return this.getTypedRuleContext(InitCondListContext, i);
    }
  };

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  constant = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ConstantContext);
    } else {
      return this.getTypedRuleContext(ConstantContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitInitCondListNested(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class InitCondListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondList;
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  constant = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ConstantContext);
    } else {
      return this.getTypedRuleContext(ConstantContext, i);
    }
  };

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitInitCondList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OrReplaceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orReplace;
  }

  kwOr() {
    return this.getTypedRuleContext(KwOrContext, 0);
  }

  kwReplace() {
    return this.getTypedRuleContext(KwReplaceContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitOrReplace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterUserContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterUser;
  }

  kwAlter() {
    return this.getTypedRuleContext(KwAlterContext, 0);
  }

  kwUser() {
    return this.getTypedRuleContext(KwUserContext, 0);
  }

  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }

  kwWith() {
    return this.getTypedRuleContext(KwWithContext, 0);
  }

  userPassword() {
    return this.getTypedRuleContext(UserPasswordContext, 0);
  }

  userSuperUser() {
    return this.getTypedRuleContext(UserSuperUserContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterUser(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UserPasswordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_userPassword;
  }

  kwPassword() {
    return this.getTypedRuleContext(KwPasswordContext, 0);
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitUserPassword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UserSuperUserContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_userSuperUser;
  }

  kwSuperuser() {
    return this.getTypedRuleContext(KwSuperuserContext, 0);
  }

  kwNosuperuser() {
    return this.getTypedRuleContext(KwNosuperuserContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitUserSuperUser(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterType;
  }

  kwAlter() {
    return this.getTypedRuleContext(KwAlterContext, 0);
  }

  kwType() {
    return this.getTypedRuleContext(KwTypeContext, 0);
  }

  type() {
    return this.getTypedRuleContext(TypeContext, 0);
  }

  alterTypeOperation() {
    return this.getTypedRuleContext(AlterTypeOperationContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTypeOperationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeOperation;
  }

  alterTypeAlterType() {
    return this.getTypedRuleContext(AlterTypeAlterTypeContext, 0);
  }

  alterTypeAdd() {
    return this.getTypedRuleContext(AlterTypeAddContext, 0);
  }

  alterTypeRename() {
    return this.getTypedRuleContext(AlterTypeRenameContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTypeOperation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTypeRenameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeRename;
  }

  kwRename() {
    return this.getTypedRuleContext(KwRenameContext, 0);
  }

  alterTypeRenameList() {
    return this.getTypedRuleContext(AlterTypeRenameListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTypeRename(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTypeRenameListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeRenameList;
  }

  alterTypeRenameItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AlterTypeRenameItemContext);
    } else {
      return this.getTypedRuleContext(AlterTypeRenameItemContext, i);
    }
  };

  kwAnd = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KwAndContext);
    } else {
      return this.getTypedRuleContext(KwAndContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTypeRenameList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTypeRenameItemContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeRenameItem;
  }

  column = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnContext);
    } else {
      return this.getTypedRuleContext(ColumnContext, i);
    }
  };

  kwTo() {
    return this.getTypedRuleContext(KwToContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTypeRenameItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTypeAddContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeAdd;
  }

  kwAdd() {
    return this.getTypedRuleContext(KwAddContext, 0);
  }

  typeMemberColumnList() {
    return this.getTypedRuleContext(TypeMemberColumnListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTypeAdd(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTypeAlterTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeAlterType;
  }

  kwAlter() {
    return this.getTypedRuleContext(KwAlterContext, 0);
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  kwType() {
    return this.getTypedRuleContext(KwTypeContext, 0);
  }

  dataType() {
    return this.getTypedRuleContext(DataTypeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTypeAlterType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTableContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTable;
  }

  kwAlter() {
    return this.getTypedRuleContext(KwAlterContext, 0);
  }

  kwTable() {
    return this.getTypedRuleContext(KwTableContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  alterTableOperation() {
    return this.getTypedRuleContext(AlterTableOperationContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTableOperationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableOperation;
  }

  alterTableAdd() {
    return this.getTypedRuleContext(AlterTableAddContext, 0);
  }

  alterTableDropColumns() {
    return this.getTypedRuleContext(AlterTableDropColumnsContext, 0);
  }

  alterTableDropCompactStorage() {
    return this.getTypedRuleContext(AlterTableDropCompactStorageContext, 0);
  }

  alterTableRename() {
    return this.getTypedRuleContext(AlterTableRenameContext, 0);
  }

  alterTableWith() {
    return this.getTypedRuleContext(AlterTableWithContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTableOperation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTableWithContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableWith;
  }

  kwWith() {
    return this.getTypedRuleContext(KwWithContext, 0);
  }

  tableOptions() {
    return this.getTypedRuleContext(TableOptionsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTableWith(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTableRenameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableRename;
  }

  kwRename() {
    return this.getTypedRuleContext(KwRenameContext, 0);
  }

  column = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnContext);
    } else {
      return this.getTypedRuleContext(ColumnContext, i);
    }
  };

  kwTo() {
    return this.getTypedRuleContext(KwToContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTableRename(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTableDropCompactStorageContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableDropCompactStorage;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwCompact() {
    return this.getTypedRuleContext(KwCompactContext, 0);
  }

  kwStorage() {
    return this.getTypedRuleContext(KwStorageContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTableDropCompactStorage(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTableDropColumnsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableDropColumns;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  alterTableDropColumnList() {
    return this.getTypedRuleContext(AlterTableDropColumnListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTableDropColumns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTableDropColumnListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableDropColumnList;
  }

  column = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnContext);
    } else {
      return this.getTypedRuleContext(ColumnContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTableDropColumnList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTableAddContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableAdd;
  }

  kwAdd() {
    return this.getTypedRuleContext(KwAddContext, 0);
  }

  alterTableColumnDefinition() {
    return this.getTypedRuleContext(AlterTableColumnDefinitionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTableAdd(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTableColumnDefinitionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableColumnDefinition;
  }

  column = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnContext);
    } else {
      return this.getTypedRuleContext(ColumnContext, i);
    }
  };

  dataType = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DataTypeContext);
    } else {
      return this.getTypedRuleContext(DataTypeContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterTableColumnDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterRoleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterRole;
  }

  kwAlter() {
    return this.getTypedRuleContext(KwAlterContext, 0);
  }

  kwRole() {
    return this.getTypedRuleContext(KwRoleContext, 0);
  }

  role() {
    return this.getTypedRuleContext(RoleContext, 0);
  }

  roleWith() {
    return this.getTypedRuleContext(RoleWithContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterRole(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RoleWithContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_roleWith;
  }

  kwWith() {
    return this.getTypedRuleContext(KwWithContext, 0);
  }

  roleWithOptions = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RoleWithOptionsContext);
    } else {
      return this.getTypedRuleContext(RoleWithOptionsContext, i);
    }
  };

  kwAnd = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KwAndContext);
    } else {
      return this.getTypedRuleContext(KwAndContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitRoleWith(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RoleWithOptionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_roleWithOptions;
  }

  kwPassword() {
    return this.getTypedRuleContext(KwPasswordContext, 0);
  }

  OPERATOR_EQ() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  kwLogin() {
    return this.getTypedRuleContext(KwLoginContext, 0);
  }

  booleanLiteral() {
    return this.getTypedRuleContext(BooleanLiteralContext, 0);
  }

  kwSuperuser() {
    return this.getTypedRuleContext(KwSuperuserContext, 0);
  }

  kwOptions() {
    return this.getTypedRuleContext(KwOptionsContext, 0);
  }

  optionHash() {
    return this.getTypedRuleContext(OptionHashContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitRoleWithOptions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterMaterializedViewContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterMaterializedView;
  }

  kwAlter() {
    return this.getTypedRuleContext(KwAlterContext, 0);
  }

  kwMaterialized() {
    return this.getTypedRuleContext(KwMaterializedContext, 0);
  }

  kwView() {
    return this.getTypedRuleContext(KwViewContext, 0);
  }

  materializedView() {
    return this.getTypedRuleContext(MaterializedViewContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  kwWith() {
    return this.getTypedRuleContext(KwWithContext, 0);
  }

  tableOptions() {
    return this.getTypedRuleContext(TableOptionsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterMaterializedView(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropUserContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropUser;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwUser() {
    return this.getTypedRuleContext(KwUserContext, 0);
  }

  user() {
    return this.getTypedRuleContext(UserContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDropUser(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropType;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwType() {
    return this.getTypedRuleContext(KwTypeContext, 0);
  }

  type() {
    return this.getTypedRuleContext(TypeContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDropType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropMaterializedViewContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropMaterializedView;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwMaterialized() {
    return this.getTypedRuleContext(KwMaterializedContext, 0);
  }

  kwView() {
    return this.getTypedRuleContext(KwViewContext, 0);
  }

  materializedView() {
    return this.getTypedRuleContext(MaterializedViewContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDropMaterializedView(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropAggregateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropAggregate;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwAggregate() {
    return this.getTypedRuleContext(KwAggregateContext, 0);
  }

  aggregate() {
    return this.getTypedRuleContext(AggregateContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDropAggregate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropFunctionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropFunction;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwFunction() {
    return this.getTypedRuleContext(KwFunctionContext, 0);
  }

  functionStatement() {
    return this.getTypedRuleContext(FunctionStatementContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDropFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropTriggerContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropTrigger;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwTrigger() {
    return this.getTypedRuleContext(KwTriggerContext, 0);
  }

  trigger() {
    return this.getTypedRuleContext(TriggerContext, 0);
  }

  kwOn() {
    return this.getTypedRuleContext(KwOnContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDropTrigger(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropRoleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropRole;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwRole() {
    return this.getTypedRuleContext(KwRoleContext, 0);
  }

  role() {
    return this.getTypedRuleContext(RoleContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDropRole(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropTableContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropTable;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwTable() {
    return this.getTypedRuleContext(KwTableContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDropTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropKeyspaceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropKeyspace;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwKeyspace() {
    return this.getTypedRuleContext(KwKeyspaceContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDropKeyspace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropIndexContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropIndex;
  }

  kwDrop() {
    return this.getTypedRuleContext(KwDropContext, 0);
  }

  kwIndex() {
    return this.getTypedRuleContext(KwIndexContext, 0);
  }

  indexName() {
    return this.getTypedRuleContext(IndexNameContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDropIndex(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateTableContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createTable;
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwTable() {
    return this.getTypedRuleContext(KwTableContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  columnDefinitionList() {
    return this.getTypedRuleContext(ColumnDefinitionListContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  withElement() {
    return this.getTypedRuleContext(WithElementContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCreateTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WithElementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_withElement;
  }

  kwWith() {
    return this.getTypedRuleContext(KwWithContext, 0);
  }

  tableOptions() {
    return this.getTypedRuleContext(TableOptionsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitWithElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ClusteringOrderColumnsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringOrderColumns;
  }

  column = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnContext);
    } else {
      return this.getTypedRuleContext(ColumnContext, i);
    }
  };

  orderDirection = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(OrderDirectionContext);
    } else {
      return this.getTypedRuleContext(OrderDirectionContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitClusteringOrderColumns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ClusteringOrderContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringOrder;
  }

  kwClustering() {
    return this.getTypedRuleContext(KwClusteringContext, 0);
  }

  kwOrder() {
    return this.getTypedRuleContext(KwOrderContext, 0);
  }

  kwBy() {
    return this.getTypedRuleContext(KwByContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  clusteringOrderColumns() {
    return this.getTypedRuleContext(ClusteringOrderColumnsContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitClusteringOrder(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableOptionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptions;
  }

  tableOptionItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TableOptionItemContext);
    } else {
      return this.getTypedRuleContext(TableOptionItemContext, i);
    }
  };

  kwAnd = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KwAndContext);
    } else {
      return this.getTypedRuleContext(KwAndContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTableOptions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableOptionItemContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptionItem;
  }

  tableOptionName() {
    return this.getTypedRuleContext(TableOptionNameContext, 0);
  }

  OPERATOR_EQ() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
  }

  tableOptionValue() {
    return this.getTypedRuleContext(TableOptionValueContext, 0);
  }

  optionHash() {
    return this.getTypedRuleContext(OptionHashContext, 0);
  }

  clusteringOrder() {
    return this.getTypedRuleContext(ClusteringOrderContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTableOptionItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableOptionNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptionName;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTableOptionName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableOptionValueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptionValue;
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  floatLiteral() {
    return this.getTypedRuleContext(FloatLiteralContext, 0);
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTableOptionValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OptionHashContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHash;
  }

  syntaxBracketLc() {
    return this.getTypedRuleContext(SyntaxBracketLcContext, 0);
  }

  optionHashItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(OptionHashItemContext);
    } else {
      return this.getTypedRuleContext(OptionHashItemContext, i);
    }
  };

  syntaxBracketRc() {
    return this.getTypedRuleContext(SyntaxBracketRcContext, 0);
  }

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitOptionHash(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OptionHashItemContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHashItem;
  }

  optionHashKey() {
    return this.getTypedRuleContext(OptionHashKeyContext, 0);
  }

  COLON() {
    return this.getToken(CqlParser.COLON, 0);
  }

  optionHashValue() {
    return this.getTypedRuleContext(OptionHashValueContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitOptionHashItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OptionHashKeyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHashKey;
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitOptionHashKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OptionHashValueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHashValue;
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  booleanLiteral() {
    return this.getTypedRuleContext(BooleanLiteralContext, 0);
  }

  floatLiteral() {
    return this.getTypedRuleContext(FloatLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitOptionHashValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnDefinitionListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnDefinitionList;
  }

  columnDefinition = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnDefinitionContext);
    } else {
      return this.getTypedRuleContext(ColumnDefinitionContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  primaryKeyElement() {
    return this.getTypedRuleContext(PrimaryKeyElementContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitColumnDefinitionList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnDefinitionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnDefinition;
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  dataType() {
    return this.getTypedRuleContext(DataTypeContext, 0);
  }

  primaryKeyColumn() {
    return this.getTypedRuleContext(PrimaryKeyColumnContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitColumnDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrimaryKeyColumnContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeyColumn;
  }

  kwPrimary() {
    return this.getTypedRuleContext(KwPrimaryContext, 0);
  }

  kwKey() {
    return this.getTypedRuleContext(KwKeyContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitPrimaryKeyColumn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrimaryKeyElementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeyElement;
  }

  kwPrimary() {
    return this.getTypedRuleContext(KwPrimaryContext, 0);
  }

  kwKey() {
    return this.getTypedRuleContext(KwKeyContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  primaryKeyDefinition() {
    return this.getTypedRuleContext(PrimaryKeyDefinitionContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitPrimaryKeyElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrimaryKeyDefinitionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeyDefinition;
  }

  singlePrimaryKey() {
    return this.getTypedRuleContext(SinglePrimaryKeyContext, 0);
  }

  compoundKey() {
    return this.getTypedRuleContext(CompoundKeyContext, 0);
  }

  compositeKey() {
    return this.getTypedRuleContext(CompositeKeyContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitPrimaryKeyDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SinglePrimaryKeyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_singlePrimaryKey;
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSinglePrimaryKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CompoundKeyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_compoundKey;
  }

  partitionKey() {
    return this.getTypedRuleContext(PartitionKeyContext, 0);
  }

  syntaxComma() {
    return this.getTypedRuleContext(SyntaxCommaContext, 0);
  }

  clusteringKeyList() {
    return this.getTypedRuleContext(ClusteringKeyListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCompoundKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CompositeKeyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_compositeKey;
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  partitionKeyList() {
    return this.getTypedRuleContext(PartitionKeyListContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  syntaxComma() {
    return this.getTypedRuleContext(SyntaxCommaContext, 0);
  }

  clusteringKeyList() {
    return this.getTypedRuleContext(ClusteringKeyListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCompositeKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartitionKeyListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_partitionKeyList;
  }

  partitionKey = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PartitionKeyContext);
    } else {
      return this.getTypedRuleContext(PartitionKeyContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitPartitionKeyList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ClusteringKeyListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringKeyList;
  }

  clusteringKey = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ClusteringKeyContext);
    } else {
      return this.getTypedRuleContext(ClusteringKeyContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitClusteringKeyList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartitionKeyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_partitionKey;
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitPartitionKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ClusteringKeyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringKey;
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitClusteringKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ApplyBatchContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_applyBatch;
  }

  kwApply() {
    return this.getTypedRuleContext(KwApplyContext, 0);
  }

  kwBatch() {
    return this.getTypedRuleContext(KwBatchContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitApplyBatch(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BeginBatchContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_beginBatch;
  }

  kwBegin() {
    return this.getTypedRuleContext(KwBeginContext, 0);
  }

  kwBatch() {
    return this.getTypedRuleContext(KwBatchContext, 0);
  }

  batchType() {
    return this.getTypedRuleContext(BatchTypeContext, 0);
  }

  usingTimestampSpec() {
    return this.getTypedRuleContext(UsingTimestampSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitBeginBatch(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BatchTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_batchType;
  }

  kwLogged() {
    return this.getTypedRuleContext(KwLoggedContext, 0);
  }

  kwUnlogged() {
    return this.getTypedRuleContext(KwUnloggedContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitBatchType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterKeyspaceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterKeyspace;
  }

  kwAlter() {
    return this.getTypedRuleContext(KwAlterContext, 0);
  }

  kwKeyspace() {
    return this.getTypedRuleContext(KwKeyspaceContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  kwWith() {
    return this.getTypedRuleContext(KwWithContext, 0);
  }

  kwReplication() {
    return this.getTypedRuleContext(KwReplicationContext, 0);
  }

  OPERATOR_EQ() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
  }

  syntaxBracketLc() {
    return this.getTypedRuleContext(SyntaxBracketLcContext, 0);
  }

  replicationList() {
    return this.getTypedRuleContext(ReplicationListContext, 0);
  }

  syntaxBracketRc() {
    return this.getTypedRuleContext(SyntaxBracketRcContext, 0);
  }

  kwAnd() {
    return this.getTypedRuleContext(KwAndContext, 0);
  }

  durableWrites() {
    return this.getTypedRuleContext(DurableWritesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAlterKeyspace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReplicationListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_replicationList;
  }

  replicationListItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ReplicationListItemContext);
    } else {
      return this.getTypedRuleContext(ReplicationListItemContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitReplicationList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReplicationListItemContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_replicationListItem;
  }

  STRING_LITERAL = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.STRING_LITERAL);
    } else {
      return this.getToken(CqlParser.STRING_LITERAL, i);
    }
  };

  COLON() {
    return this.getToken(CqlParser.COLON, 0);
  }

  DECIMAL_LITERAL() {
    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitReplicationListItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DurableWritesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_durableWrites;
  }

  kwDurableWrites() {
    return this.getTypedRuleContext(KwDurableWritesContext, 0);
  }

  OPERATOR_EQ() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
  }

  booleanLiteral() {
    return this.getTypedRuleContext(BooleanLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDurableWrites(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_use;
  }

  kwUse() {
    return this.getTypedRuleContext(KwUseContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitUse(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TruncateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_truncate;
  }

  kwTruncate() {
    return this.getTypedRuleContext(KwTruncateContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  kwTable() {
    return this.getTypedRuleContext(KwTableContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTruncate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateIndexContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createIndex;
  }

  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}

class CustomIndexContext extends CreateIndexContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwCustom() {
    return this.getTypedRuleContext(KwCustomContext, 0);
  }

  kwIndex() {
    return this.getTypedRuleContext(KwIndexContext, 0);
  }

  kwOn() {
    return this.getTypedRuleContext(KwOnContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  indexColumnSpec() {
    return this.getTypedRuleContext(IndexColumnSpecContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  kwUsing() {
    return this.getTypedRuleContext(KwUsingContext, 0);
  }

  kwStorageAttachedIndex() {
    return this.getTypedRuleContext(KwStorageAttachedIndexContext, 0);
  }

  kwSASIIndex() {
    return this.getTypedRuleContext(KwSASIIndexContext, 0);
  }

  kwSolrIndex() {
    return this.getTypedRuleContext(KwSolrIndexContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  indexName() {
    return this.getTypedRuleContext(IndexNameContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  kwWith() {
    return this.getTypedRuleContext(KwWithContext, 0);
  }

  kwOptions() {
    return this.getTypedRuleContext(KwOptionsContext, 0);
  }

  OPERATOR_EQ() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
  }

  LC_BRACKET() {
    return this.getToken(CqlParser.LC_BRACKET, 0);
  }

  RC_BRACKET() {
    return this.getToken(CqlParser.RC_BRACKET, 0);
  }

  customIndexOption = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CustomIndexOptionContext);
    } else {
      return this.getTypedRuleContext(CustomIndexOptionContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCustomIndex(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

CqlParser.CustomIndexContext = CustomIndexContext;

class SecondaryIndexContext extends CreateIndexContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwIndex() {
    return this.getTypedRuleContext(KwIndexContext, 0);
  }

  kwOn() {
    return this.getTypedRuleContext(KwOnContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  indexColumnSpec() {
    return this.getTypedRuleContext(IndexColumnSpecContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  indexName() {
    return this.getTypedRuleContext(IndexNameContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSecondaryIndex(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

CqlParser.SecondaryIndexContext = SecondaryIndexContext;

class CustomIndexOptionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_customIndexOption;
    this.caseSensitiveOption = null; // BooleanLiteralContext
    this.normalizeOption = null; // BooleanLiteralContext
    this.asciiOption = null; // BooleanLiteralContext
    this.analyzedOption = null; // BooleanLiteralContext
    this.isLiteralOption = null; // BooleanLiteralContext
    this.tokenizationEnableStemmingOption = null; // BooleanLiteralContext
    this.tokenizationNormalizeLowercaseOption = null; // BooleanLiteralContext
    this.tokenizationNormalizeUppercaseOption = null; // BooleanLiteralContext
    this.normalizeUppercaseOption = null; // BooleanLiteralContext
    this.normalizeLowercaseOption = null; // BooleanLiteralContext
    this.maxCompactionFlushMemoryInMbOption = null; // StringLiteralContext
    this.modeOption = null; // StringLiteralContext
    this.analyzerClassOption = null; // StringLiteralContext
    this.tokenizationLocaleOption = null; // StringLiteralContext
    this.tokenizationSkipStopWordsOption = null; // StringLiteralContext
  }

  kwCaseSensitive() {
    return this.getTypedRuleContext(KwCaseSensitiveContext, 0);
  }

  COLON() {
    return this.getToken(CqlParser.COLON, 0);
  }

  booleanLiteral() {
    return this.getTypedRuleContext(BooleanLiteralContext, 0);
  }

  COMMA() {
    return this.getToken(CqlParser.COMMA, 0);
  }

  kwNormalize() {
    return this.getTypedRuleContext(KwNormalizeContext, 0);
  }

  kwAscii() {
    return this.getTypedRuleContext(KwAsciiContext, 0);
  }

  kwAnalyzed() {
    return this.getTypedRuleContext(KwAnalyzedContext, 0);
  }

  kwIsLiteral() {
    return this.getTypedRuleContext(KwIsLiteralContext, 0);
  }

  kwTokenizationEnableStemming() {
    return this.getTypedRuleContext(KwTokenizationEnableStemmingContext, 0);
  }

  kwTokenizationNormalizeLowercase() {
    return this.getTypedRuleContext(KwTokenizationNormalizeLowercaseContext, 0);
  }

  kwTokenizationNormalizeUppercase() {
    return this.getTypedRuleContext(KwTokenizationNormalizeUppercaseContext, 0);
  }

  kwNormalizeUppercase() {
    return this.getTypedRuleContext(KwNormalizeUppercaseContext, 0);
  }

  kwNormalizeLowercase() {
    return this.getTypedRuleContext(KwNormalizeLowercaseContext, 0);
  }

  kwMaxCompactionFlushMemoryInMb() {
    return this.getTypedRuleContext(KwMaxCompactionFlushMemoryInMbContext, 0);
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  kwMode() {
    return this.getTypedRuleContext(KwModeContext, 0);
  }

  kwAnalyzerClass() {
    return this.getTypedRuleContext(KwAnalyzerClassContext, 0);
  }

  kwTokenizationLocale() {
    return this.getTypedRuleContext(KwTokenizationLocaleContext, 0);
  }

  kwTokenizationSkipStopWords() {
    return this.getTypedRuleContext(KwTokenizationSkipStopWordsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCustomIndexOption(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateSearchIndexContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createSearchIndex;
  }

  kwCreate() {
    return this.getTypedRuleContext(KwCreateContext, 0);
  }

  kwSearch() {
    return this.getTypedRuleContext(KwSearchContext, 0);
  }

  kwIndex() {
    return this.getTypedRuleContext(KwIndexContext, 0);
  }

  kwOn() {
    return this.getTypedRuleContext(KwOnContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  K_WITH() {
    return this.getToken(CqlParser.K_WITH, 0);
  }

  kwColumns() {
    return this.getTypedRuleContext(KwColumnsContext, 0);
  }

  searchIndexColumnList() {
    return this.getTypedRuleContext(SearchIndexColumnListContext, 0);
  }

  kwProfiles() {
    return this.getTypedRuleContext(KwProfilesContext, 0);
  }

  searchIndexProfiles() {
    return this.getTypedRuleContext(SearchIndexProfilesContext, 0);
  }

  searchIndexConfigs() {
    return this.getTypedRuleContext(SearchIndexConfigsContext, 0);
  }

  searchIndexOptions() {
    return this.getTypedRuleContext(SearchIndexOptionsContext, 0);
  }

  kwAnd = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KwAndContext);
    } else {
      return this.getTypedRuleContext(KwAndContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitCreateSearchIndex(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SearchIndexConfigsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_searchIndexConfigs;
    this.autoCommitTimeConfig = null; // DecimalLiteralContext
    this.defaultQueryFieldConfig = null; // StringLiteralContext
    this.directoryFactoryConfig = null; // DirectoryFactoryContext
    this.filterCacheLowWaterMarkConfig = null; // DecimalLiteralContext
    this.filterCacheHighWaterMarkConfig = null; // DecimalLiteralContext
    this.directoryFactoryClassConfig = null; // StringLiteralContext
    this.mergeMaxThreadCountConfig = null; // DecimalLiteralContext
    this.mergeMaxMergeCountConfig = null; // DecimalLiteralContext
    this.ramBufferSizeConfig = null; // DecimalLiteralContext
    this.realtimeConfig = null; // BooleanLiteralContext
  }

  kwConfig() {
    return this.getTypedRuleContext(KwConfigContext, 0);
  }

  LC_BRACKET() {
    return this.getToken(CqlParser.LC_BRACKET, 0);
  }

  RC_BRACKET() {
    return this.getToken(CqlParser.RC_BRACKET, 0);
  }

  kwAutoCommitTime() {
    return this.getTypedRuleContext(KwAutoCommitTimeContext, 0);
  }

  COLON = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.COLON);
    } else {
      return this.getToken(CqlParser.COLON, i);
    }
  };

  kwDefaultQueryField() {
    return this.getTypedRuleContext(KwDefaultQueryFieldContext, 0);
  }

  kwDirectoryFactory() {
    return this.getTypedRuleContext(KwDirectoryFactoryContext, 0);
  }

  kwFilterCacheLowWaterMark() {
    return this.getTypedRuleContext(KwFilterCacheLowWaterMarkContext, 0);
  }

  kwFilterCacheHighWaterMark() {
    return this.getTypedRuleContext(KwFilterCacheHighWaterMarkContext, 0);
  }

  kwDirectoryFactoryClass() {
    return this.getTypedRuleContext(KwDirectoryFactoryClassContext, 0);
  }

  kwMergeMaxThreadCount() {
    return this.getTypedRuleContext(KwMergeMaxThreadCountContext, 0);
  }

  kwMergeMaxMergeCount() {
    return this.getTypedRuleContext(KwMergeMaxMergeCountContext, 0);
  }

  kwRamBufferSize() {
    return this.getTypedRuleContext(KwRamBufferSizeContext, 0);
  }

  kwRealtime() {
    return this.getTypedRuleContext(KwRealtimeContext, 0);
  }

  decimalLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
      return this.getTypedRuleContext(DecimalLiteralContext, i);
    }
  };

  stringLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StringLiteralContext);
    } else {
      return this.getTypedRuleContext(StringLiteralContext, i);
    }
  };

  directoryFactory() {
    return this.getTypedRuleContext(DirectoryFactoryContext, 0);
  }

  booleanLiteral() {
    return this.getTypedRuleContext(BooleanLiteralContext, 0);
  }

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSearchIndexConfigs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DirectoryFactoryContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_directoryFactory;
  }

  kwStandard() {
    return this.getTypedRuleContext(KwStandardContext, 0);
  }

  kwEncrypted() {
    return this.getTypedRuleContext(KwEncryptedContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDirectoryFactory(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SearchIndexOptionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_searchIndexOptions;
    this.recoveryOption = null; // BooleanLiteralContext
    this.reindexOption = null; // BooleanLiteralContext
    this.lenientOption = null; // BooleanLiteralContext
  }

  kwOptions() {
    return this.getTypedRuleContext(KwOptionsContext, 0);
  }

  LC_BRACKET() {
    return this.getToken(CqlParser.LC_BRACKET, 0);
  }

  RC_BRACKET() {
    return this.getToken(CqlParser.RC_BRACKET, 0);
  }

  kwRecovery() {
    return this.getTypedRuleContext(KwRecoveryContext, 0);
  }

  COLON = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.COLON);
    } else {
      return this.getToken(CqlParser.COLON, i);
    }
  };

  kwReindex() {
    return this.getTypedRuleContext(KwReindexContext, 0);
  }

  kwLenient() {
    return this.getTypedRuleContext(KwLenientContext, 0);
  }

  booleanLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BooleanLiteralContext);
    } else {
      return this.getTypedRuleContext(BooleanLiteralContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSearchIndexOptions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SearchIndexProfileContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_searchIndexProfile;
  }

  kwSpaceSavingAll() {
    return this.getTypedRuleContext(KwSpaceSavingAllContext, 0);
  }

  kwSpaceSavingNoJoin() {
    return this.getTypedRuleContext(KwSpaceSavingNoJoinContext, 0);
  }

  kwSpaceSavingSlowTriePrecision() {
    return this.getTypedRuleContext(KwSpaceSavingSlowTriePrecisionContext, 0);
  }

  kwSpaceSavingNoTextField() {
    return this.getTypedRuleContext(KwSpaceSavingNoTextFieldContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSearchIndexProfile(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SearchIndexProfilesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_searchIndexProfiles;
  }

  searchIndexProfile = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SearchIndexProfileContext);
    } else {
      return this.getTypedRuleContext(SearchIndexProfileContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSearchIndexProfiles(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SearchIndexColumnListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_searchIndexColumnList;
  }

  searchIndexColumn = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SearchIndexColumnContext);
    } else {
      return this.getTypedRuleContext(SearchIndexColumnContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSearchIndexColumnList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SearchIndexColumnContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_searchIndexColumn;
    this.copyFieldOption = null; // BooleanLiteralContext
    this.docValuesOption = null; // BooleanLiteralContext
    this.excludedOption = null; // BooleanLiteralContext
    this.indexedOption = null; // BooleanLiteralContext
    this.lowerCase = null; // BooleanLiteralContext
    this.star = null; // Token
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  LC_BRACKET() {
    return this.getToken(CqlParser.LC_BRACKET, 0);
  }

  RC_BRACKET() {
    return this.getToken(CqlParser.RC_BRACKET, 0);
  }

  kwCopyField() {
    return this.getTypedRuleContext(KwCopyFieldContext, 0);
  }

  COLON = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.COLON);
    } else {
      return this.getToken(CqlParser.COLON, i);
    }
  };

  kwDocValues() {
    return this.getTypedRuleContext(KwDocValuesContext, 0);
  }

  kwExcluded() {
    return this.getTypedRuleContext(KwExcludedContext, 0);
  }

  kwIndexed() {
    return this.getTypedRuleContext(KwIndexedContext, 0);
  }

  kwLowerCase() {
    return this.getTypedRuleContext(KwLowerCaseContext, 0);
  }

  booleanLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BooleanLiteralContext);
    } else {
      return this.getTypedRuleContext(BooleanLiteralContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  STAR() {
    return this.getToken(CqlParser.STAR, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSearchIndexColumn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IndexNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexName;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIndexName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IndexColumnSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexColumnSpec;
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  indexKeysSpec() {
    return this.getTypedRuleContext(IndexKeysSpecContext, 0);
  }

  indexEntriesSSpec() {
    return this.getTypedRuleContext(IndexEntriesSSpecContext, 0);
  }

  indexFullSpec() {
    return this.getTypedRuleContext(IndexFullSpecContext, 0);
  }

  indexValuesSpec() {
    return this.getTypedRuleContext(IndexValuesSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIndexColumnSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IndexKeysSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexKeysSpec;
  }

  kwKeys() {
    return this.getTypedRuleContext(KwKeysContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIndexKeysSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IndexEntriesSSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexEntriesSSpec;
  }

  kwEntries() {
    return this.getTypedRuleContext(KwEntriesContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIndexEntriesSSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IndexFullSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexFullSpec;
  }

  kwFull() {
    return this.getTypedRuleContext(KwFullContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIndexFullSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IndexValuesSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexValuesSpec;
  }

  kwValues() {
    return this.getTypedRuleContext(KwValuesContext, 0);
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  column() {
    return this.getTypedRuleContext(ColumnContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIndexValuesSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DeleteStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_deleteStatement;
  }

  kwDelete() {
    return this.getTypedRuleContext(KwDeleteContext, 0);
  }

  fromSpec() {
    return this.getTypedRuleContext(FromSpecContext, 0);
  }

  whereSpec() {
    return this.getTypedRuleContext(WhereSpecContext, 0);
  }

  beginBatch() {
    return this.getTypedRuleContext(BeginBatchContext, 0);
  }

  deleteColumnList() {
    return this.getTypedRuleContext(DeleteColumnListContext, 0);
  }

  usingTimestampSpec() {
    return this.getTypedRuleContext(UsingTimestampSpecContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  ifSpec() {
    return this.getTypedRuleContext(IfSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDeleteStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DeleteColumnListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_deleteColumnList;
  }

  deleteColumnItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DeleteColumnItemContext);
    } else {
      return this.getTypedRuleContext(DeleteColumnItemContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDeleteColumnList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DeleteColumnItemContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_deleteColumnItem;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  LS_BRACKET() {
    return this.getToken(CqlParser.LS_BRACKET, 0);
  }

  RS_BRACKET() {
    return this.getToken(CqlParser.RS_BRACKET, 0);
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  decimalLiteral() {
    return this.getTypedRuleContext(DecimalLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDeleteColumnItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UpdateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_update;
  }

  kwUpdate() {
    return this.getTypedRuleContext(KwUpdateContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  kwSet() {
    return this.getTypedRuleContext(KwSetContext, 0);
  }

  assignments() {
    return this.getTypedRuleContext(AssignmentsContext, 0);
  }

  whereSpec() {
    return this.getTypedRuleContext(WhereSpecContext, 0);
  }

  beginBatch() {
    return this.getTypedRuleContext(BeginBatchContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  usingTtlTimestamp() {
    return this.getTypedRuleContext(UsingTtlTimestampContext, 0);
  }

  ifExist() {
    return this.getTypedRuleContext(IfExistContext, 0);
  }

  ifSpec() {
    return this.getTypedRuleContext(IfSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitUpdate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IfSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifSpec;
  }

  kwIf() {
    return this.getTypedRuleContext(KwIfContext, 0);
  }

  ifConditionList() {
    return this.getTypedRuleContext(IfConditionListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIfSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IfConditionListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifConditionList;
  }

  ifCondition = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IfConditionContext);
    } else {
      return this.getTypedRuleContext(IfConditionContext, i);
    }
  };

  kwAnd = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KwAndContext);
    } else {
      return this.getTypedRuleContext(KwAndContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIfConditionList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IfConditionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifCondition;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  OPERATOR_EQ() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIfCondition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AssignmentsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignments;
  }

  assignmentElement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AssignmentElementContext);
    } else {
      return this.getTypedRuleContext(AssignmentElementContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAssignments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AssignmentElementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentElement;
  }

  id = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdContext);
    } else {
      return this.getTypedRuleContext(IdContext, i);
    }
  };

  OPERATOR_EQ() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  assignmentMap() {
    return this.getTypedRuleContext(AssignmentMapContext, 0);
  }

  assignmentSet() {
    return this.getTypedRuleContext(AssignmentSetContext, 0);
  }

  assignmentList() {
    return this.getTypedRuleContext(AssignmentListContext, 0);
  }

  decimalLiteral() {
    return this.getTypedRuleContext(DecimalLiteralContext, 0);
  }

  PLUS() {
    return this.getToken(CqlParser.PLUS, 0);
  }

  MINUS() {
    return this.getToken(CqlParser.MINUS, 0);
  }

  syntaxBracketLs() {
    return this.getTypedRuleContext(SyntaxBracketLsContext, 0);
  }

  syntaxBracketRs() {
    return this.getTypedRuleContext(SyntaxBracketRsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAssignmentElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AssignmentSetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentSet;
  }

  syntaxBracketLc() {
    return this.getTypedRuleContext(SyntaxBracketLcContext, 0);
  }

  syntaxBracketRc() {
    return this.getTypedRuleContext(SyntaxBracketRcContext, 0);
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAssignmentSet(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AssignmentMapContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentMap;
  }

  syntaxBracketLc() {
    return this.getTypedRuleContext(SyntaxBracketLcContext, 0);
  }

  syntaxBracketRc() {
    return this.getTypedRuleContext(SyntaxBracketRcContext, 0);
  }

  constant = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ConstantContext);
    } else {
      return this.getTypedRuleContext(ConstantContext, i);
    }
  };

  syntaxColon = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxColonContext);
    } else {
      return this.getTypedRuleContext(SyntaxColonContext, i);
    }
  };

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAssignmentMap(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AssignmentMapExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentMapExpression;
  }

  syntaxBracketLc() {
    return this.getTypedRuleContext(SyntaxBracketLcContext, 0);
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  syntaxBracketRc() {
    return this.getTypedRuleContext(SyntaxBracketRcContext, 0);
  }

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAssignmentMapExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AssignmentListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentList;
  }

  syntaxBracketLs() {
    return this.getTypedRuleContext(SyntaxBracketLsContext, 0);
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  syntaxBracketRs() {
    return this.getTypedRuleContext(SyntaxBracketRsContext, 0);
  }

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAssignmentList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AssignmentTupleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentTuple;
  }

  syntaxBracketLr() {
    return this.getTypedRuleContext(SyntaxBracketLrContext, 0);
  }

  syntaxBracketRr() {
    return this.getTypedRuleContext(SyntaxBracketRrContext, 0);
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  assignmentTuple = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AssignmentTupleContext);
    } else {
      return this.getTypedRuleContext(AssignmentTupleContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAssignmentTuple(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class InsertContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_insert;
  }

  kwInsert() {
    return this.getTypedRuleContext(KwInsertContext, 0);
  }

  kwInto() {
    return this.getTypedRuleContext(KwIntoContext, 0);
  }

  table() {
    return this.getTypedRuleContext(TableContext, 0);
  }

  insertValuesSpec() {
    return this.getTypedRuleContext(InsertValuesSpecContext, 0);
  }

  beginBatch() {
    return this.getTypedRuleContext(BeginBatchContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  insertColumnSpec() {
    return this.getTypedRuleContext(InsertColumnSpecContext, 0);
  }

  ifNotExist() {
    return this.getTypedRuleContext(IfNotExistContext, 0);
  }

  usingTtlTimestamp() {
    return this.getTypedRuleContext(UsingTtlTimestampContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitInsert(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UsingTtlTimestampContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_usingTtlTimestamp;
  }

  kwUsing() {
    return this.getTypedRuleContext(KwUsingContext, 0);
  }

  ttl() {
    return this.getTypedRuleContext(TtlContext, 0);
  }

  kwAnd() {
    return this.getTypedRuleContext(KwAndContext, 0);
  }

  timestamp() {
    return this.getTypedRuleContext(TimestampContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitUsingTtlTimestamp(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TimestampContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_timestamp;
  }

  kwTimestamp() {
    return this.getTypedRuleContext(KwTimestampContext, 0);
  }

  decimalLiteral() {
    return this.getTypedRuleContext(DecimalLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTimestamp(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TtlContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ttl;
  }

  kwTtl() {
    return this.getTypedRuleContext(KwTtlContext, 0);
  }

  decimalLiteral() {
    return this.getTypedRuleContext(DecimalLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTtl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UsingTimestampSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_usingTimestampSpec;
  }

  kwUsing() {
    return this.getTypedRuleContext(KwUsingContext, 0);
  }

  timestamp() {
    return this.getTypedRuleContext(TimestampContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitUsingTimestampSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IfNotExistContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifNotExist;
  }

  kwIf() {
    return this.getTypedRuleContext(KwIfContext, 0);
  }

  kwNot() {
    return this.getTypedRuleContext(KwNotContext, 0);
  }

  kwExists() {
    return this.getTypedRuleContext(KwExistsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIfNotExist(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IfExistContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifExist;
  }

  kwIf() {
    return this.getTypedRuleContext(KwIfContext, 0);
  }

  kwExists() {
    return this.getTypedRuleContext(KwExistsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitIfExist(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class InsertValuesSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_insertValuesSpec;
  }

  kwValues() {
    return this.getTypedRuleContext(KwValuesContext, 0);
  }

  LR_BRACKET() {
    return this.getToken(CqlParser.LR_BRACKET, 0);
  }

  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }

  RR_BRACKET() {
    return this.getToken(CqlParser.RR_BRACKET, 0);
  }

  kwJson() {
    return this.getTypedRuleContext(KwJsonContext, 0);
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitInsertValuesSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class InsertColumnSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_insertColumnSpec;
  }

  LR_BRACKET() {
    return this.getToken(CqlParser.LR_BRACKET, 0);
  }

  columnList() {
    return this.getTypedRuleContext(ColumnListContext, 0);
  }

  RR_BRACKET() {
    return this.getToken(CqlParser.RR_BRACKET, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitInsertColumnSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnList;
  }

  column = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnContext);
    } else {
      return this.getTypedRuleContext(ColumnContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitColumnList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExpressionListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_expressionList;
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitExpressionList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_expression;
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  assignmentMap() {
    return this.getTypedRuleContext(AssignmentMapContext, 0);
  }

  assignmentSet() {
    return this.getTypedRuleContext(AssignmentSetContext, 0);
  }

  assignmentList() {
    return this.getTypedRuleContext(AssignmentListContext, 0);
  }

  assignmentTuple() {
    return this.getTypedRuleContext(AssignmentTupleContext, 0);
  }

  assignmentMapExpression() {
    return this.getTypedRuleContext(AssignmentMapExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_select;
  }

  kwSelect() {
    return this.getTypedRuleContext(KwSelectContext, 0);
  }

  selectElements() {
    return this.getTypedRuleContext(SelectElementsContext, 0);
  }

  fromSpec() {
    return this.getTypedRuleContext(FromSpecContext, 0);
  }

  distinctSpec() {
    return this.getTypedRuleContext(DistinctSpecContext, 0);
  }

  kwJson() {
    return this.getTypedRuleContext(KwJsonContext, 0);
  }

  whereSpec() {
    return this.getTypedRuleContext(WhereSpecContext, 0);
  }

  orderSpec() {
    return this.getTypedRuleContext(OrderSpecContext, 0);
  }

  limitSpec() {
    return this.getTypedRuleContext(LimitSpecContext, 0);
  }

  allowFilteringSpec() {
    return this.getTypedRuleContext(AllowFilteringSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSelect(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AllowFilteringSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_allowFilteringSpec;
  }

  kwAllow() {
    return this.getTypedRuleContext(KwAllowContext, 0);
  }

  kwFiltering() {
    return this.getTypedRuleContext(KwFilteringContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAllowFilteringSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LimitSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_limitSpec;
  }

  kwLimit() {
    return this.getTypedRuleContext(KwLimitContext, 0);
  }

  decimalLiteral() {
    return this.getTypedRuleContext(DecimalLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitLimitSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FromSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_fromSpec;
  }

  kwFrom() {
    return this.getTypedRuleContext(KwFromContext, 0);
  }

  fromSpecElement() {
    return this.getTypedRuleContext(FromSpecElementContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitFromSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FromSpecElementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_fromSpecElement;
  }

  id = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdContext);
    } else {
      return this.getTypedRuleContext(IdContext, i);
    }
  };

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitFromSpecElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OrderSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orderSpec;
  }

  kwOrder() {
    return this.getTypedRuleContext(KwOrderContext, 0);
  }

  kwBy() {
    return this.getTypedRuleContext(KwByContext, 0);
  }

  orderSpecElement() {
    return this.getTypedRuleContext(OrderSpecElementContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitOrderSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OrderSpecElementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orderSpecElement;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  kwAsc() {
    return this.getTypedRuleContext(KwAscContext, 0);
  }

  kwDesc() {
    return this.getTypedRuleContext(KwDescContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitOrderSpecElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WhereSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_whereSpec;
  }

  kwWhere() {
    return this.getTypedRuleContext(KwWhereContext, 0);
  }

  relationElements() {
    return this.getTypedRuleContext(RelationElementsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitWhereSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DistinctSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_distinctSpec;
  }

  kwDistinct() {
    return this.getTypedRuleContext(KwDistinctContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDistinctSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectElementsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_selectElements;
    this.star = null; // Token
  }

  selectElement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SelectElementContext);
    } else {
      return this.getTypedRuleContext(SelectElementContext, i);
    }
  };

  STAR() {
    return this.getToken(CqlParser.STAR, 0);
  }

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSelectElements(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectElementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_selectElement;
  }

  id = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdContext);
    } else {
      return this.getTypedRuleContext(IdContext, i);
    }
  };

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  STAR() {
    return this.getToken(CqlParser.STAR, 0);
  }

  kwAs() {
    return this.getTypedRuleContext(KwAsContext, 0);
  }

  functionCall() {
    return this.getTypedRuleContext(FunctionCallContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSelectElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RelationElementsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationElements;
  }

  relationElement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RelationElementContext);
    } else {
      return this.getTypedRuleContext(RelationElementContext, i);
    }
  };

  kwAnd = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KwAndContext);
    } else {
      return this.getTypedRuleContext(KwAndContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitRelationElements(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RelationElementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationElement;
  }

  id = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdContext);
    } else {
      return this.getTypedRuleContext(IdContext, i);
    }
  };

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  OPERATOR_EQ() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
  }

  OPERATOR_LT() {
    return this.getToken(CqlParser.OPERATOR_LT, 0);
  }

  OPERATOR_GT() {
    return this.getToken(CqlParser.OPERATOR_GT, 0);
  }

  OPERATOR_LTE() {
    return this.getToken(CqlParser.OPERATOR_LTE, 0);
  }

  OPERATOR_GTE() {
    return this.getToken(CqlParser.OPERATOR_GTE, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  functionCall = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(FunctionCallContext);
    } else {
      return this.getTypedRuleContext(FunctionCallContext, i);
    }
  };

  kwIn() {
    return this.getTypedRuleContext(KwInContext, 0);
  }

  LR_BRACKET = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.LR_BRACKET);
    } else {
      return this.getToken(CqlParser.LR_BRACKET, i);
    }
  };

  RR_BRACKET = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.RR_BRACKET);
    } else {
      return this.getToken(CqlParser.RR_BRACKET, i);
    }
  };

  functionArgs() {
    return this.getTypedRuleContext(FunctionArgsContext, 0);
  }

  assignmentTuple = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AssignmentTupleContext);
    } else {
      return this.getTypedRuleContext(AssignmentTupleContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  relalationContainsKey() {
    return this.getTypedRuleContext(RelalationContainsKeyContext, 0);
  }

  relalationContains() {
    return this.getTypedRuleContext(RelalationContainsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitRelationElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RelalationContainsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relalationContains;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  kwContains() {
    return this.getTypedRuleContext(KwContainsContext, 0);
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitRelalationContains(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RelalationContainsKeyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relalationContainsKey;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  kwContains() {
    return this.getTypedRuleContext(KwContainsContext, 0);
  }

  kwKey() {
    return this.getTypedRuleContext(KwKeyContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitRelalationContainsKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FunctionCallContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_functionCall;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  LR_BRACKET() {
    return this.getToken(CqlParser.LR_BRACKET, 0);
  }

  STAR() {
    return this.getToken(CqlParser.STAR, 0);
  }

  RR_BRACKET() {
    return this.getToken(CqlParser.RR_BRACKET, 0);
  }

  functionArgs() {
    return this.getTypedRuleContext(FunctionArgsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitFunctionCall(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FunctionArgsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_functionArgs;
  }

  constant = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ConstantContext);
    } else {
      return this.getTypedRuleContext(ConstantContext, i);
    }
  };

  id = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdContext);
    } else {
      return this.getTypedRuleContext(IdContext, i);
    }
  };

  functionCall = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(FunctionCallContext);
    } else {
      return this.getTypedRuleContext(FunctionCallContext, i);
    }
  };

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitFunctionArgs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConstantContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constant;
  }

  UUID() {
    return this.getToken(CqlParser.UUID, 0);
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  decimalLiteral() {
    return this.getTypedRuleContext(DecimalLiteralContext, 0);
  }

  floatLiteral() {
    return this.getTypedRuleContext(FloatLiteralContext, 0);
  }

  hexadecimalLiteral() {
    return this.getTypedRuleContext(HexadecimalLiteralContext, 0);
  }

  booleanLiteral() {
    return this.getTypedRuleContext(BooleanLiteralContext, 0);
  }

  codeBlock() {
    return this.getTypedRuleContext(CodeBlockContext, 0);
  }

  kwNull() {
    return this.getTypedRuleContext(KwNullContext, 0);
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitConstant(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DecimalLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_decimalLiteral;
  }

  DECIMAL_LITERAL() {
    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDecimalLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FloatLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_floatLiteral;
  }

  DECIMAL_LITERAL() {
    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
  }

  FLOAT_LITERAL() {
    return this.getToken(CqlParser.FLOAT_LITERAL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitFloatLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StringLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_stringLiteral;
  }

  STRING_LITERAL() {
    return this.getToken(CqlParser.STRING_LITERAL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitStringLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BooleanLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_booleanLiteral;
  }

  K_TRUE() {
    return this.getToken(CqlParser.K_TRUE, 0);
  }

  K_FALSE() {
    return this.getToken(CqlParser.K_FALSE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitBooleanLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HexadecimalLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_hexadecimalLiteral;
  }

  HEXADECIMAL_LITERAL() {
    return this.getToken(CqlParser.HEXADECIMAL_LITERAL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitHexadecimalLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KeyspaceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_keyspace;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  DQUOTE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.DQUOTE);
    } else {
      return this.getToken(CqlParser.DQUOTE, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKeyspace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_table;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  DQUOTE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.DQUOTE);
    } else {
      return this.getToken(CqlParser.DQUOTE, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_column;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  DQUOTE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CqlParser.DQUOTE);
    } else {
      return this.getToken(CqlParser.DQUOTE, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitColumn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DataTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataType;
  }

  dataTypeName() {
    return this.getTypedRuleContext(DataTypeNameContext, 0);
  }

  dataTypeDefinition() {
    return this.getTypedRuleContext(DataTypeDefinitionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDataType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DataTypeNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeName;
  }

  type() {
    return this.getTypedRuleContext(TypeContext, 0);
  }

  keyspace() {
    return this.getTypedRuleContext(KeyspaceContext, 0);
  }

  DOT() {
    return this.getToken(CqlParser.DOT, 0);
  }

  STRING_LITERAL() {
    return this.getToken(CqlParser.STRING_LITERAL, 0);
  }

  K_TIMESTAMP() {
    return this.getToken(CqlParser.K_TIMESTAMP, 0);
  }

  K_SET() {
    return this.getToken(CqlParser.K_SET, 0);
  }

  K_ASCII() {
    return this.getToken(CqlParser.K_ASCII, 0);
  }

  K_BIGINT() {
    return this.getToken(CqlParser.K_BIGINT, 0);
  }

  K_BLOB() {
    return this.getToken(CqlParser.K_BLOB, 0);
  }

  K_BOOLEAN() {
    return this.getToken(CqlParser.K_BOOLEAN, 0);
  }

  K_COUNTER() {
    return this.getToken(CqlParser.K_COUNTER, 0);
  }

  K_DATE() {
    return this.getToken(CqlParser.K_DATE, 0);
  }

  K_DECIMAL() {
    return this.getToken(CqlParser.K_DECIMAL, 0);
  }

  K_DOUBLE() {
    return this.getToken(CqlParser.K_DOUBLE, 0);
  }

  K_FLOAT() {
    return this.getToken(CqlParser.K_FLOAT, 0);
  }

  K_FROZEN() {
    return this.getToken(CqlParser.K_FROZEN, 0);
  }

  K_INET() {
    return this.getToken(CqlParser.K_INET, 0);
  }

  K_INT() {
    return this.getToken(CqlParser.K_INT, 0);
  }

  K_LIST() {
    return this.getToken(CqlParser.K_LIST, 0);
  }

  K_MAP() {
    return this.getToken(CqlParser.K_MAP, 0);
  }

  K_SMALLINT() {
    return this.getToken(CqlParser.K_SMALLINT, 0);
  }

  K_TEXT() {
    return this.getToken(CqlParser.K_TEXT, 0);
  }

  K_TIME() {
    return this.getToken(CqlParser.K_TIME, 0);
  }

  K_TIMEUUID() {
    return this.getToken(CqlParser.K_TIMEUUID, 0);
  }

  K_TINYINT() {
    return this.getToken(CqlParser.K_TINYINT, 0);
  }

  K_TUPLE() {
    return this.getToken(CqlParser.K_TUPLE, 0);
  }

  K_VARCHAR() {
    return this.getToken(CqlParser.K_VARCHAR, 0);
  }

  K_VARINT() {
    return this.getToken(CqlParser.K_VARINT, 0);
  }

  K_UUID() {
    return this.getToken(CqlParser.K_UUID, 0);
  }

  K_VECTOR() {
    return this.getToken(CqlParser.K_VECTOR, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDataTypeName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DataTypeDefinitionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeDefinition;
  }

  syntaxBracketLa() {
    return this.getTypedRuleContext(SyntaxBracketLaContext, 0);
  }

  dataType = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DataTypeContext);
    } else {
      return this.getTypedRuleContext(DataTypeContext, i);
    }
  };

  syntaxBracketRa() {
    return this.getTypedRuleContext(SyntaxBracketRaContext, 0);
  }

  syntaxComma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
      return this.getTypedRuleContext(SyntaxCommaContext, i);
    }
  };

  decimalLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
      return this.getTypedRuleContext(DecimalLiteralContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitDataTypeDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OrderDirectionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orderDirection;
  }

  kwAsc() {
    return this.getTypedRuleContext(KwAscContext, 0);
  }

  kwDesc() {
    return this.getTypedRuleContext(KwDescContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitOrderDirection(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RoleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_role;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitRole(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_trigger;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTrigger(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerClassContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_triggerClass;
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitTriggerClass(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MaterializedViewContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_materializedView;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitMaterializedView(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_type;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AggregateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_aggregate;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitAggregate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FunctionStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_functionStatement;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitFunctionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LanguageContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_language;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitLanguage(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UserContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_user;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitUser(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PasswordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_password;
  }

  stringLiteral() {
    return this.getTypedRuleContext(StringLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitPassword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HashKeyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_hashKey;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitHashKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ParamContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_param;
  }

  paramName() {
    return this.getTypedRuleContext(ParamNameContext, 0);
  }

  dataType() {
    return this.getTypedRuleContext(DataTypeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitParam(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ParamNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_paramName;
  }

  id() {
    return this.getTypedRuleContext(IdContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitParamName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAddContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAdd;
  }

  K_ADD() {
    return this.getToken(CqlParser.K_ADD, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAdd(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAggregateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAggregate;
  }

  K_AGGREGATE() {
    return this.getToken(CqlParser.K_AGGREGATE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAggregate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAllContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAll;
  }

  K_ALL() {
    return this.getToken(CqlParser.K_ALL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAll(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAllPermissionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAllPermissions;
  }

  K_ALL() {
    return this.getToken(CqlParser.K_ALL, 0);
  }

  K_PERMISSIONS() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAllPermissions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAllowContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAllow;
  }

  K_ALLOW() {
    return this.getToken(CqlParser.K_ALLOW, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAllow(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAlterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAlter;
  }

  K_ALTER() {
    return this.getToken(CqlParser.K_ALTER, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAlter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAndContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAnd;
  }

  K_AND() {
    return this.getToken(CqlParser.K_AND, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAnd(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwApplyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwApply;
  }

  K_APPLY() {
    return this.getToken(CqlParser.K_APPLY, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwApply(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAs;
  }

  K_AS() {
    return this.getToken(CqlParser.K_AS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAscContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAsc;
  }

  K_ASC() {
    return this.getToken(CqlParser.K_ASC, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAsc(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAuthorizeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAuthorize;
  }

  K_AUTHORIZE() {
    return this.getToken(CqlParser.K_AUTHORIZE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAuthorize(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwBatchContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwBatch;
  }

  K_BATCH() {
    return this.getToken(CqlParser.K_BATCH, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwBatch(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwBeginContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwBegin;
  }

  K_BEGIN() {
    return this.getToken(CqlParser.K_BEGIN, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwBegin(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwByContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwBy;
  }

  K_BY() {
    return this.getToken(CqlParser.K_BY, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwBy(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwCalledContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCalled;
  }

  K_CALLED() {
    return this.getToken(CqlParser.K_CALLED, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwCalled(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwClusteringContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwClustering;
  }

  K_CLUSTERING() {
    return this.getToken(CqlParser.K_CLUSTERING, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwClustering(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwCompactContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCompact;
  }

  K_COMPACT() {
    return this.getToken(CqlParser.K_COMPACT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwCompact(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwContainsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwContains;
  }

  K_CONTAINS() {
    return this.getToken(CqlParser.K_CONTAINS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwContains(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwCreateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCreate;
  }

  K_CREATE() {
    return this.getToken(CqlParser.K_CREATE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwCreate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwDeleteContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDelete;
  }

  K_DELETE() {
    return this.getToken(CqlParser.K_DELETE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwDelete(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwDescContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDesc;
  }

  K_DESC() {
    return this.getToken(CqlParser.K_DESC, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwDesc(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwDescibeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDescibe;
  }

  K_DESCRIBE() {
    return this.getToken(CqlParser.K_DESCRIBE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwDescibe(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwDistinctContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDistinct;
  }

  K_DISTINCT() {
    return this.getToken(CqlParser.K_DISTINCT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwDistinct(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwDropContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDrop;
  }

  K_DROP() {
    return this.getToken(CqlParser.K_DROP, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwDrop(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwDurableWritesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDurableWrites;
  }

  K_DURABLE_WRITES() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwDurableWrites(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwEntriesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwEntries;
  }

  K_ENTRIES() {
    return this.getToken(CqlParser.K_ENTRIES, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwEntries(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwExecuteContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwExecute;
  }

  K_EXECUTE() {
    return this.getToken(CqlParser.K_EXECUTE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwExecute(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwExistsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwExists;
  }

  K_EXISTS() {
    return this.getToken(CqlParser.K_EXISTS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwExists(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwFilteringContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFiltering;
  }

  K_FILTERING() {
    return this.getToken(CqlParser.K_FILTERING, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwFiltering(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwFinalfuncContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFinalfunc;
  }

  K_FINALFUNC() {
    return this.getToken(CqlParser.K_FINALFUNC, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwFinalfunc(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwFromContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFrom;
  }

  K_FROM() {
    return this.getToken(CqlParser.K_FROM, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwFrom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwFullContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFull;
  }

  K_FULL() {
    return this.getToken(CqlParser.K_FULL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwFull(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwFunctionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFunction;
  }

  K_FUNCTION() {
    return this.getToken(CqlParser.K_FUNCTION, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwFunctionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFunctions;
  }

  K_FUNCTIONS() {
    return this.getToken(CqlParser.K_FUNCTIONS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwFunctions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwGrantContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwGrant;
  }

  K_GRANT() {
    return this.getToken(CqlParser.K_GRANT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwGrant(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwIfContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIf;
  }

  K_IF() {
    return this.getToken(CqlParser.K_IF, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwIf(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwInContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIn;
  }

  K_IN() {
    return this.getToken(CqlParser.K_IN, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwIn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwIndexContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIndex;
  }

  K_INDEX() {
    return this.getToken(CqlParser.K_INDEX, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwIndex(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwCustomContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCustom;
  }

  K_CUSTOM() {
    return this.getToken(CqlParser.K_CUSTOM, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwCustom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSearchContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSearch;
  }

  K_SEARCH() {
    return this.getToken(CqlParser.K_SEARCH, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSearch(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAsciiContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAscii;
  }

  K_ASCII() {
    return this.getToken(CqlParser.K_ASCII, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAscii(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwNormalizeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNormalize;
  }

  K_NORMALIZE() {
    return this.getToken(CqlParser.K_NORMALIZE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwNormalize(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAnalyzedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAnalyzed;
  }

  K_ANALYZED() {
    return this.getToken(CqlParser.K_ANALYZED, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAnalyzed(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwIsLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIsLiteral;
  }

  K_IS_LITERAL() {
    return this.getToken(CqlParser.K_IS_LITERAL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwIsLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwMaxCompactionFlushMemoryInMbContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwMaxCompactionFlushMemoryInMb;
  }

  K_MAX_COMPACTION_FLUSH_MEMORY_IN_MB() {
    return this.getToken(CqlParser.K_MAX_COMPACTION_FLUSH_MEMORY_IN_MB, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwMaxCompactionFlushMemoryInMb(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTokenizationEnableStemmingContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTokenizationEnableStemming;
  }

  K_TOKENIZATION_ENABLE_STEMMING() {
    return this.getToken(CqlParser.K_TOKENIZATION_ENABLE_STEMMING, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTokenizationEnableStemming(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTokenizationSkipStopWordsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTokenizationSkipStopWords;
  }

  K_TOKENIZATION_SKIP_STOP_WORDS() {
    return this.getToken(CqlParser.K_TOKENIZATION_SKIP_STOP_WORDS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTokenizationSkipStopWords(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTokenizationLocaleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTokenizationLocale;
  }

  K_TOKENIZATION_LOCALE() {
    return this.getToken(CqlParser.K_TOKENIZATION_LOCALE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTokenizationLocale(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTokenizationNormalizeLowercaseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTokenizationNormalizeLowercase;
  }

  K_TOKENIZATION_NORMALIZE_LOWERCASE() {
    return this.getToken(CqlParser.K_TOKENIZATION_NORMALIZE_LOWERCASE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTokenizationNormalizeLowercase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTokenizationNormalizeUppercaseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTokenizationNormalizeUppercase;
  }

  K_TOKENIZATION_NORMALIZE_UPPERCASE() {
    return this.getToken(CqlParser.K_TOKENIZATION_NORMALIZE_UPPERCASE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTokenizationNormalizeUppercase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwNormalizeLowercaseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNormalizeLowercase;
  }

  K_NORMALIZE_LOWERCASE() {
    return this.getToken(CqlParser.K_NORMALIZE_LOWERCASE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwNormalizeLowercase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwNormalizeUppercaseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNormalizeUppercase;
  }

  K_NORMALIZE_UPPERCASE() {
    return this.getToken(CqlParser.K_NORMALIZE_UPPERCASE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwNormalizeUppercase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwModeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwMode;
  }

  K_MODE() {
    return this.getToken(CqlParser.K_MODE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwMode(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAnalyzerClassContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAnalyzerClass;
  }

  K_ANALYZER_CLASS() {
    return this.getToken(CqlParser.K_ANALYZER_CLASS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAnalyzerClass(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwStorageAttachedIndexContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwStorageAttachedIndex;
  }

  K_STORAGE_ATTACHED_INDEX() {
    return this.getToken(CqlParser.K_STORAGE_ATTACHED_INDEX, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwStorageAttachedIndex(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSolrIndexContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSolrIndex;
  }

  K_SOLR_INDEX() {
    return this.getToken(CqlParser.K_SOLR_INDEX, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSolrIndex(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSASIIndexContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSASIIndex;
  }

  K_SASI_INDEX() {
    return this.getToken(CqlParser.K_SASI_INDEX, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSASIIndex(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSpaceSavingNoJoinContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSpaceSavingNoJoin;
  }

  K_SPACE_SAVING_NO_JOIN() {
    return this.getToken(CqlParser.K_SPACE_SAVING_NO_JOIN, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSpaceSavingNoJoin(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSpaceSavingAllContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSpaceSavingAll;
  }

  K_SPACE_SAVING_ALL() {
    return this.getToken(CqlParser.K_SPACE_SAVING_ALL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSpaceSavingAll(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSpaceSavingSlowTriePrecisionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSpaceSavingSlowTriePrecision;
  }

  K_SPACE_SAVING_SLOW_TRIE_PRECISION() {
    return this.getToken(CqlParser.K_SPACE_SAVING_SLOW_TRIE_PRECISION, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSpaceSavingSlowTriePrecision(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSpaceSavingNoTextFieldContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSpaceSavingNoTextField;
  }

  K_SPACE_SAVING_NO_TEXT_FIELD() {
    return this.getToken(CqlParser.K_SPACE_SAVING_NO_TEXT_FIELD, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSpaceSavingNoTextField(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwCopyFieldContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCopyField;
  }

  K_COPY_FIELD() {
    return this.getToken(CqlParser.K_COPY_FIELD, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwCopyField(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwDocValuesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDocValues;
  }

  K_DOC_VALUES() {
    return this.getToken(CqlParser.K_DOC_VALUES, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwDocValues(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwExcludedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwExcluded;
  }

  K_EXCLUDED() {
    return this.getToken(CqlParser.K_EXCLUDED, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwExcluded(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwIndexedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIndexed;
  }

  K_INDEXED() {
    return this.getToken(CqlParser.K_INDEXED, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwIndexed(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwLowerCaseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLowerCase;
  }

  K_LOWERCASE() {
    return this.getToken(CqlParser.K_LOWERCASE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwLowerCase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwColumnsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwColumns;
  }

  K_COLUMNS() {
    return this.getToken(CqlParser.K_COLUMNS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwColumns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwProfilesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwProfiles;
  }

  K_PROFILES() {
    return this.getToken(CqlParser.K_PROFILES, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwProfiles(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwConfigContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwConfig;
  }

  K_CONFIG() {
    return this.getToken(CqlParser.K_CONFIG, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwConfig(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwAutoCommitTimeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAutoCommitTime;
  }

  K_AUTOCOMMIT_TIME() {
    return this.getToken(CqlParser.K_AUTOCOMMIT_TIME, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwAutoCommitTime(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwDefaultQueryFieldContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDefaultQueryField;
  }

  K_DEFAULT_QUERY_FIELD() {
    return this.getToken(CqlParser.K_DEFAULT_QUERY_FIELD, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwDefaultQueryField(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwDirectoryFactoryContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDirectoryFactory;
  }

  K_DIRECTORY_FACTORY() {
    return this.getToken(CqlParser.K_DIRECTORY_FACTORY, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwDirectoryFactory(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwFilterCacheLowWaterMarkContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFilterCacheLowWaterMark;
  }

  K_FILTER_CACHE_LOW_WATERMARK() {
    return this.getToken(CqlParser.K_FILTER_CACHE_LOW_WATERMARK, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwFilterCacheLowWaterMark(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwFilterCacheHighWaterMarkContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFilterCacheHighWaterMark;
  }

  K_FILTER_CACHE_HIGH_WATERMARK() {
    return this.getToken(CqlParser.K_FILTER_CACHE_HIGH_WATERMARK, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwFilterCacheHighWaterMark(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwDirectoryFactoryClassContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDirectoryFactoryClass;
  }

  K_DIRECTORY_FACTORY_CLASS() {
    return this.getToken(CqlParser.K_DIRECTORY_FACTORY_CLASS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwDirectoryFactoryClass(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwMergeMaxThreadCountContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwMergeMaxThreadCount;
  }

  K_MERGE_MAX_THREAD_COUNT() {
    return this.getToken(CqlParser.K_MERGE_MAX_THREAD_COUNT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwMergeMaxThreadCount(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwMergeMaxMergeCountContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwMergeMaxMergeCount;
  }

  K_MERGE_MAX_MERGE_COUNT() {
    return this.getToken(CqlParser.K_MERGE_MAX_MERGE_COUNT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwMergeMaxMergeCount(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwRamBufferSizeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRamBufferSize;
  }

  K_RAM_BUFFER_SIZE() {
    return this.getToken(CqlParser.K_RAM_BUFFER_SIZE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwRamBufferSize(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwRealtimeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRealtime;
  }

  K_REALTIME() {
    return this.getToken(CqlParser.K_REALTIME, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwRealtime(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwRecoveryContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRecovery;
  }

  K_RECOVERY() {
    return this.getToken(CqlParser.K_RECOVERY, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwRecovery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwReindexContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwReindex;
  }

  K_REINDEX() {
    return this.getToken(CqlParser.K_REINDEX, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwReindex(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwLenientContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLenient;
  }

  K_LENIENT() {
    return this.getToken(CqlParser.K_LENIENT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwLenient(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwStandardContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwStandard;
  }

  K_STANDARD() {
    return this.getToken(CqlParser.K_STANDARD, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwStandard(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwEncryptedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwEncrypted;
  }

  K_ENCRYPTED() {
    return this.getToken(CqlParser.K_ENCRYPTED, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwEncrypted(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwCaseSensitiveContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCaseSensitive;
  }

  K_CASE_SENITIVE() {
    return this.getToken(CqlParser.K_CASE_SENITIVE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwCaseSensitive(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwInitcondContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInitcond;
  }

  K_INITCOND() {
    return this.getToken(CqlParser.K_INITCOND, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwInitcond(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwInputContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInput;
  }

  K_INPUT() {
    return this.getToken(CqlParser.K_INPUT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwInput(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwInsertContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInsert;
  }

  K_INSERT() {
    return this.getToken(CqlParser.K_INSERT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwInsert(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwIntoContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInto;
  }

  K_INTO() {
    return this.getToken(CqlParser.K_INTO, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwInto(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwIsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIs;
  }

  K_IS() {
    return this.getToken(CqlParser.K_IS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwIs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwJsonContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwJson;
  }

  K_JSON() {
    return this.getToken(CqlParser.K_JSON, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwJson(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwKeyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKey;
  }

  K_KEY() {
    return this.getToken(CqlParser.K_KEY, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwKeysContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKeys;
  }

  K_KEYS() {
    return this.getToken(CqlParser.K_KEYS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwKeys(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwKeyspaceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKeyspace;
  }

  K_KEYSPACE() {
    return this.getToken(CqlParser.K_KEYSPACE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwKeyspace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwKeyspacesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKeyspaces;
  }

  K_KEYSPACES() {
    return this.getToken(CqlParser.K_KEYSPACES, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwKeyspaces(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwLanguageContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLanguage;
  }

  K_LANGUAGE() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwLanguage(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwLimitContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLimit;
  }

  K_LIMIT() {
    return this.getToken(CqlParser.K_LIMIT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwLimit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwList;
  }

  K_LIST() {
    return this.getToken(CqlParser.K_LIST, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwLoggedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLogged;
  }

  K_LOGGED() {
    return this.getToken(CqlParser.K_LOGGED, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwLogged(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwLoginContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLogin;
  }

  K_LOGIN() {
    return this.getToken(CqlParser.K_LOGIN, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwLogin(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwMaterializedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwMaterialized;
  }

  K_MATERIALIZED() {
    return this.getToken(CqlParser.K_MATERIALIZED, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwMaterialized(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwModifyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwModify;
  }

  K_MODIFY() {
    return this.getToken(CqlParser.K_MODIFY, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwModify(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwNosuperuserContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNosuperuser;
  }

  K_NOSUPERUSER() {
    return this.getToken(CqlParser.K_NOSUPERUSER, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwNosuperuser(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwNorecursiveContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNorecursive;
  }

  K_NORECURSIVE() {
    return this.getToken(CqlParser.K_NORECURSIVE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwNorecursive(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwNotContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNot;
  }

  K_NOT() {
    return this.getToken(CqlParser.K_NOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwNot(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwNullContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNull;
  }

  K_NULL() {
    return this.getToken(CqlParser.K_NULL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwNull(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwOfContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOf;
  }

  K_OF() {
    return this.getToken(CqlParser.K_OF, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwOf(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwOnContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOn;
  }

  K_ON() {
    return this.getToken(CqlParser.K_ON, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwOn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwOptionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOptions;
  }

  K_OPTIONS() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwOptions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwOrContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOr;
  }

  K_OR() {
    return this.getToken(CqlParser.K_OR, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwOr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwOrderContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOrder;
  }

  K_ORDER() {
    return this.getToken(CqlParser.K_ORDER, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwOrder(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwPasswordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwPassword;
  }

  K_PASSWORD() {
    return this.getToken(CqlParser.K_PASSWORD, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwPassword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwPrimaryContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwPrimary;
  }

  K_PRIMARY() {
    return this.getToken(CqlParser.K_PRIMARY, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwPrimary(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwRenameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRename;
  }

  K_RENAME() {
    return this.getToken(CqlParser.K_RENAME, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwRename(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwReplaceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwReplace;
  }

  K_REPLACE() {
    return this.getToken(CqlParser.K_REPLACE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwReplace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwReplicationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwReplication;
  }

  K_REPLICATION() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwReplication(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwReturnsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwReturns;
  }

  K_RETURNS() {
    return this.getToken(CqlParser.K_RETURNS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwReturns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwRoleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRole;
  }

  K_ROLE() {
    return this.getToken(CqlParser.K_ROLE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwRole(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwInternalContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInternal;
  }

  K_INTERNAL() {
    return this.getToken(CqlParser.K_INTERNAL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwInternal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwLdapContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLdap;
  }

  K_LDAP() {
    return this.getToken(CqlParser.K_LDAP, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwLdap(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSchemeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwScheme;
  }

  K_SCHEME() {
    return this.getToken(CqlParser.K_SCHEME, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwScheme(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwRolesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRoles;
  }

  K_ROLES() {
    return this.getToken(CqlParser.K_ROLES, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwRoles(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSelectContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSelect;
  }

  K_SELECT() {
    return this.getToken(CqlParser.K_SELECT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSelect(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSet;
  }

  K_SET() {
    return this.getToken(CqlParser.K_SET, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSet(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSfuncContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSfunc;
  }

  K_SFUNC() {
    return this.getToken(CqlParser.K_SFUNC, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSfunc(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwStorageContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwStorage;
  }

  K_STORAGE() {
    return this.getToken(CqlParser.K_STORAGE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwStorage(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwStypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwStype;
  }

  K_STYPE() {
    return this.getToken(CqlParser.K_STYPE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwStype(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwSuperuserContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSuperuser;
  }

  K_SUPERUSER() {
    return this.getToken(CqlParser.K_SUPERUSER, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwSuperuser(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTableContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTable;
  }

  K_TABLE() {
    return this.getToken(CqlParser.K_TABLE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTimestampContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTimestamp;
  }

  K_TIMESTAMP() {
    return this.getToken(CqlParser.K_TIMESTAMP, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTimestamp(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwToContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTo;
  }

  K_TO() {
    return this.getToken(CqlParser.K_TO, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTo(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTriggerContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTrigger;
  }

  K_TRIGGER() {
    return this.getToken(CqlParser.K_TRIGGER, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTrigger(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTruncateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTruncate;
  }

  K_TRUNCATE() {
    return this.getToken(CqlParser.K_TRUNCATE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTruncate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTtlContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTtl;
  }

  K_TTL() {
    return this.getToken(CqlParser.K_TTL, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwTtl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwType;
  }

  K_TYPE() {
    return this.getToken(CqlParser.K_TYPE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwUnloggedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUnlogged;
  }

  K_UNLOGGED() {
    return this.getToken(CqlParser.K_UNLOGGED, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwUnlogged(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwUpdateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUpdate;
  }

  K_UPDATE() {
    return this.getToken(CqlParser.K_UPDATE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwUpdate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwUseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUse;
  }

  K_USE() {
    return this.getToken(CqlParser.K_USE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwUse(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwUserContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUser;
  }

  K_USER() {
    return this.getToken(CqlParser.K_USER, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwUser(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwUsersContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUsers;
  }

  K_USERS() {
    return this.getToken(CqlParser.K_USERS, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwUsers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwUsingContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUsing;
  }

  K_USING() {
    return this.getToken(CqlParser.K_USING, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwUsing(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwValuesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwValues;
  }

  K_VALUES() {
    return this.getToken(CqlParser.K_VALUES, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwValues(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwViewContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwView;
  }

  K_VIEW() {
    return this.getToken(CqlParser.K_VIEW, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwView(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwWhereContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwWhere;
  }

  K_WHERE() {
    return this.getToken(CqlParser.K_WHERE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwWhere(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwWithContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwWith;
  }

  K_WITH() {
    return this.getToken(CqlParser.K_WITH, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwWith(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KwRevokeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRevoke;
  }

  K_REVOKE() {
    return this.getToken(CqlParser.K_REVOKE, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitKwRevoke(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EofContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_eof;
  }

  EOF() {
    return this.getToken(CqlParser.EOF, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitEof(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SyntaxBracketLrContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLr;
  }

  LR_BRACKET() {
    return this.getToken(CqlParser.LR_BRACKET, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSyntaxBracketLr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SyntaxBracketRrContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRr;
  }

  RR_BRACKET() {
    return this.getToken(CqlParser.RR_BRACKET, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSyntaxBracketRr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SyntaxBracketLcContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLc;
  }

  LC_BRACKET() {
    return this.getToken(CqlParser.LC_BRACKET, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSyntaxBracketLc(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SyntaxBracketRcContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRc;
  }

  RC_BRACKET() {
    return this.getToken(CqlParser.RC_BRACKET, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSyntaxBracketRc(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SyntaxBracketLaContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLa;
  }

  OPERATOR_LT() {
    return this.getToken(CqlParser.OPERATOR_LT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSyntaxBracketLa(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SyntaxBracketRaContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRa;
  }

  OPERATOR_GT() {
    return this.getToken(CqlParser.OPERATOR_GT, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSyntaxBracketRa(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SyntaxBracketLsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLs;
  }

  LS_BRACKET() {
    return this.getToken(CqlParser.LS_BRACKET, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSyntaxBracketLs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SyntaxBracketRsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRs;
  }

  RS_BRACKET() {
    return this.getToken(CqlParser.RS_BRACKET, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSyntaxBracketRs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SyntaxCommaContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxComma;
  }

  COMMA() {
    return this.getToken(CqlParser.COMMA, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSyntaxComma(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SyntaxColonContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxColon;
  }

  COLON() {
    return this.getToken(CqlParser.COLON, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitSyntaxColon(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IdContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_id;
  }

  OBJECT_NAME() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
  }

  K_ADD() {
    return this.getToken(CqlParser.K_ADD, 0);
  }

  K_AGGREGATE() {
    return this.getToken(CqlParser.K_AGGREGATE, 0);
  }

  K_ALL() {
    return this.getToken(CqlParser.K_ALL, 0);
  }

  K_ALLOW() {
    return this.getToken(CqlParser.K_ALLOW, 0);
  }

  K_ALTER() {
    return this.getToken(CqlParser.K_ALTER, 0);
  }

  K_AND() {
    return this.getToken(CqlParser.K_AND, 0);
  }

  K_ANY() {
    return this.getToken(CqlParser.K_ANY, 0);
  }

  K_APPLY() {
    return this.getToken(CqlParser.K_APPLY, 0);
  }

  K_AS() {
    return this.getToken(CqlParser.K_AS, 0);
  }

  K_ASC() {
    return this.getToken(CqlParser.K_ASC, 0);
  }

  K_AUTHORIZE() {
    return this.getToken(CqlParser.K_AUTHORIZE, 0);
  }

  K_BATCH() {
    return this.getToken(CqlParser.K_BATCH, 0);
  }

  K_BEGIN() {
    return this.getToken(CqlParser.K_BEGIN, 0);
  }

  K_BY() {
    return this.getToken(CqlParser.K_BY, 0);
  }

  K_CALLED() {
    return this.getToken(CqlParser.K_CALLED, 0);
  }

  K_CLUSTERING() {
    return this.getToken(CqlParser.K_CLUSTERING, 0);
  }

  K_COLUMNFAMILY() {
    return this.getToken(CqlParser.K_COLUMNFAMILY, 0);
  }

  K_COMPACT() {
    return this.getToken(CqlParser.K_COMPACT, 0);
  }

  K_CONSISTENCY() {
    return this.getToken(CqlParser.K_CONSISTENCY, 0);
  }

  K_CONTAINS() {
    return this.getToken(CqlParser.K_CONTAINS, 0);
  }

  K_CREATE() {
    return this.getToken(CqlParser.K_CREATE, 0);
  }

  K_CUSTOM() {
    return this.getToken(CqlParser.K_CUSTOM, 0);
  }

  K_DELETE() {
    return this.getToken(CqlParser.K_DELETE, 0);
  }

  K_DESC() {
    return this.getToken(CqlParser.K_DESC, 0);
  }

  K_DESCRIBE() {
    return this.getToken(CqlParser.K_DESCRIBE, 0);
  }

  K_DISTINCT() {
    return this.getToken(CqlParser.K_DISTINCT, 0);
  }

  K_DROP() {
    return this.getToken(CqlParser.K_DROP, 0);
  }

  K_DURABLE_WRITES() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
  }

  K_EACH_QUORUM() {
    return this.getToken(CqlParser.K_EACH_QUORUM, 0);
  }

  K_ENTRIES() {
    return this.getToken(CqlParser.K_ENTRIES, 0);
  }

  K_EXECUTE() {
    return this.getToken(CqlParser.K_EXECUTE, 0);
  }

  K_EXISTS() {
    return this.getToken(CqlParser.K_EXISTS, 0);
  }

  K_FALSE() {
    return this.getToken(CqlParser.K_FALSE, 0);
  }

  K_FILTERING() {
    return this.getToken(CqlParser.K_FILTERING, 0);
  }

  K_FINALFUNC() {
    return this.getToken(CqlParser.K_FINALFUNC, 0);
  }

  K_FROM() {
    return this.getToken(CqlParser.K_FROM, 0);
  }

  K_FULL() {
    return this.getToken(CqlParser.K_FULL, 0);
  }

  K_FUNCTION() {
    return this.getToken(CqlParser.K_FUNCTION, 0);
  }

  K_FUNCTIONS() {
    return this.getToken(CqlParser.K_FUNCTIONS, 0);
  }

  K_GRANT() {
    return this.getToken(CqlParser.K_GRANT, 0);
  }

  K_IF() {
    return this.getToken(CqlParser.K_IF, 0);
  }

  K_IN() {
    return this.getToken(CqlParser.K_IN, 0);
  }

  K_INDEX() {
    return this.getToken(CqlParser.K_INDEX, 0);
  }

  K_INFINITY() {
    return this.getToken(CqlParser.K_INFINITY, 0);
  }

  K_INITCOND() {
    return this.getToken(CqlParser.K_INITCOND, 0);
  }

  K_INPUT() {
    return this.getToken(CqlParser.K_INPUT, 0);
  }

  K_INSERT() {
    return this.getToken(CqlParser.K_INSERT, 0);
  }

  K_INTO() {
    return this.getToken(CqlParser.K_INTO, 0);
  }

  K_IS() {
    return this.getToken(CqlParser.K_IS, 0);
  }

  K_JSON() {
    return this.getToken(CqlParser.K_JSON, 0);
  }

  K_KEY() {
    return this.getToken(CqlParser.K_KEY, 0);
  }

  K_KEYS() {
    return this.getToken(CqlParser.K_KEYS, 0);
  }

  K_KEYSPACE() {
    return this.getToken(CqlParser.K_KEYSPACE, 0);
  }

  K_KEYSPACES() {
    return this.getToken(CqlParser.K_KEYSPACES, 0);
  }

  K_LANGUAGE() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
  }

  K_LEVEL() {
    return this.getToken(CqlParser.K_LEVEL, 0);
  }

  K_LIMIT() {
    return this.getToken(CqlParser.K_LIMIT, 0);
  }

  K_LOCAL_ONE() {
    return this.getToken(CqlParser.K_LOCAL_ONE, 0);
  }

  K_LOCAL_QUORUM() {
    return this.getToken(CqlParser.K_LOCAL_QUORUM, 0);
  }

  K_LOGGED() {
    return this.getToken(CqlParser.K_LOGGED, 0);
  }

  K_LOGIN() {
    return this.getToken(CqlParser.K_LOGIN, 0);
  }

  K_MATERIALIZED() {
    return this.getToken(CqlParser.K_MATERIALIZED, 0);
  }

  K_MODIFY() {
    return this.getToken(CqlParser.K_MODIFY, 0);
  }

  K_NAN() {
    return this.getToken(CqlParser.K_NAN, 0);
  }

  K_NORECURSIVE() {
    return this.getToken(CqlParser.K_NORECURSIVE, 0);
  }

  K_NOSUPERUSER() {
    return this.getToken(CqlParser.K_NOSUPERUSER, 0);
  }

  K_NOT() {
    return this.getToken(CqlParser.K_NOT, 0);
  }

  K_NULL() {
    return this.getToken(CqlParser.K_NULL, 0);
  }

  K_OF() {
    return this.getToken(CqlParser.K_OF, 0);
  }

  K_ON() {
    return this.getToken(CqlParser.K_ON, 0);
  }

  K_ONE() {
    return this.getToken(CqlParser.K_ONE, 0);
  }

  K_OPTIONS() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
  }

  K_OR() {
    return this.getToken(CqlParser.K_OR, 0);
  }

  K_ORDER() {
    return this.getToken(CqlParser.K_ORDER, 0);
  }

  K_PARTITION() {
    return this.getToken(CqlParser.K_PARTITION, 0);
  }

  K_PASSWORD() {
    return this.getToken(CqlParser.K_PASSWORD, 0);
  }

  K_PER() {
    return this.getToken(CqlParser.K_PER, 0);
  }

  K_PERMISSION() {
    return this.getToken(CqlParser.K_PERMISSION, 0);
  }

  K_PERMISSIONS() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
  }

  K_PRIMARY() {
    return this.getToken(CqlParser.K_PRIMARY, 0);
  }

  K_QUORUM() {
    return this.getToken(CqlParser.K_QUORUM, 0);
  }

  K_RENAME() {
    return this.getToken(CqlParser.K_RENAME, 0);
  }

  K_REPLACE() {
    return this.getToken(CqlParser.K_REPLACE, 0);
  }

  K_REPLICATION() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
  }

  K_RETURNS() {
    return this.getToken(CqlParser.K_RETURNS, 0);
  }

  K_REVOKE() {
    return this.getToken(CqlParser.K_REVOKE, 0);
  }

  K_ROLE() {
    return this.getToken(CqlParser.K_ROLE, 0);
  }

  K_ROLES() {
    return this.getToken(CqlParser.K_ROLES, 0);
  }

  K_SCHEMA() {
    return this.getToken(CqlParser.K_SCHEMA, 0);
  }

  K_SELECT() {
    return this.getToken(CqlParser.K_SELECT, 0);
  }

  K_SET() {
    return this.getToken(CqlParser.K_SET, 0);
  }

  K_SFUNC() {
    return this.getToken(CqlParser.K_SFUNC, 0);
  }

  K_STATIC() {
    return this.getToken(CqlParser.K_STATIC, 0);
  }

  K_STORAGE() {
    return this.getToken(CqlParser.K_STORAGE, 0);
  }

  K_STYPE() {
    return this.getToken(CqlParser.K_STYPE, 0);
  }

  K_SUPERUSER() {
    return this.getToken(CqlParser.K_SUPERUSER, 0);
  }

  K_TABLE() {
    return this.getToken(CqlParser.K_TABLE, 0);
  }

  K_THREE() {
    return this.getToken(CqlParser.K_THREE, 0);
  }

  K_TIMESTAMP() {
    return this.getToken(CqlParser.K_TIMESTAMP, 0);
  }

  K_TO() {
    return this.getToken(CqlParser.K_TO, 0);
  }

  K_TOKEN() {
    return this.getToken(CqlParser.K_TOKEN, 0);
  }

  K_TRIGGER() {
    return this.getToken(CqlParser.K_TRIGGER, 0);
  }

  K_TRUE() {
    return this.getToken(CqlParser.K_TRUE, 0);
  }

  K_TRUNCATE() {
    return this.getToken(CqlParser.K_TRUNCATE, 0);
  }

  K_TTL() {
    return this.getToken(CqlParser.K_TTL, 0);
  }

  K_TWO() {
    return this.getToken(CqlParser.K_TWO, 0);
  }

  K_TYPE() {
    return this.getToken(CqlParser.K_TYPE, 0);
  }

  K_UNLOGGED() {
    return this.getToken(CqlParser.K_UNLOGGED, 0);
  }

  K_UPDATE() {
    return this.getToken(CqlParser.K_UPDATE, 0);
  }

  K_USE() {
    return this.getToken(CqlParser.K_USE, 0);
  }

  K_USER() {
    return this.getToken(CqlParser.K_USER, 0);
  }

  K_USING() {
    return this.getToken(CqlParser.K_USING, 0);
  }

  K_UUID() {
    return this.getToken(CqlParser.K_UUID, 0);
  }

  K_VALUES() {
    return this.getToken(CqlParser.K_VALUES, 0);
  }

  K_VIEW() {
    return this.getToken(CqlParser.K_VIEW, 0);
  }

  K_WHERE() {
    return this.getToken(CqlParser.K_WHERE, 0);
  }

  K_WITH() {
    return this.getToken(CqlParser.K_WITH, 0);
  }

  K_WRITETIME() {
    return this.getToken(CqlParser.K_WRITETIME, 0);
  }

  K_ASCII() {
    return this.getToken(CqlParser.K_ASCII, 0);
  }

  K_BIGINT() {
    return this.getToken(CqlParser.K_BIGINT, 0);
  }

  K_BLOB() {
    return this.getToken(CqlParser.K_BLOB, 0);
  }

  K_BOOLEAN() {
    return this.getToken(CqlParser.K_BOOLEAN, 0);
  }

  K_COUNTER() {
    return this.getToken(CqlParser.K_COUNTER, 0);
  }

  K_DATE() {
    return this.getToken(CqlParser.K_DATE, 0);
  }

  K_DECIMAL() {
    return this.getToken(CqlParser.K_DECIMAL, 0);
  }

  K_DOUBLE() {
    return this.getToken(CqlParser.K_DOUBLE, 0);
  }

  K_FLOAT() {
    return this.getToken(CqlParser.K_FLOAT, 0);
  }

  K_FROZEN() {
    return this.getToken(CqlParser.K_FROZEN, 0);
  }

  K_INET() {
    return this.getToken(CqlParser.K_INET, 0);
  }

  K_INT() {
    return this.getToken(CqlParser.K_INT, 0);
  }

  K_LIST() {
    return this.getToken(CqlParser.K_LIST, 0);
  }

  K_MAP() {
    return this.getToken(CqlParser.K_MAP, 0);
  }

  K_SMALLINT() {
    return this.getToken(CqlParser.K_SMALLINT, 0);
  }

  K_TEXT() {
    return this.getToken(CqlParser.K_TEXT, 0);
  }

  K_TIMEUUID() {
    return this.getToken(CqlParser.K_TIMEUUID, 0);
  }

  K_TIME() {
    return this.getToken(CqlParser.K_TIME, 0);
  }

  K_TINYINT() {
    return this.getToken(CqlParser.K_TINYINT, 0);
  }

  K_TUPLE() {
    return this.getToken(CqlParser.K_TUPLE, 0);
  }

  K_VARCHAR() {
    return this.getToken(CqlParser.K_VARCHAR, 0);
  }

  K_VARINT() {
    return this.getToken(CqlParser.K_VARINT, 0);
  }

  K_USERS() {
    return this.getToken(CqlParser.K_USERS, 0);
  }

  K_VECTOR() {
    return this.getToken(CqlParser.K_VECTOR, 0);
  }

  accept(visitor) {
    if (visitor instanceof CqlParserVisitor) {
      return visitor.visitId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

CqlParser.RootContext = RootContext;
CqlParser.CqlsContext = CqlsContext;
CqlParser.StatementSeparatorContext = StatementSeparatorContext;
CqlParser.EmptyContext = EmptyContext;
CqlParser.CqlContext = CqlContext;
CqlParser.RevokeContext = RevokeContext;
CqlParser.ListUsersContext = ListUsersContext;
CqlParser.ListRolesContext = ListRolesContext;
CqlParser.ListPermissionsContext = ListPermissionsContext;
CqlParser.GrantContext = GrantContext;
CqlParser.PriviledgeContext = PriviledgeContext;
CqlParser.ResourceContext = ResourceContext;
CqlParser.CreateUserContext = CreateUserContext;
CqlParser.CreateRoleContext = CreateRoleContext;
CqlParser.CreateTypeContext = CreateTypeContext;
CqlParser.TypeMemberColumnListContext = TypeMemberColumnListContext;
CqlParser.CreateTriggerContext = CreateTriggerContext;
CqlParser.CreateMaterializedViewContext = CreateMaterializedViewContext;
CqlParser.MaterializedViewWhereContext = MaterializedViewWhereContext;
CqlParser.ColumnNotNullListContext = ColumnNotNullListContext;
CqlParser.ColumnNotNullContext = ColumnNotNullContext;
CqlParser.MaterializedViewOptionsContext = MaterializedViewOptionsContext;
CqlParser.CreateKeyspaceContext = CreateKeyspaceContext;
CqlParser.CreateFunctionContext = CreateFunctionContext;
CqlParser.CodeBlockContext = CodeBlockContext;
CqlParser.ParamListContext = ParamListContext;
CqlParser.ReturnModeContext = ReturnModeContext;
CqlParser.CreateAggregateContext = CreateAggregateContext;
CqlParser.InitCondDefinitionContext = InitCondDefinitionContext;
CqlParser.InitCondHashContext = InitCondHashContext;
CqlParser.InitCondHashItemContext = InitCondHashItemContext;
CqlParser.InitCondListNestedContext = InitCondListNestedContext;
CqlParser.InitCondListContext = InitCondListContext;
CqlParser.OrReplaceContext = OrReplaceContext;
CqlParser.AlterUserContext = AlterUserContext;
CqlParser.UserPasswordContext = UserPasswordContext;
CqlParser.UserSuperUserContext = UserSuperUserContext;
CqlParser.AlterTypeContext = AlterTypeContext;
CqlParser.AlterTypeOperationContext = AlterTypeOperationContext;
CqlParser.AlterTypeRenameContext = AlterTypeRenameContext;
CqlParser.AlterTypeRenameListContext = AlterTypeRenameListContext;
CqlParser.AlterTypeRenameItemContext = AlterTypeRenameItemContext;
CqlParser.AlterTypeAddContext = AlterTypeAddContext;
CqlParser.AlterTypeAlterTypeContext = AlterTypeAlterTypeContext;
CqlParser.AlterTableContext = AlterTableContext;
CqlParser.AlterTableOperationContext = AlterTableOperationContext;
CqlParser.AlterTableWithContext = AlterTableWithContext;
CqlParser.AlterTableRenameContext = AlterTableRenameContext;
CqlParser.AlterTableDropCompactStorageContext =
  AlterTableDropCompactStorageContext;
CqlParser.AlterTableDropColumnsContext = AlterTableDropColumnsContext;
CqlParser.AlterTableDropColumnListContext = AlterTableDropColumnListContext;
CqlParser.AlterTableAddContext = AlterTableAddContext;
CqlParser.AlterTableColumnDefinitionContext = AlterTableColumnDefinitionContext;
CqlParser.AlterRoleContext = AlterRoleContext;
CqlParser.RoleWithContext = RoleWithContext;
CqlParser.RoleWithOptionsContext = RoleWithOptionsContext;
CqlParser.AlterMaterializedViewContext = AlterMaterializedViewContext;
CqlParser.DropUserContext = DropUserContext;
CqlParser.DropTypeContext = DropTypeContext;
CqlParser.DropMaterializedViewContext = DropMaterializedViewContext;
CqlParser.DropAggregateContext = DropAggregateContext;
CqlParser.DropFunctionContext = DropFunctionContext;
CqlParser.DropTriggerContext = DropTriggerContext;
CqlParser.DropRoleContext = DropRoleContext;
CqlParser.DropTableContext = DropTableContext;
CqlParser.DropKeyspaceContext = DropKeyspaceContext;
CqlParser.DropIndexContext = DropIndexContext;
CqlParser.CreateTableContext = CreateTableContext;
CqlParser.WithElementContext = WithElementContext;
CqlParser.ClusteringOrderColumnsContext = ClusteringOrderColumnsContext;
CqlParser.ClusteringOrderContext = ClusteringOrderContext;
CqlParser.TableOptionsContext = TableOptionsContext;
CqlParser.TableOptionItemContext = TableOptionItemContext;
CqlParser.TableOptionNameContext = TableOptionNameContext;
CqlParser.TableOptionValueContext = TableOptionValueContext;
CqlParser.OptionHashContext = OptionHashContext;
CqlParser.OptionHashItemContext = OptionHashItemContext;
CqlParser.OptionHashKeyContext = OptionHashKeyContext;
CqlParser.OptionHashValueContext = OptionHashValueContext;
CqlParser.ColumnDefinitionListContext = ColumnDefinitionListContext;
CqlParser.ColumnDefinitionContext = ColumnDefinitionContext;
CqlParser.PrimaryKeyColumnContext = PrimaryKeyColumnContext;
CqlParser.PrimaryKeyElementContext = PrimaryKeyElementContext;
CqlParser.PrimaryKeyDefinitionContext = PrimaryKeyDefinitionContext;
CqlParser.SinglePrimaryKeyContext = SinglePrimaryKeyContext;
CqlParser.CompoundKeyContext = CompoundKeyContext;
CqlParser.CompositeKeyContext = CompositeKeyContext;
CqlParser.PartitionKeyListContext = PartitionKeyListContext;
CqlParser.ClusteringKeyListContext = ClusteringKeyListContext;
CqlParser.PartitionKeyContext = PartitionKeyContext;
CqlParser.ClusteringKeyContext = ClusteringKeyContext;
CqlParser.ApplyBatchContext = ApplyBatchContext;
CqlParser.BeginBatchContext = BeginBatchContext;
CqlParser.BatchTypeContext = BatchTypeContext;
CqlParser.AlterKeyspaceContext = AlterKeyspaceContext;
CqlParser.ReplicationListContext = ReplicationListContext;
CqlParser.ReplicationListItemContext = ReplicationListItemContext;
CqlParser.DurableWritesContext = DurableWritesContext;
CqlParser.UseContext = UseContext;
CqlParser.TruncateContext = TruncateContext;
CqlParser.CreateIndexContext = CreateIndexContext;
CqlParser.CustomIndexOptionContext = CustomIndexOptionContext;
CqlParser.CreateSearchIndexContext = CreateSearchIndexContext;
CqlParser.SearchIndexConfigsContext = SearchIndexConfigsContext;
CqlParser.DirectoryFactoryContext = DirectoryFactoryContext;
CqlParser.SearchIndexOptionsContext = SearchIndexOptionsContext;
CqlParser.SearchIndexProfileContext = SearchIndexProfileContext;
CqlParser.SearchIndexProfilesContext = SearchIndexProfilesContext;
CqlParser.SearchIndexColumnListContext = SearchIndexColumnListContext;
CqlParser.SearchIndexColumnContext = SearchIndexColumnContext;
CqlParser.IndexNameContext = IndexNameContext;
CqlParser.IndexColumnSpecContext = IndexColumnSpecContext;
CqlParser.IndexKeysSpecContext = IndexKeysSpecContext;
CqlParser.IndexEntriesSSpecContext = IndexEntriesSSpecContext;
CqlParser.IndexFullSpecContext = IndexFullSpecContext;
CqlParser.IndexValuesSpecContext = IndexValuesSpecContext;
CqlParser.DeleteStatementContext = DeleteStatementContext;
CqlParser.DeleteColumnListContext = DeleteColumnListContext;
CqlParser.DeleteColumnItemContext = DeleteColumnItemContext;
CqlParser.UpdateContext = UpdateContext;
CqlParser.IfSpecContext = IfSpecContext;
CqlParser.IfConditionListContext = IfConditionListContext;
CqlParser.IfConditionContext = IfConditionContext;
CqlParser.AssignmentsContext = AssignmentsContext;
CqlParser.AssignmentElementContext = AssignmentElementContext;
CqlParser.AssignmentSetContext = AssignmentSetContext;
CqlParser.AssignmentMapContext = AssignmentMapContext;
CqlParser.AssignmentMapExpressionContext = AssignmentMapExpressionContext;
CqlParser.AssignmentListContext = AssignmentListContext;
CqlParser.AssignmentTupleContext = AssignmentTupleContext;
CqlParser.InsertContext = InsertContext;
CqlParser.UsingTtlTimestampContext = UsingTtlTimestampContext;
CqlParser.TimestampContext = TimestampContext;
CqlParser.TtlContext = TtlContext;
CqlParser.UsingTimestampSpecContext = UsingTimestampSpecContext;
CqlParser.IfNotExistContext = IfNotExistContext;
CqlParser.IfExistContext = IfExistContext;
CqlParser.InsertValuesSpecContext = InsertValuesSpecContext;
CqlParser.InsertColumnSpecContext = InsertColumnSpecContext;
CqlParser.ColumnListContext = ColumnListContext;
CqlParser.ExpressionListContext = ExpressionListContext;
CqlParser.ExpressionContext = ExpressionContext;
CqlParser.SelectContext = SelectContext;
CqlParser.AllowFilteringSpecContext = AllowFilteringSpecContext;
CqlParser.LimitSpecContext = LimitSpecContext;
CqlParser.FromSpecContext = FromSpecContext;
CqlParser.FromSpecElementContext = FromSpecElementContext;
CqlParser.OrderSpecContext = OrderSpecContext;
CqlParser.OrderSpecElementContext = OrderSpecElementContext;
CqlParser.WhereSpecContext = WhereSpecContext;
CqlParser.DistinctSpecContext = DistinctSpecContext;
CqlParser.SelectElementsContext = SelectElementsContext;
CqlParser.SelectElementContext = SelectElementContext;
CqlParser.RelationElementsContext = RelationElementsContext;
CqlParser.RelationElementContext = RelationElementContext;
CqlParser.RelalationContainsContext = RelalationContainsContext;
CqlParser.RelalationContainsKeyContext = RelalationContainsKeyContext;
CqlParser.FunctionCallContext = FunctionCallContext;
CqlParser.FunctionArgsContext = FunctionArgsContext;
CqlParser.ConstantContext = ConstantContext;
CqlParser.DecimalLiteralContext = DecimalLiteralContext;
CqlParser.FloatLiteralContext = FloatLiteralContext;
CqlParser.StringLiteralContext = StringLiteralContext;
CqlParser.BooleanLiteralContext = BooleanLiteralContext;
CqlParser.HexadecimalLiteralContext = HexadecimalLiteralContext;
CqlParser.KeyspaceContext = KeyspaceContext;
CqlParser.TableContext = TableContext;
CqlParser.ColumnContext = ColumnContext;
CqlParser.DataTypeContext = DataTypeContext;
CqlParser.DataTypeNameContext = DataTypeNameContext;
CqlParser.DataTypeDefinitionContext = DataTypeDefinitionContext;
CqlParser.OrderDirectionContext = OrderDirectionContext;
CqlParser.RoleContext = RoleContext;
CqlParser.TriggerContext = TriggerContext;
CqlParser.TriggerClassContext = TriggerClassContext;
CqlParser.MaterializedViewContext = MaterializedViewContext;
CqlParser.TypeContext = TypeContext;
CqlParser.AggregateContext = AggregateContext;
CqlParser.FunctionStatementContext = FunctionStatementContext;
CqlParser.LanguageContext = LanguageContext;
CqlParser.UserContext = UserContext;
CqlParser.PasswordContext = PasswordContext;
CqlParser.HashKeyContext = HashKeyContext;
CqlParser.ParamContext = ParamContext;
CqlParser.ParamNameContext = ParamNameContext;
CqlParser.KwAddContext = KwAddContext;
CqlParser.KwAggregateContext = KwAggregateContext;
CqlParser.KwAllContext = KwAllContext;
CqlParser.KwAllPermissionsContext = KwAllPermissionsContext;
CqlParser.KwAllowContext = KwAllowContext;
CqlParser.KwAlterContext = KwAlterContext;
CqlParser.KwAndContext = KwAndContext;
CqlParser.KwApplyContext = KwApplyContext;
CqlParser.KwAsContext = KwAsContext;
CqlParser.KwAscContext = KwAscContext;
CqlParser.KwAuthorizeContext = KwAuthorizeContext;
CqlParser.KwBatchContext = KwBatchContext;
CqlParser.KwBeginContext = KwBeginContext;
CqlParser.KwByContext = KwByContext;
CqlParser.KwCalledContext = KwCalledContext;
CqlParser.KwClusteringContext = KwClusteringContext;
CqlParser.KwCompactContext = KwCompactContext;
CqlParser.KwContainsContext = KwContainsContext;
CqlParser.KwCreateContext = KwCreateContext;
CqlParser.KwDeleteContext = KwDeleteContext;
CqlParser.KwDescContext = KwDescContext;
CqlParser.KwDescibeContext = KwDescibeContext;
CqlParser.KwDistinctContext = KwDistinctContext;
CqlParser.KwDropContext = KwDropContext;
CqlParser.KwDurableWritesContext = KwDurableWritesContext;
CqlParser.KwEntriesContext = KwEntriesContext;
CqlParser.KwExecuteContext = KwExecuteContext;
CqlParser.KwExistsContext = KwExistsContext;
CqlParser.KwFilteringContext = KwFilteringContext;
CqlParser.KwFinalfuncContext = KwFinalfuncContext;
CqlParser.KwFromContext = KwFromContext;
CqlParser.KwFullContext = KwFullContext;
CqlParser.KwFunctionContext = KwFunctionContext;
CqlParser.KwFunctionsContext = KwFunctionsContext;
CqlParser.KwGrantContext = KwGrantContext;
CqlParser.KwIfContext = KwIfContext;
CqlParser.KwInContext = KwInContext;
CqlParser.KwIndexContext = KwIndexContext;
CqlParser.KwCustomContext = KwCustomContext;
CqlParser.KwSearchContext = KwSearchContext;
CqlParser.KwAsciiContext = KwAsciiContext;
CqlParser.KwNormalizeContext = KwNormalizeContext;
CqlParser.KwAnalyzedContext = KwAnalyzedContext;
CqlParser.KwIsLiteralContext = KwIsLiteralContext;
CqlParser.KwMaxCompactionFlushMemoryInMbContext =
  KwMaxCompactionFlushMemoryInMbContext;
CqlParser.KwTokenizationEnableStemmingContext =
  KwTokenizationEnableStemmingContext;
CqlParser.KwTokenizationSkipStopWordsContext =
  KwTokenizationSkipStopWordsContext;
CqlParser.KwTokenizationLocaleContext = KwTokenizationLocaleContext;
CqlParser.KwTokenizationNormalizeLowercaseContext =
  KwTokenizationNormalizeLowercaseContext;
CqlParser.KwTokenizationNormalizeUppercaseContext =
  KwTokenizationNormalizeUppercaseContext;
CqlParser.KwNormalizeLowercaseContext = KwNormalizeLowercaseContext;
CqlParser.KwNormalizeUppercaseContext = KwNormalizeUppercaseContext;
CqlParser.KwModeContext = KwModeContext;
CqlParser.KwAnalyzerClassContext = KwAnalyzerClassContext;
CqlParser.KwStorageAttachedIndexContext = KwStorageAttachedIndexContext;
CqlParser.KwSolrIndexContext = KwSolrIndexContext;
CqlParser.KwSASIIndexContext = KwSASIIndexContext;
CqlParser.KwSpaceSavingNoJoinContext = KwSpaceSavingNoJoinContext;
CqlParser.KwSpaceSavingAllContext = KwSpaceSavingAllContext;
CqlParser.KwSpaceSavingSlowTriePrecisionContext =
  KwSpaceSavingSlowTriePrecisionContext;
CqlParser.KwSpaceSavingNoTextFieldContext = KwSpaceSavingNoTextFieldContext;
CqlParser.KwCopyFieldContext = KwCopyFieldContext;
CqlParser.KwDocValuesContext = KwDocValuesContext;
CqlParser.KwExcludedContext = KwExcludedContext;
CqlParser.KwIndexedContext = KwIndexedContext;
CqlParser.KwLowerCaseContext = KwLowerCaseContext;
CqlParser.KwColumnsContext = KwColumnsContext;
CqlParser.KwProfilesContext = KwProfilesContext;
CqlParser.KwConfigContext = KwConfigContext;
CqlParser.KwAutoCommitTimeContext = KwAutoCommitTimeContext;
CqlParser.KwDefaultQueryFieldContext = KwDefaultQueryFieldContext;
CqlParser.KwDirectoryFactoryContext = KwDirectoryFactoryContext;
CqlParser.KwFilterCacheLowWaterMarkContext = KwFilterCacheLowWaterMarkContext;
CqlParser.KwFilterCacheHighWaterMarkContext = KwFilterCacheHighWaterMarkContext;
CqlParser.KwDirectoryFactoryClassContext = KwDirectoryFactoryClassContext;
CqlParser.KwMergeMaxThreadCountContext = KwMergeMaxThreadCountContext;
CqlParser.KwMergeMaxMergeCountContext = KwMergeMaxMergeCountContext;
CqlParser.KwRamBufferSizeContext = KwRamBufferSizeContext;
CqlParser.KwRealtimeContext = KwRealtimeContext;
CqlParser.KwRecoveryContext = KwRecoveryContext;
CqlParser.KwReindexContext = KwReindexContext;
CqlParser.KwLenientContext = KwLenientContext;
CqlParser.KwStandardContext = KwStandardContext;
CqlParser.KwEncryptedContext = KwEncryptedContext;
CqlParser.KwCaseSensitiveContext = KwCaseSensitiveContext;
CqlParser.KwInitcondContext = KwInitcondContext;
CqlParser.KwInputContext = KwInputContext;
CqlParser.KwInsertContext = KwInsertContext;
CqlParser.KwIntoContext = KwIntoContext;
CqlParser.KwIsContext = KwIsContext;
CqlParser.KwJsonContext = KwJsonContext;
CqlParser.KwKeyContext = KwKeyContext;
CqlParser.KwKeysContext = KwKeysContext;
CqlParser.KwKeyspaceContext = KwKeyspaceContext;
CqlParser.KwKeyspacesContext = KwKeyspacesContext;
CqlParser.KwLanguageContext = KwLanguageContext;
CqlParser.KwLimitContext = KwLimitContext;
CqlParser.KwListContext = KwListContext;
CqlParser.KwLoggedContext = KwLoggedContext;
CqlParser.KwLoginContext = KwLoginContext;
CqlParser.KwMaterializedContext = KwMaterializedContext;
CqlParser.KwModifyContext = KwModifyContext;
CqlParser.KwNosuperuserContext = KwNosuperuserContext;
CqlParser.KwNorecursiveContext = KwNorecursiveContext;
CqlParser.KwNotContext = KwNotContext;
CqlParser.KwNullContext = KwNullContext;
CqlParser.KwOfContext = KwOfContext;
CqlParser.KwOnContext = KwOnContext;
CqlParser.KwOptionsContext = KwOptionsContext;
CqlParser.KwOrContext = KwOrContext;
CqlParser.KwOrderContext = KwOrderContext;
CqlParser.KwPasswordContext = KwPasswordContext;
CqlParser.KwPrimaryContext = KwPrimaryContext;
CqlParser.KwRenameContext = KwRenameContext;
CqlParser.KwReplaceContext = KwReplaceContext;
CqlParser.KwReplicationContext = KwReplicationContext;
CqlParser.KwReturnsContext = KwReturnsContext;
CqlParser.KwRoleContext = KwRoleContext;
CqlParser.KwInternalContext = KwInternalContext;
CqlParser.KwLdapContext = KwLdapContext;
CqlParser.KwSchemeContext = KwSchemeContext;
CqlParser.KwRolesContext = KwRolesContext;
CqlParser.KwSelectContext = KwSelectContext;
CqlParser.KwSetContext = KwSetContext;
CqlParser.KwSfuncContext = KwSfuncContext;
CqlParser.KwStorageContext = KwStorageContext;
CqlParser.KwStypeContext = KwStypeContext;
CqlParser.KwSuperuserContext = KwSuperuserContext;
CqlParser.KwTableContext = KwTableContext;
CqlParser.KwTimestampContext = KwTimestampContext;
CqlParser.KwToContext = KwToContext;
CqlParser.KwTriggerContext = KwTriggerContext;
CqlParser.KwTruncateContext = KwTruncateContext;
CqlParser.KwTtlContext = KwTtlContext;
CqlParser.KwTypeContext = KwTypeContext;
CqlParser.KwUnloggedContext = KwUnloggedContext;
CqlParser.KwUpdateContext = KwUpdateContext;
CqlParser.KwUseContext = KwUseContext;
CqlParser.KwUserContext = KwUserContext;
CqlParser.KwUsersContext = KwUsersContext;
CqlParser.KwUsingContext = KwUsingContext;
CqlParser.KwValuesContext = KwValuesContext;
CqlParser.KwViewContext = KwViewContext;
CqlParser.KwWhereContext = KwWhereContext;
CqlParser.KwWithContext = KwWithContext;
CqlParser.KwRevokeContext = KwRevokeContext;
CqlParser.EofContext = EofContext;
CqlParser.SyntaxBracketLrContext = SyntaxBracketLrContext;
CqlParser.SyntaxBracketRrContext = SyntaxBracketRrContext;
CqlParser.SyntaxBracketLcContext = SyntaxBracketLcContext;
CqlParser.SyntaxBracketRcContext = SyntaxBracketRcContext;
CqlParser.SyntaxBracketLaContext = SyntaxBracketLaContext;
CqlParser.SyntaxBracketRaContext = SyntaxBracketRaContext;
CqlParser.SyntaxBracketLsContext = SyntaxBracketLsContext;
CqlParser.SyntaxBracketRsContext = SyntaxBracketRsContext;
CqlParser.SyntaxCommaContext = SyntaxCommaContext;
CqlParser.SyntaxColonContext = SyntaxColonContext;
CqlParser.IdContext = IdContext;

exports.CqlParser = CqlParser;
